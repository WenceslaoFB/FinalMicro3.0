
prot3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000722c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  080073c4  080073c4  000173c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075e0  080075e0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080075e0  080075e0  000175e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075e8  080075e8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075e8  080075e8  000175e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075ec  080075ec  000175ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080075f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000630  20000010  08007600  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000640  08007600  00020640  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001083d  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020c2  00000000  00000000  0003087d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  00032940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d50  00000000  00000000  00033748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001748b  00000000  00000000  00034498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000107d4  00000000  00000000  0004b923  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000988db  00000000  00000000  0005c0f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f49d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cf0  00000000  00000000  000f4a24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080073ac 	.word	0x080073ac

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	080073ac 	.word	0x080073ac

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__gedf2>:
 8000550:	f04f 3cff 	mov.w	ip, #4294967295
 8000554:	e006      	b.n	8000564 <__cmpdf2+0x4>
 8000556:	bf00      	nop

08000558 <__ledf2>:
 8000558:	f04f 0c01 	mov.w	ip, #1
 800055c:	e002      	b.n	8000564 <__cmpdf2+0x4>
 800055e:	bf00      	nop

08000560 <__cmpdf2>:
 8000560:	f04f 0c01 	mov.w	ip, #1
 8000564:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000568:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800056c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000570:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000574:	bf18      	it	ne
 8000576:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800057a:	d01b      	beq.n	80005b4 <__cmpdf2+0x54>
 800057c:	b001      	add	sp, #4
 800057e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000582:	bf0c      	ite	eq
 8000584:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000588:	ea91 0f03 	teqne	r1, r3
 800058c:	bf02      	ittt	eq
 800058e:	ea90 0f02 	teqeq	r0, r2
 8000592:	2000      	moveq	r0, #0
 8000594:	4770      	bxeq	lr
 8000596:	f110 0f00 	cmn.w	r0, #0
 800059a:	ea91 0f03 	teq	r1, r3
 800059e:	bf58      	it	pl
 80005a0:	4299      	cmppl	r1, r3
 80005a2:	bf08      	it	eq
 80005a4:	4290      	cmpeq	r0, r2
 80005a6:	bf2c      	ite	cs
 80005a8:	17d8      	asrcs	r0, r3, #31
 80005aa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005ae:	f040 0001 	orr.w	r0, r0, #1
 80005b2:	4770      	bx	lr
 80005b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005bc:	d102      	bne.n	80005c4 <__cmpdf2+0x64>
 80005be:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005c2:	d107      	bne.n	80005d4 <__cmpdf2+0x74>
 80005c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005cc:	d1d6      	bne.n	800057c <__cmpdf2+0x1c>
 80005ce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005d2:	d0d3      	beq.n	800057c <__cmpdf2+0x1c>
 80005d4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <__aeabi_cdrcmple>:
 80005dc:	4684      	mov	ip, r0
 80005de:	4610      	mov	r0, r2
 80005e0:	4662      	mov	r2, ip
 80005e2:	468c      	mov	ip, r1
 80005e4:	4619      	mov	r1, r3
 80005e6:	4663      	mov	r3, ip
 80005e8:	e000      	b.n	80005ec <__aeabi_cdcmpeq>
 80005ea:	bf00      	nop

080005ec <__aeabi_cdcmpeq>:
 80005ec:	b501      	push	{r0, lr}
 80005ee:	f7ff ffb7 	bl	8000560 <__cmpdf2>
 80005f2:	2800      	cmp	r0, #0
 80005f4:	bf48      	it	mi
 80005f6:	f110 0f00 	cmnmi.w	r0, #0
 80005fa:	bd01      	pop	{r0, pc}

080005fc <__aeabi_dcmpeq>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff fff4 	bl	80005ec <__aeabi_cdcmpeq>
 8000604:	bf0c      	ite	eq
 8000606:	2001      	moveq	r0, #1
 8000608:	2000      	movne	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_dcmplt>:
 8000610:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000614:	f7ff ffea 	bl	80005ec <__aeabi_cdcmpeq>
 8000618:	bf34      	ite	cc
 800061a:	2001      	movcc	r0, #1
 800061c:	2000      	movcs	r0, #0
 800061e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000622:	bf00      	nop

08000624 <__aeabi_dcmple>:
 8000624:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000628:	f7ff ffe0 	bl	80005ec <__aeabi_cdcmpeq>
 800062c:	bf94      	ite	ls
 800062e:	2001      	movls	r0, #1
 8000630:	2000      	movhi	r0, #0
 8000632:	f85d fb08 	ldr.w	pc, [sp], #8
 8000636:	bf00      	nop

08000638 <__aeabi_dcmpge>:
 8000638:	f84d ed08 	str.w	lr, [sp, #-8]!
 800063c:	f7ff ffce 	bl	80005dc <__aeabi_cdrcmple>
 8000640:	bf94      	ite	ls
 8000642:	2001      	movls	r0, #1
 8000644:	2000      	movhi	r0, #0
 8000646:	f85d fb08 	ldr.w	pc, [sp], #8
 800064a:	bf00      	nop

0800064c <__aeabi_dcmpgt>:
 800064c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000650:	f7ff ffc4 	bl	80005dc <__aeabi_cdrcmple>
 8000654:	bf34      	ite	cc
 8000656:	2001      	movcc	r0, #1
 8000658:	2000      	movcs	r0, #0
 800065a:	f85d fb08 	ldr.w	pc, [sp], #8
 800065e:	bf00      	nop

08000660 <__aeabi_uldivmod>:
 8000660:	b953      	cbnz	r3, 8000678 <__aeabi_uldivmod+0x18>
 8000662:	b94a      	cbnz	r2, 8000678 <__aeabi_uldivmod+0x18>
 8000664:	2900      	cmp	r1, #0
 8000666:	bf08      	it	eq
 8000668:	2800      	cmpeq	r0, #0
 800066a:	bf1c      	itt	ne
 800066c:	f04f 31ff 	movne.w	r1, #4294967295
 8000670:	f04f 30ff 	movne.w	r0, #4294967295
 8000674:	f000 b974 	b.w	8000960 <__aeabi_idiv0>
 8000678:	f1ad 0c08 	sub.w	ip, sp, #8
 800067c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000680:	f000 f806 	bl	8000690 <__udivmoddi4>
 8000684:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000688:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800068c:	b004      	add	sp, #16
 800068e:	4770      	bx	lr

08000690 <__udivmoddi4>:
 8000690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000694:	9d08      	ldr	r5, [sp, #32]
 8000696:	4604      	mov	r4, r0
 8000698:	468e      	mov	lr, r1
 800069a:	2b00      	cmp	r3, #0
 800069c:	d14d      	bne.n	800073a <__udivmoddi4+0xaa>
 800069e:	428a      	cmp	r2, r1
 80006a0:	4694      	mov	ip, r2
 80006a2:	d969      	bls.n	8000778 <__udivmoddi4+0xe8>
 80006a4:	fab2 f282 	clz	r2, r2
 80006a8:	b152      	cbz	r2, 80006c0 <__udivmoddi4+0x30>
 80006aa:	fa01 f302 	lsl.w	r3, r1, r2
 80006ae:	f1c2 0120 	rsb	r1, r2, #32
 80006b2:	fa20 f101 	lsr.w	r1, r0, r1
 80006b6:	fa0c fc02 	lsl.w	ip, ip, r2
 80006ba:	ea41 0e03 	orr.w	lr, r1, r3
 80006be:	4094      	lsls	r4, r2
 80006c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006c4:	0c21      	lsrs	r1, r4, #16
 80006c6:	fbbe f6f8 	udiv	r6, lr, r8
 80006ca:	fa1f f78c 	uxth.w	r7, ip
 80006ce:	fb08 e316 	mls	r3, r8, r6, lr
 80006d2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80006d6:	fb06 f107 	mul.w	r1, r6, r7
 80006da:	4299      	cmp	r1, r3
 80006dc:	d90a      	bls.n	80006f4 <__udivmoddi4+0x64>
 80006de:	eb1c 0303 	adds.w	r3, ip, r3
 80006e2:	f106 30ff 	add.w	r0, r6, #4294967295
 80006e6:	f080 811f 	bcs.w	8000928 <__udivmoddi4+0x298>
 80006ea:	4299      	cmp	r1, r3
 80006ec:	f240 811c 	bls.w	8000928 <__udivmoddi4+0x298>
 80006f0:	3e02      	subs	r6, #2
 80006f2:	4463      	add	r3, ip
 80006f4:	1a5b      	subs	r3, r3, r1
 80006f6:	b2a4      	uxth	r4, r4
 80006f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80006fc:	fb08 3310 	mls	r3, r8, r0, r3
 8000700:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000704:	fb00 f707 	mul.w	r7, r0, r7
 8000708:	42a7      	cmp	r7, r4
 800070a:	d90a      	bls.n	8000722 <__udivmoddi4+0x92>
 800070c:	eb1c 0404 	adds.w	r4, ip, r4
 8000710:	f100 33ff 	add.w	r3, r0, #4294967295
 8000714:	f080 810a 	bcs.w	800092c <__udivmoddi4+0x29c>
 8000718:	42a7      	cmp	r7, r4
 800071a:	f240 8107 	bls.w	800092c <__udivmoddi4+0x29c>
 800071e:	4464      	add	r4, ip
 8000720:	3802      	subs	r0, #2
 8000722:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000726:	1be4      	subs	r4, r4, r7
 8000728:	2600      	movs	r6, #0
 800072a:	b11d      	cbz	r5, 8000734 <__udivmoddi4+0xa4>
 800072c:	40d4      	lsrs	r4, r2
 800072e:	2300      	movs	r3, #0
 8000730:	e9c5 4300 	strd	r4, r3, [r5]
 8000734:	4631      	mov	r1, r6
 8000736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800073a:	428b      	cmp	r3, r1
 800073c:	d909      	bls.n	8000752 <__udivmoddi4+0xc2>
 800073e:	2d00      	cmp	r5, #0
 8000740:	f000 80ef 	beq.w	8000922 <__udivmoddi4+0x292>
 8000744:	2600      	movs	r6, #0
 8000746:	e9c5 0100 	strd	r0, r1, [r5]
 800074a:	4630      	mov	r0, r6
 800074c:	4631      	mov	r1, r6
 800074e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000752:	fab3 f683 	clz	r6, r3
 8000756:	2e00      	cmp	r6, #0
 8000758:	d14a      	bne.n	80007f0 <__udivmoddi4+0x160>
 800075a:	428b      	cmp	r3, r1
 800075c:	d302      	bcc.n	8000764 <__udivmoddi4+0xd4>
 800075e:	4282      	cmp	r2, r0
 8000760:	f200 80f9 	bhi.w	8000956 <__udivmoddi4+0x2c6>
 8000764:	1a84      	subs	r4, r0, r2
 8000766:	eb61 0303 	sbc.w	r3, r1, r3
 800076a:	2001      	movs	r0, #1
 800076c:	469e      	mov	lr, r3
 800076e:	2d00      	cmp	r5, #0
 8000770:	d0e0      	beq.n	8000734 <__udivmoddi4+0xa4>
 8000772:	e9c5 4e00 	strd	r4, lr, [r5]
 8000776:	e7dd      	b.n	8000734 <__udivmoddi4+0xa4>
 8000778:	b902      	cbnz	r2, 800077c <__udivmoddi4+0xec>
 800077a:	deff      	udf	#255	; 0xff
 800077c:	fab2 f282 	clz	r2, r2
 8000780:	2a00      	cmp	r2, #0
 8000782:	f040 8092 	bne.w	80008aa <__udivmoddi4+0x21a>
 8000786:	eba1 010c 	sub.w	r1, r1, ip
 800078a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800078e:	fa1f fe8c 	uxth.w	lr, ip
 8000792:	2601      	movs	r6, #1
 8000794:	0c20      	lsrs	r0, r4, #16
 8000796:	fbb1 f3f7 	udiv	r3, r1, r7
 800079a:	fb07 1113 	mls	r1, r7, r3, r1
 800079e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007a2:	fb0e f003 	mul.w	r0, lr, r3
 80007a6:	4288      	cmp	r0, r1
 80007a8:	d908      	bls.n	80007bc <__udivmoddi4+0x12c>
 80007aa:	eb1c 0101 	adds.w	r1, ip, r1
 80007ae:	f103 38ff 	add.w	r8, r3, #4294967295
 80007b2:	d202      	bcs.n	80007ba <__udivmoddi4+0x12a>
 80007b4:	4288      	cmp	r0, r1
 80007b6:	f200 80cb 	bhi.w	8000950 <__udivmoddi4+0x2c0>
 80007ba:	4643      	mov	r3, r8
 80007bc:	1a09      	subs	r1, r1, r0
 80007be:	b2a4      	uxth	r4, r4
 80007c0:	fbb1 f0f7 	udiv	r0, r1, r7
 80007c4:	fb07 1110 	mls	r1, r7, r0, r1
 80007c8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80007cc:	fb0e fe00 	mul.w	lr, lr, r0
 80007d0:	45a6      	cmp	lr, r4
 80007d2:	d908      	bls.n	80007e6 <__udivmoddi4+0x156>
 80007d4:	eb1c 0404 	adds.w	r4, ip, r4
 80007d8:	f100 31ff 	add.w	r1, r0, #4294967295
 80007dc:	d202      	bcs.n	80007e4 <__udivmoddi4+0x154>
 80007de:	45a6      	cmp	lr, r4
 80007e0:	f200 80bb 	bhi.w	800095a <__udivmoddi4+0x2ca>
 80007e4:	4608      	mov	r0, r1
 80007e6:	eba4 040e 	sub.w	r4, r4, lr
 80007ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80007ee:	e79c      	b.n	800072a <__udivmoddi4+0x9a>
 80007f0:	f1c6 0720 	rsb	r7, r6, #32
 80007f4:	40b3      	lsls	r3, r6
 80007f6:	fa22 fc07 	lsr.w	ip, r2, r7
 80007fa:	ea4c 0c03 	orr.w	ip, ip, r3
 80007fe:	fa20 f407 	lsr.w	r4, r0, r7
 8000802:	fa01 f306 	lsl.w	r3, r1, r6
 8000806:	431c      	orrs	r4, r3
 8000808:	40f9      	lsrs	r1, r7
 800080a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800080e:	fa00 f306 	lsl.w	r3, r0, r6
 8000812:	fbb1 f8f9 	udiv	r8, r1, r9
 8000816:	0c20      	lsrs	r0, r4, #16
 8000818:	fa1f fe8c 	uxth.w	lr, ip
 800081c:	fb09 1118 	mls	r1, r9, r8, r1
 8000820:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000824:	fb08 f00e 	mul.w	r0, r8, lr
 8000828:	4288      	cmp	r0, r1
 800082a:	fa02 f206 	lsl.w	r2, r2, r6
 800082e:	d90b      	bls.n	8000848 <__udivmoddi4+0x1b8>
 8000830:	eb1c 0101 	adds.w	r1, ip, r1
 8000834:	f108 3aff 	add.w	sl, r8, #4294967295
 8000838:	f080 8088 	bcs.w	800094c <__udivmoddi4+0x2bc>
 800083c:	4288      	cmp	r0, r1
 800083e:	f240 8085 	bls.w	800094c <__udivmoddi4+0x2bc>
 8000842:	f1a8 0802 	sub.w	r8, r8, #2
 8000846:	4461      	add	r1, ip
 8000848:	1a09      	subs	r1, r1, r0
 800084a:	b2a4      	uxth	r4, r4
 800084c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000850:	fb09 1110 	mls	r1, r9, r0, r1
 8000854:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000858:	fb00 fe0e 	mul.w	lr, r0, lr
 800085c:	458e      	cmp	lr, r1
 800085e:	d908      	bls.n	8000872 <__udivmoddi4+0x1e2>
 8000860:	eb1c 0101 	adds.w	r1, ip, r1
 8000864:	f100 34ff 	add.w	r4, r0, #4294967295
 8000868:	d26c      	bcs.n	8000944 <__udivmoddi4+0x2b4>
 800086a:	458e      	cmp	lr, r1
 800086c:	d96a      	bls.n	8000944 <__udivmoddi4+0x2b4>
 800086e:	3802      	subs	r0, #2
 8000870:	4461      	add	r1, ip
 8000872:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000876:	fba0 9402 	umull	r9, r4, r0, r2
 800087a:	eba1 010e 	sub.w	r1, r1, lr
 800087e:	42a1      	cmp	r1, r4
 8000880:	46c8      	mov	r8, r9
 8000882:	46a6      	mov	lr, r4
 8000884:	d356      	bcc.n	8000934 <__udivmoddi4+0x2a4>
 8000886:	d053      	beq.n	8000930 <__udivmoddi4+0x2a0>
 8000888:	b15d      	cbz	r5, 80008a2 <__udivmoddi4+0x212>
 800088a:	ebb3 0208 	subs.w	r2, r3, r8
 800088e:	eb61 010e 	sbc.w	r1, r1, lr
 8000892:	fa01 f707 	lsl.w	r7, r1, r7
 8000896:	fa22 f306 	lsr.w	r3, r2, r6
 800089a:	40f1      	lsrs	r1, r6
 800089c:	431f      	orrs	r7, r3
 800089e:	e9c5 7100 	strd	r7, r1, [r5]
 80008a2:	2600      	movs	r6, #0
 80008a4:	4631      	mov	r1, r6
 80008a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008aa:	f1c2 0320 	rsb	r3, r2, #32
 80008ae:	40d8      	lsrs	r0, r3
 80008b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80008b4:	fa21 f303 	lsr.w	r3, r1, r3
 80008b8:	4091      	lsls	r1, r2
 80008ba:	4301      	orrs	r1, r0
 80008bc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008c0:	fa1f fe8c 	uxth.w	lr, ip
 80008c4:	fbb3 f0f7 	udiv	r0, r3, r7
 80008c8:	fb07 3610 	mls	r6, r7, r0, r3
 80008cc:	0c0b      	lsrs	r3, r1, #16
 80008ce:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80008d2:	fb00 f60e 	mul.w	r6, r0, lr
 80008d6:	429e      	cmp	r6, r3
 80008d8:	fa04 f402 	lsl.w	r4, r4, r2
 80008dc:	d908      	bls.n	80008f0 <__udivmoddi4+0x260>
 80008de:	eb1c 0303 	adds.w	r3, ip, r3
 80008e2:	f100 38ff 	add.w	r8, r0, #4294967295
 80008e6:	d22f      	bcs.n	8000948 <__udivmoddi4+0x2b8>
 80008e8:	429e      	cmp	r6, r3
 80008ea:	d92d      	bls.n	8000948 <__udivmoddi4+0x2b8>
 80008ec:	3802      	subs	r0, #2
 80008ee:	4463      	add	r3, ip
 80008f0:	1b9b      	subs	r3, r3, r6
 80008f2:	b289      	uxth	r1, r1
 80008f4:	fbb3 f6f7 	udiv	r6, r3, r7
 80008f8:	fb07 3316 	mls	r3, r7, r6, r3
 80008fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000900:	fb06 f30e 	mul.w	r3, r6, lr
 8000904:	428b      	cmp	r3, r1
 8000906:	d908      	bls.n	800091a <__udivmoddi4+0x28a>
 8000908:	eb1c 0101 	adds.w	r1, ip, r1
 800090c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000910:	d216      	bcs.n	8000940 <__udivmoddi4+0x2b0>
 8000912:	428b      	cmp	r3, r1
 8000914:	d914      	bls.n	8000940 <__udivmoddi4+0x2b0>
 8000916:	3e02      	subs	r6, #2
 8000918:	4461      	add	r1, ip
 800091a:	1ac9      	subs	r1, r1, r3
 800091c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000920:	e738      	b.n	8000794 <__udivmoddi4+0x104>
 8000922:	462e      	mov	r6, r5
 8000924:	4628      	mov	r0, r5
 8000926:	e705      	b.n	8000734 <__udivmoddi4+0xa4>
 8000928:	4606      	mov	r6, r0
 800092a:	e6e3      	b.n	80006f4 <__udivmoddi4+0x64>
 800092c:	4618      	mov	r0, r3
 800092e:	e6f8      	b.n	8000722 <__udivmoddi4+0x92>
 8000930:	454b      	cmp	r3, r9
 8000932:	d2a9      	bcs.n	8000888 <__udivmoddi4+0x1f8>
 8000934:	ebb9 0802 	subs.w	r8, r9, r2
 8000938:	eb64 0e0c 	sbc.w	lr, r4, ip
 800093c:	3801      	subs	r0, #1
 800093e:	e7a3      	b.n	8000888 <__udivmoddi4+0x1f8>
 8000940:	4646      	mov	r6, r8
 8000942:	e7ea      	b.n	800091a <__udivmoddi4+0x28a>
 8000944:	4620      	mov	r0, r4
 8000946:	e794      	b.n	8000872 <__udivmoddi4+0x1e2>
 8000948:	4640      	mov	r0, r8
 800094a:	e7d1      	b.n	80008f0 <__udivmoddi4+0x260>
 800094c:	46d0      	mov	r8, sl
 800094e:	e77b      	b.n	8000848 <__udivmoddi4+0x1b8>
 8000950:	3b02      	subs	r3, #2
 8000952:	4461      	add	r1, ip
 8000954:	e732      	b.n	80007bc <__udivmoddi4+0x12c>
 8000956:	4630      	mov	r0, r6
 8000958:	e709      	b.n	800076e <__udivmoddi4+0xde>
 800095a:	4464      	add	r4, ip
 800095c:	3802      	subs	r0, #2
 800095e:	e742      	b.n	80007e6 <__udivmoddi4+0x156>

08000960 <__aeabi_idiv0>:
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop

08000964 <HAL_UART_RxCpltCallback>:
void calcPID(uint16_t pwmBase1,uint16_t pwmBase2);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]

	indRX_W++;
 800096c:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <HAL_UART_RxCpltCallback+0x34>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	b2db      	uxtb	r3, r3
 8000972:	3301      	adds	r3, #1
 8000974:	b2da      	uxtb	r2, r3
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <HAL_UART_RxCpltCallback+0x34>)
 8000978:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, (uint8_t *) &buf_rx[indRX_W], 1);
 800097a:	4b07      	ldr	r3, [pc, #28]	; (8000998 <HAL_UART_RxCpltCallback+0x34>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	b2db      	uxtb	r3, r3
 8000980:	461a      	mov	r2, r3
 8000982:	4b06      	ldr	r3, [pc, #24]	; (800099c <HAL_UART_RxCpltCallback+0x38>)
 8000984:	4413      	add	r3, r2
 8000986:	2201      	movs	r2, #1
 8000988:	4619      	mov	r1, r3
 800098a:	4805      	ldr	r0, [pc, #20]	; (80009a0 <HAL_UART_RxCpltCallback+0x3c>)
 800098c:	f005 fda9 	bl	80064e2 <HAL_UART_Receive_IT>
}
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	200005bd 	.word	0x200005bd
 800099c:	200001ec 	.word	0x200001ec
 80009a0:	20000164 	.word	0x20000164

080009a4 <HAL_TIM_PeriodElapsedCallback>:
		indADC=0;
	}

}*/

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM4){//ENTRA CADA 10 MS
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a26      	ldr	r2, [pc, #152]	; (8000a4c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d145      	bne.n	8000a42 <HAL_TIM_PeriodElapsedCallback+0x9e>
			HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&ADCData[indADC], 7);
 80009b6:	4b26      	ldr	r3, [pc, #152]	; (8000a50 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	461a      	mov	r2, r3
 80009be:	4613      	mov	r3, r2
 80009c0:	00db      	lsls	r3, r3, #3
 80009c2:	1a9b      	subs	r3, r3, r2
 80009c4:	005b      	lsls	r3, r3, #1
 80009c6:	4a23      	ldr	r2, [pc, #140]	; (8000a54 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80009c8:	4413      	add	r3, r2
 80009ca:	2207      	movs	r2, #7
 80009cc:	4619      	mov	r1, r3
 80009ce:	4822      	ldr	r0, [pc, #136]	; (8000a58 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80009d0:	f002 fdf6 	bl	80035c0 <HAL_ADC_Start_DMA>

			indADC++;
 80009d4:	4b1e      	ldr	r3, [pc, #120]	; (8000a50 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	3301      	adds	r3, #1
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	4b1c      	ldr	r3, [pc, #112]	; (8000a50 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80009e0:	701a      	strb	r2, [r3, #0]
			if(indADC==32){
 80009e2:	4b1b      	ldr	r3, [pc, #108]	; (8000a50 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	2b20      	cmp	r3, #32
 80009ea:	d102      	bne.n	80009f2 <HAL_TIM_PeriodElapsedCallback+0x4e>
					indADC=0;
 80009ec:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]
				}

			time100ms--;
 80009f2:	4b1a      	ldr	r3, [pc, #104]	; (8000a5c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	3b01      	subs	r3, #1
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	4b17      	ldr	r3, [pc, #92]	; (8000a5c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80009fe:	701a      	strb	r2, [r3, #0]
			if(!time100ms){
 8000a00:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d107      	bne.n	8000a1a <HAL_TIM_PeriodElapsedCallback+0x76>
				time100ms=10;
 8000a0a:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000a0c:	220a      	movs	r2, #10
 8000a0e:	701a      	strb	r2, [r3, #0]
				ON100MS = 1;
 8000a10:	4a13      	ldr	r2, [pc, #76]	; (8000a60 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000a12:	7813      	ldrb	r3, [r2, #0]
 8000a14:	f043 0302 	orr.w	r3, r3, #2
 8000a18:	7013      	strb	r3, [r2, #0]
			}
			time10ms--;
 8000a1a:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	3b01      	subs	r3, #1
 8000a22:	b2da      	uxtb	r2, r3
 8000a24:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000a26:	701a      	strb	r2, [r3, #0]
			if(!time10ms){
 8000a28:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d107      	bne.n	8000a42 <HAL_TIM_PeriodElapsedCallback+0x9e>
				time10ms=1;
 8000a32:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000a34:	2201      	movs	r2, #1
 8000a36:	701a      	strb	r2, [r3, #0]
				ON10MS = 1;
 8000a38:	4a09      	ldr	r2, [pc, #36]	; (8000a60 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000a3a:	7813      	ldrb	r3, [r2, #0]
 8000a3c:	f043 0304 	orr.w	r3, r3, #4
 8000a40:	7013      	strb	r3, [r2, #0]
			}
		}
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40000800 	.word	0x40000800
 8000a50:	200005c1 	.word	0x200005c1
 8000a54:	200003ec 	.word	0x200003ec
 8000a58:	2000002c 	.word	0x2000002c
 8000a5c:	200005bb 	.word	0x200005bb
 8000a60:	200005f4 	.word	0x200005f4
 8000a64:	200005bc 	.word	0x200005bc

08000a68 <uart>:

void uart(){
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0

	if((huart1.Instance->SR & UART_FLAG_TXE)==UART_FLAG_TXE){
 8000a6c:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <uart+0x40>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a76:	2b80      	cmp	r3, #128	; 0x80
 8000a78:	d110      	bne.n	8000a9c <uart+0x34>
		huart1.Instance->DR=buf_tx[indTX_R];
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <uart+0x44>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	461a      	mov	r2, r3
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <uart+0x48>)
 8000a84:	5c9b      	ldrb	r3, [r3, r2]
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	4b07      	ldr	r3, [pc, #28]	; (8000aa8 <uart+0x40>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
		indTX_R++;
 8000a8e:	4b07      	ldr	r3, [pc, #28]	; (8000aac <uart+0x44>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	3301      	adds	r3, #1
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	4b04      	ldr	r3, [pc, #16]	; (8000aac <uart+0x44>)
 8000a9a:	701a      	strb	r2, [r3, #0]
	}

}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	20000164 	.word	0x20000164
 8000aac:	200005c0 	.word	0x200005c0
 8000ab0:	200002ec 	.word	0x200002ec

08000ab4 <initEsp>:

void initEsp(){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0

	if(readyToSend){
 8000ab8:	4b73      	ldr	r3, [pc, #460]	; (8000c88 <initEsp+0x1d4>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	f000 80dc 	beq.w	8000c80 <initEsp+0x1cc>
		switch(AT){
 8000ac8:	4b70      	ldr	r3, [pc, #448]	; (8000c8c <initEsp+0x1d8>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	2b07      	cmp	r3, #7
 8000ace:	f200 80d8 	bhi.w	8000c82 <initEsp+0x1ce>
 8000ad2:	a201      	add	r2, pc, #4	; (adr r2, 8000ad8 <initEsp+0x24>)
 8000ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ad8:	08000af9 	.word	0x08000af9
 8000adc:	08000b2f 	.word	0x08000b2f
 8000ae0:	08000b65 	.word	0x08000b65
 8000ae4:	08000b9b 	.word	0x08000b9b
 8000ae8:	08000bd1 	.word	0x08000bd1
 8000aec:	08000c07 	.word	0x08000c07
 8000af0:	08000c3d 	.word	0x08000c3d
 8000af4:	08000c73 	.word	0x08000c73
			case 0:
				memcpy((uint8_t*)&buf_tx[indTX_W],AT_com,4);
 8000af8:	4b65      	ldr	r3, [pc, #404]	; (8000c90 <initEsp+0x1dc>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	461a      	mov	r2, r3
 8000b00:	4b64      	ldr	r3, [pc, #400]	; (8000c94 <initEsp+0x1e0>)
 8000b02:	4413      	add	r3, r2
 8000b04:	2204      	movs	r2, #4
 8000b06:	4964      	ldr	r1, [pc, #400]	; (8000c98 <initEsp+0x1e4>)
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f006 fc39 	bl	8007380 <memcpy>
				indTX_W+=4;
 8000b0e:	4b60      	ldr	r3, [pc, #384]	; (8000c90 <initEsp+0x1dc>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	3304      	adds	r3, #4
 8000b16:	b2da      	uxtb	r2, r3
 8000b18:	4b5d      	ldr	r3, [pc, #372]	; (8000c90 <initEsp+0x1dc>)
 8000b1a:	701a      	strb	r2, [r3, #0]
				timeout2 = 10;
 8000b1c:	4b5f      	ldr	r3, [pc, #380]	; (8000c9c <initEsp+0x1e8>)
 8000b1e:	220a      	movs	r2, #10
 8000b20:	701a      	strb	r2, [r3, #0]
				readyToSend = 0;
 8000b22:	4a59      	ldr	r2, [pc, #356]	; (8000c88 <initEsp+0x1d4>)
 8000b24:	7813      	ldrb	r3, [r2, #0]
 8000b26:	f36f 1304 	bfc	r3, #4, #1
 8000b2a:	7013      	strb	r3, [r2, #0]
			break;
 8000b2c:	e0a9      	b.n	8000c82 <initEsp+0x1ce>
			case 1:
				memcpy((uint8_t*)&buf_tx[indTX_W],CWQAP,10);
 8000b2e:	4b58      	ldr	r3, [pc, #352]	; (8000c90 <initEsp+0x1dc>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	461a      	mov	r2, r3
 8000b36:	4b57      	ldr	r3, [pc, #348]	; (8000c94 <initEsp+0x1e0>)
 8000b38:	4413      	add	r3, r2
 8000b3a:	220a      	movs	r2, #10
 8000b3c:	4958      	ldr	r1, [pc, #352]	; (8000ca0 <initEsp+0x1ec>)
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f006 fc1e 	bl	8007380 <memcpy>
				indTX_W+=10;
 8000b44:	4b52      	ldr	r3, [pc, #328]	; (8000c90 <initEsp+0x1dc>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	330a      	adds	r3, #10
 8000b4c:	b2da      	uxtb	r2, r3
 8000b4e:	4b50      	ldr	r3, [pc, #320]	; (8000c90 <initEsp+0x1dc>)
 8000b50:	701a      	strb	r2, [r3, #0]
				timeout2 = 10;
 8000b52:	4b52      	ldr	r3, [pc, #328]	; (8000c9c <initEsp+0x1e8>)
 8000b54:	220a      	movs	r2, #10
 8000b56:	701a      	strb	r2, [r3, #0]
				readyToSend = 0;
 8000b58:	4a4b      	ldr	r2, [pc, #300]	; (8000c88 <initEsp+0x1d4>)
 8000b5a:	7813      	ldrb	r3, [r2, #0]
 8000b5c:	f36f 1304 	bfc	r3, #4, #1
 8000b60:	7013      	strb	r3, [r2, #0]
			break;
 8000b62:	e08e      	b.n	8000c82 <initEsp+0x1ce>
			case 2:
				memcpy((uint8_t*)&buf_tx[indTX_W],CWMODE,13);
 8000b64:	4b4a      	ldr	r3, [pc, #296]	; (8000c90 <initEsp+0x1dc>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	4b49      	ldr	r3, [pc, #292]	; (8000c94 <initEsp+0x1e0>)
 8000b6e:	4413      	add	r3, r2
 8000b70:	220d      	movs	r2, #13
 8000b72:	494c      	ldr	r1, [pc, #304]	; (8000ca4 <initEsp+0x1f0>)
 8000b74:	4618      	mov	r0, r3
 8000b76:	f006 fc03 	bl	8007380 <memcpy>
				indTX_W+=13;
 8000b7a:	4b45      	ldr	r3, [pc, #276]	; (8000c90 <initEsp+0x1dc>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	330d      	adds	r3, #13
 8000b82:	b2da      	uxtb	r2, r3
 8000b84:	4b42      	ldr	r3, [pc, #264]	; (8000c90 <initEsp+0x1dc>)
 8000b86:	701a      	strb	r2, [r3, #0]
				timeout2 = 10;
 8000b88:	4b44      	ldr	r3, [pc, #272]	; (8000c9c <initEsp+0x1e8>)
 8000b8a:	220a      	movs	r2, #10
 8000b8c:	701a      	strb	r2, [r3, #0]
				readyToSend = 0;
 8000b8e:	4a3e      	ldr	r2, [pc, #248]	; (8000c88 <initEsp+0x1d4>)
 8000b90:	7813      	ldrb	r3, [r2, #0]
 8000b92:	f36f 1304 	bfc	r3, #4, #1
 8000b96:	7013      	strb	r3, [r2, #0]
			break;
 8000b98:	e073      	b.n	8000c82 <initEsp+0x1ce>
			case 3:
				memcpy((uint8_t*)&buf_tx[indTX_W],CWJAP_casa,36);
 8000b9a:	4b3d      	ldr	r3, [pc, #244]	; (8000c90 <initEsp+0x1dc>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b3c      	ldr	r3, [pc, #240]	; (8000c94 <initEsp+0x1e0>)
 8000ba4:	4413      	add	r3, r2
 8000ba6:	2224      	movs	r2, #36	; 0x24
 8000ba8:	493f      	ldr	r1, [pc, #252]	; (8000ca8 <initEsp+0x1f4>)
 8000baa:	4618      	mov	r0, r3
 8000bac:	f006 fbe8 	bl	8007380 <memcpy>
				//memcpy((uint8_t*)&buf_tx[indTX_W],CWJAP_dpto,49);
				indTX_W+=36;
 8000bb0:	4b37      	ldr	r3, [pc, #220]	; (8000c90 <initEsp+0x1dc>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	3324      	adds	r3, #36	; 0x24
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	4b35      	ldr	r3, [pc, #212]	; (8000c90 <initEsp+0x1dc>)
 8000bbc:	701a      	strb	r2, [r3, #0]
				timeout2 = 50;
 8000bbe:	4b37      	ldr	r3, [pc, #220]	; (8000c9c <initEsp+0x1e8>)
 8000bc0:	2232      	movs	r2, #50	; 0x32
 8000bc2:	701a      	strb	r2, [r3, #0]
				readyToSend = 0;
 8000bc4:	4a30      	ldr	r2, [pc, #192]	; (8000c88 <initEsp+0x1d4>)
 8000bc6:	7813      	ldrb	r3, [r2, #0]
 8000bc8:	f36f 1304 	bfc	r3, #4, #1
 8000bcc:	7013      	strb	r3, [r2, #0]
			break;
 8000bce:	e058      	b.n	8000c82 <initEsp+0x1ce>
			case 4:
				memcpy((uint8_t*)&buf_tx[indTX_W],CIPMUX,13);
 8000bd0:	4b2f      	ldr	r3, [pc, #188]	; (8000c90 <initEsp+0x1dc>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	4b2e      	ldr	r3, [pc, #184]	; (8000c94 <initEsp+0x1e0>)
 8000bda:	4413      	add	r3, r2
 8000bdc:	220d      	movs	r2, #13
 8000bde:	4933      	ldr	r1, [pc, #204]	; (8000cac <initEsp+0x1f8>)
 8000be0:	4618      	mov	r0, r3
 8000be2:	f006 fbcd 	bl	8007380 <memcpy>
				indTX_W+=13;
 8000be6:	4b2a      	ldr	r3, [pc, #168]	; (8000c90 <initEsp+0x1dc>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	330d      	adds	r3, #13
 8000bee:	b2da      	uxtb	r2, r3
 8000bf0:	4b27      	ldr	r3, [pc, #156]	; (8000c90 <initEsp+0x1dc>)
 8000bf2:	701a      	strb	r2, [r3, #0]
				timeout2 = 10;
 8000bf4:	4b29      	ldr	r3, [pc, #164]	; (8000c9c <initEsp+0x1e8>)
 8000bf6:	220a      	movs	r2, #10
 8000bf8:	701a      	strb	r2, [r3, #0]
				readyToSend = 0;
 8000bfa:	4a23      	ldr	r2, [pc, #140]	; (8000c88 <initEsp+0x1d4>)
 8000bfc:	7813      	ldrb	r3, [r2, #0]
 8000bfe:	f36f 1304 	bfc	r3, #4, #1
 8000c02:	7013      	strb	r3, [r2, #0]
			break;
 8000c04:	e03d      	b.n	8000c82 <initEsp+0x1ce>
			case 5:
				memcpy((uint8_t*)&buf_tx[indTX_W],CIFSR,10);
 8000c06:	4b22      	ldr	r3, [pc, #136]	; (8000c90 <initEsp+0x1dc>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4b21      	ldr	r3, [pc, #132]	; (8000c94 <initEsp+0x1e0>)
 8000c10:	4413      	add	r3, r2
 8000c12:	220a      	movs	r2, #10
 8000c14:	4926      	ldr	r1, [pc, #152]	; (8000cb0 <initEsp+0x1fc>)
 8000c16:	4618      	mov	r0, r3
 8000c18:	f006 fbb2 	bl	8007380 <memcpy>
				indTX_W+=10;
 8000c1c:	4b1c      	ldr	r3, [pc, #112]	; (8000c90 <initEsp+0x1dc>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	330a      	adds	r3, #10
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	4b1a      	ldr	r3, [pc, #104]	; (8000c90 <initEsp+0x1dc>)
 8000c28:	701a      	strb	r2, [r3, #0]
				timeout2 = 10;
 8000c2a:	4b1c      	ldr	r3, [pc, #112]	; (8000c9c <initEsp+0x1e8>)
 8000c2c:	220a      	movs	r2, #10
 8000c2e:	701a      	strb	r2, [r3, #0]
				readyToSend = 0;
 8000c30:	4a15      	ldr	r2, [pc, #84]	; (8000c88 <initEsp+0x1d4>)
 8000c32:	7813      	ldrb	r3, [r2, #0]
 8000c34:	f36f 1304 	bfc	r3, #4, #1
 8000c38:	7013      	strb	r3, [r2, #0]
			break;
 8000c3a:	e022      	b.n	8000c82 <initEsp+0x1ce>
			case 6:
				memcpy((uint8_t*)&buf_tx[indTX_W],CIPSTART,48);
 8000c3c:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <initEsp+0x1dc>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	461a      	mov	r2, r3
 8000c44:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <initEsp+0x1e0>)
 8000c46:	4413      	add	r3, r2
 8000c48:	2230      	movs	r2, #48	; 0x30
 8000c4a:	491a      	ldr	r1, [pc, #104]	; (8000cb4 <initEsp+0x200>)
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f006 fb97 	bl	8007380 <memcpy>
				//memcpy((uint8_t*)&buf_tx[indTX_W],CIPSTART_dpto,47);
				indTX_W+=48;
 8000c52:	4b0f      	ldr	r3, [pc, #60]	; (8000c90 <initEsp+0x1dc>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	3330      	adds	r3, #48	; 0x30
 8000c5a:	b2da      	uxtb	r2, r3
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <initEsp+0x1dc>)
 8000c5e:	701a      	strb	r2, [r3, #0]
				timeout2 = 20;
 8000c60:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <initEsp+0x1e8>)
 8000c62:	2214      	movs	r2, #20
 8000c64:	701a      	strb	r2, [r3, #0]
				readyToSend = 0;
 8000c66:	4a08      	ldr	r2, [pc, #32]	; (8000c88 <initEsp+0x1d4>)
 8000c68:	7813      	ldrb	r3, [r2, #0]
 8000c6a:	f36f 1304 	bfc	r3, #4, #1
 8000c6e:	7013      	strb	r3, [r2, #0]
			break;
 8000c70:	e007      	b.n	8000c82 <initEsp+0x1ce>
			case 7:
				duty++;
 8000c72:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <initEsp+0x204>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	3301      	adds	r3, #1
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <initEsp+0x204>)
 8000c7c:	701a      	strb	r2, [r3, #0]
			break;
 8000c7e:	e000      	b.n	8000c82 <initEsp+0x1ce>
		}

	}
 8000c80:	bf00      	nop

}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	200005f4 	.word	0x200005f4
 8000c8c:	200005c5 	.word	0x200005c5
 8000c90:	200005bf 	.word	0x200005bf
 8000c94:	200002ec 	.word	0x200002ec
 8000c98:	080073cc 	.word	0x080073cc
 8000c9c:	200005ca 	.word	0x200005ca
 8000ca0:	080073e0 	.word	0x080073e0
 8000ca4:	08007400 	.word	0x08007400
 8000ca8:	08007424 	.word	0x08007424
 8000cac:	080074b0 	.word	0x080074b0
 8000cb0:	08007494 	.word	0x08007494
 8000cb4:	080074d4 	.word	0x080074d4
 8000cb8:	200005c4 	.word	0x200005c4

08000cbc <recibirmensaje>:

void recibirmensaje(){
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0

	switch(AT){
 8000cc0:	4ba2      	ldr	r3, [pc, #648]	; (8000f4c <recibirmensaje+0x290>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b08      	cmp	r3, #8
 8000cc6:	f200 861d 	bhi.w	8001904 <recibirmensaje+0xc48>
 8000cca:	a201      	add	r2, pc, #4	; (adr r2, 8000cd0 <recibirmensaje+0x14>)
 8000ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cd0:	08000cf5 	.word	0x08000cf5
 8000cd4:	08000d6f 	.word	0x08000d6f
 8000cd8:	08000de3 	.word	0x08000de3
 8000cdc:	08000e5d 	.word	0x08000e5d
 8000ce0:	08000eb1 	.word	0x08000eb1
 8000ce4:	08000f2b 	.word	0x08000f2b
 8000ce8:	080010ef 	.word	0x080010ef
 8000cec:	08001181 	.word	0x08001181
 8000cf0:	0800167b 	.word	0x0800167b
		case 0:
			if(buf_rx[indRX_R]==AT_ans[coincidencias]){
 8000cf4:	4b96      	ldr	r3, [pc, #600]	; (8000f50 <recibirmensaje+0x294>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	4b95      	ldr	r3, [pc, #596]	; (8000f54 <recibirmensaje+0x298>)
 8000cfe:	5c9b      	ldrb	r3, [r3, r2]
 8000d00:	b2da      	uxtb	r2, r3
 8000d02:	4b95      	ldr	r3, [pc, #596]	; (8000f58 <recibirmensaje+0x29c>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	4619      	mov	r1, r3
 8000d08:	4b94      	ldr	r3, [pc, #592]	; (8000f5c <recibirmensaje+0x2a0>)
 8000d0a:	5c5b      	ldrb	r3, [r3, r1]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d11a      	bne.n	8000d46 <recibirmensaje+0x8a>
				coincidencias++;
 8000d10:	4b91      	ldr	r3, [pc, #580]	; (8000f58 <recibirmensaje+0x29c>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	3301      	adds	r3, #1
 8000d16:	b2da      	uxtb	r2, r3
 8000d18:	4b8f      	ldr	r3, [pc, #572]	; (8000f58 <recibirmensaje+0x29c>)
 8000d1a:	701a      	strb	r2, [r3, #0]

				if(coincidencias>6){
 8000d1c:	4b8e      	ldr	r3, [pc, #568]	; (8000f58 <recibirmensaje+0x29c>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2b06      	cmp	r3, #6
 8000d22:	f240 85f1 	bls.w	8001908 <recibirmensaje+0xc4c>
					//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
					coincidencias = 0;
 8000d26:	4b8c      	ldr	r3, [pc, #560]	; (8000f58 <recibirmensaje+0x29c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	701a      	strb	r2, [r3, #0]
					AT++;
 8000d2c:	4b87      	ldr	r3, [pc, #540]	; (8000f4c <recibirmensaje+0x290>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	3301      	adds	r3, #1
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	4b85      	ldr	r3, [pc, #532]	; (8000f4c <recibirmensaje+0x290>)
 8000d36:	701a      	strb	r2, [r3, #0]
					readyToSend = 1;
 8000d38:	4a89      	ldr	r2, [pc, #548]	; (8000f60 <recibirmensaje+0x2a4>)
 8000d3a:	7813      	ldrb	r3, [r2, #0]
 8000d3c:	f043 0310 	orr.w	r3, r3, #16
 8000d40:	7013      	strb	r3, [r2, #0]
					coincidencias = 0;
					readyToSend=1;
					break;
				}
			}
		break;
 8000d42:	f000 bde1 	b.w	8001908 <recibirmensaje+0xc4c>
				if(!timeout2){
 8000d46:	4b87      	ldr	r3, [pc, #540]	; (8000f64 <recibirmensaje+0x2a8>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	f040 85dc 	bne.w	8001908 <recibirmensaje+0xc4c>
					indRX_R=indRX_W;
 8000d50:	4b85      	ldr	r3, [pc, #532]	; (8000f68 <recibirmensaje+0x2ac>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	b2da      	uxtb	r2, r3
 8000d56:	4b7e      	ldr	r3, [pc, #504]	; (8000f50 <recibirmensaje+0x294>)
 8000d58:	701a      	strb	r2, [r3, #0]
					coincidencias = 0;
 8000d5a:	4b7f      	ldr	r3, [pc, #508]	; (8000f58 <recibirmensaje+0x29c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	701a      	strb	r2, [r3, #0]
					readyToSend=1;
 8000d60:	4a7f      	ldr	r2, [pc, #508]	; (8000f60 <recibirmensaje+0x2a4>)
 8000d62:	7813      	ldrb	r3, [r2, #0]
 8000d64:	f043 0310 	orr.w	r3, r3, #16
 8000d68:	7013      	strb	r3, [r2, #0]
					break;
 8000d6a:	f000 bddc 	b.w	8001926 <recibirmensaje+0xc6a>
		case 1:
			if(buf_rx[indRX_R]==ANS_CWQAP[coincidencias]){
 8000d6e:	4b78      	ldr	r3, [pc, #480]	; (8000f50 <recibirmensaje+0x294>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	461a      	mov	r2, r3
 8000d76:	4b77      	ldr	r3, [pc, #476]	; (8000f54 <recibirmensaje+0x298>)
 8000d78:	5c9b      	ldrb	r3, [r3, r2]
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	4b76      	ldr	r3, [pc, #472]	; (8000f58 <recibirmensaje+0x29c>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	4619      	mov	r1, r3
 8000d82:	4b7a      	ldr	r3, [pc, #488]	; (8000f6c <recibirmensaje+0x2b0>)
 8000d84:	5c5b      	ldrb	r3, [r3, r1]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d118      	bne.n	8000dbc <recibirmensaje+0x100>
				coincidencias++;
 8000d8a:	4b73      	ldr	r3, [pc, #460]	; (8000f58 <recibirmensaje+0x29c>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	b2da      	uxtb	r2, r3
 8000d92:	4b71      	ldr	r3, [pc, #452]	; (8000f58 <recibirmensaje+0x29c>)
 8000d94:	701a      	strb	r2, [r3, #0]

				if(coincidencias>14){
 8000d96:	4b70      	ldr	r3, [pc, #448]	; (8000f58 <recibirmensaje+0x29c>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	2b0e      	cmp	r3, #14
 8000d9c:	d921      	bls.n	8000de2 <recibirmensaje+0x126>
					//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
					coincidencias = 0;
 8000d9e:	4b6e      	ldr	r3, [pc, #440]	; (8000f58 <recibirmensaje+0x29c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	701a      	strb	r2, [r3, #0]
					AT++;
 8000da4:	4b69      	ldr	r3, [pc, #420]	; (8000f4c <recibirmensaje+0x290>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	3301      	adds	r3, #1
 8000daa:	b2da      	uxtb	r2, r3
 8000dac:	4b67      	ldr	r3, [pc, #412]	; (8000f4c <recibirmensaje+0x290>)
 8000dae:	701a      	strb	r2, [r3, #0]
					readyToSend = 1;
 8000db0:	4a6b      	ldr	r2, [pc, #428]	; (8000f60 <recibirmensaje+0x2a4>)
 8000db2:	7813      	ldrb	r3, [r2, #0]
 8000db4:	f043 0310 	orr.w	r3, r3, #16
 8000db8:	7013      	strb	r3, [r2, #0]
 8000dba:	e012      	b.n	8000de2 <recibirmensaje+0x126>
				}
			}else{
				if(!timeout2){
 8000dbc:	4b69      	ldr	r3, [pc, #420]	; (8000f64 <recibirmensaje+0x2a8>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d10e      	bne.n	8000de2 <recibirmensaje+0x126>
					indRX_R=indRX_W;
 8000dc4:	4b68      	ldr	r3, [pc, #416]	; (8000f68 <recibirmensaje+0x2ac>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	b2da      	uxtb	r2, r3
 8000dca:	4b61      	ldr	r3, [pc, #388]	; (8000f50 <recibirmensaje+0x294>)
 8000dcc:	701a      	strb	r2, [r3, #0]
					coincidencias = 0;
 8000dce:	4b62      	ldr	r3, [pc, #392]	; (8000f58 <recibirmensaje+0x29c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	701a      	strb	r2, [r3, #0]
					readyToSend=1;
 8000dd4:	4a62      	ldr	r2, [pc, #392]	; (8000f60 <recibirmensaje+0x2a4>)
 8000dd6:	7813      	ldrb	r3, [r2, #0]
 8000dd8:	f043 0310 	orr.w	r3, r3, #16
 8000ddc:	7013      	strb	r3, [r2, #0]
					break;
 8000dde:	f000 bda2 	b.w	8001926 <recibirmensaje+0xc6a>
				}
			}
		case 2:
			if(buf_rx[indRX_R]==ANS_CWMODE[coincidencias]){
 8000de2:	4b5b      	ldr	r3, [pc, #364]	; (8000f50 <recibirmensaje+0x294>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	461a      	mov	r2, r3
 8000dea:	4b5a      	ldr	r3, [pc, #360]	; (8000f54 <recibirmensaje+0x298>)
 8000dec:	5c9b      	ldrb	r3, [r3, r2]
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	4b59      	ldr	r3, [pc, #356]	; (8000f58 <recibirmensaje+0x29c>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	4619      	mov	r1, r3
 8000df6:	4b5e      	ldr	r3, [pc, #376]	; (8000f70 <recibirmensaje+0x2b4>)
 8000df8:	5c5b      	ldrb	r3, [r3, r1]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	d11a      	bne.n	8000e34 <recibirmensaje+0x178>
				coincidencias++;
 8000dfe:	4b56      	ldr	r3, [pc, #344]	; (8000f58 <recibirmensaje+0x29c>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	3301      	adds	r3, #1
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	4b54      	ldr	r3, [pc, #336]	; (8000f58 <recibirmensaje+0x29c>)
 8000e08:	701a      	strb	r2, [r3, #0]

				if(coincidencias>17){
 8000e0a:	4b53      	ldr	r3, [pc, #332]	; (8000f58 <recibirmensaje+0x29c>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	2b11      	cmp	r3, #17
 8000e10:	f240 857c 	bls.w	800190c <recibirmensaje+0xc50>
					coincidencias = 0;
 8000e14:	4b50      	ldr	r3, [pc, #320]	; (8000f58 <recibirmensaje+0x29c>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	701a      	strb	r2, [r3, #0]
					AT++;
 8000e1a:	4b4c      	ldr	r3, [pc, #304]	; (8000f4c <recibirmensaje+0x290>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	4b4a      	ldr	r3, [pc, #296]	; (8000f4c <recibirmensaje+0x290>)
 8000e24:	701a      	strb	r2, [r3, #0]
					readyToSend = 1;
 8000e26:	4a4e      	ldr	r2, [pc, #312]	; (8000f60 <recibirmensaje+0x2a4>)
 8000e28:	7813      	ldrb	r3, [r2, #0]
 8000e2a:	f043 0310 	orr.w	r3, r3, #16
 8000e2e:	7013      	strb	r3, [r2, #0]
					coincidencias = 0;
					readyToSend=1;
					break;
				}
			}
		break;
 8000e30:	f000 bd6c 	b.w	800190c <recibirmensaje+0xc50>
				if(!timeout2){
 8000e34:	4b4b      	ldr	r3, [pc, #300]	; (8000f64 <recibirmensaje+0x2a8>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	f040 8567 	bne.w	800190c <recibirmensaje+0xc50>
					indRX_R=indRX_W;
 8000e3e:	4b4a      	ldr	r3, [pc, #296]	; (8000f68 <recibirmensaje+0x2ac>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	b2da      	uxtb	r2, r3
 8000e44:	4b42      	ldr	r3, [pc, #264]	; (8000f50 <recibirmensaje+0x294>)
 8000e46:	701a      	strb	r2, [r3, #0]
					coincidencias = 0;
 8000e48:	4b43      	ldr	r3, [pc, #268]	; (8000f58 <recibirmensaje+0x29c>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	701a      	strb	r2, [r3, #0]
					readyToSend=1;
 8000e4e:	4a44      	ldr	r2, [pc, #272]	; (8000f60 <recibirmensaje+0x2a4>)
 8000e50:	7813      	ldrb	r3, [r2, #0]
 8000e52:	f043 0310 	orr.w	r3, r3, #16
 8000e56:	7013      	strb	r3, [r2, #0]
					break;
 8000e58:	f000 bd65 	b.w	8001926 <recibirmensaje+0xc6a>
		case 3:

			if(buf_rx[indRX_R]==ANS_CWJAP_casa[coincidencias]){
 8000e5c:	4b3c      	ldr	r3, [pc, #240]	; (8000f50 <recibirmensaje+0x294>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	461a      	mov	r2, r3
 8000e64:	4b3b      	ldr	r3, [pc, #236]	; (8000f54 <recibirmensaje+0x298>)
 8000e66:	5c9b      	ldrb	r3, [r3, r2]
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	4b3b      	ldr	r3, [pc, #236]	; (8000f58 <recibirmensaje+0x29c>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4b40      	ldr	r3, [pc, #256]	; (8000f74 <recibirmensaje+0x2b8>)
 8000e72:	5c5b      	ldrb	r3, [r3, r1]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	f040 854b 	bne.w	8001910 <recibirmensaje+0xc54>
				coincidencias++;
 8000e7a:	4b37      	ldr	r3, [pc, #220]	; (8000f58 <recibirmensaje+0x29c>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	4b35      	ldr	r3, [pc, #212]	; (8000f58 <recibirmensaje+0x29c>)
 8000e84:	701a      	strb	r2, [r3, #0]

				if(coincidencias>68){
 8000e86:	4b34      	ldr	r3, [pc, #208]	; (8000f58 <recibirmensaje+0x29c>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	2b44      	cmp	r3, #68	; 0x44
 8000e8c:	f240 8540 	bls.w	8001910 <recibirmensaje+0xc54>
					coincidencias = 0;
 8000e90:	4b31      	ldr	r3, [pc, #196]	; (8000f58 <recibirmensaje+0x29c>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	701a      	strb	r2, [r3, #0]
					AT++;
 8000e96:	4b2d      	ldr	r3, [pc, #180]	; (8000f4c <recibirmensaje+0x290>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	b2da      	uxtb	r2, r3
 8000e9e:	4b2b      	ldr	r3, [pc, #172]	; (8000f4c <recibirmensaje+0x290>)
 8000ea0:	701a      	strb	r2, [r3, #0]
					readyToSend = 1;
 8000ea2:	4a2f      	ldr	r2, [pc, #188]	; (8000f60 <recibirmensaje+0x2a4>)
 8000ea4:	7813      	ldrb	r3, [r2, #0]
 8000ea6:	f043 0310 	orr.w	r3, r3, #16
 8000eaa:	7013      	strb	r3, [r2, #0]
				}
			}
		break;
 8000eac:	f000 bd30 	b.w	8001910 <recibirmensaje+0xc54>
		case 4:
			if(buf_rx[indRX_R]==ANS_CIPMUX[coincidencias]){
 8000eb0:	4b27      	ldr	r3, [pc, #156]	; (8000f50 <recibirmensaje+0x294>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	4b26      	ldr	r3, [pc, #152]	; (8000f54 <recibirmensaje+0x298>)
 8000eba:	5c9b      	ldrb	r3, [r3, r2]
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	4b26      	ldr	r3, [pc, #152]	; (8000f58 <recibirmensaje+0x29c>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4b2c      	ldr	r3, [pc, #176]	; (8000f78 <recibirmensaje+0x2bc>)
 8000ec6:	5c5b      	ldrb	r3, [r3, r1]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d11a      	bne.n	8000f02 <recibirmensaje+0x246>
				coincidencias++;
 8000ecc:	4b22      	ldr	r3, [pc, #136]	; (8000f58 <recibirmensaje+0x29c>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	4b20      	ldr	r3, [pc, #128]	; (8000f58 <recibirmensaje+0x29c>)
 8000ed6:	701a      	strb	r2, [r3, #0]

				if(coincidencias>17){
 8000ed8:	4b1f      	ldr	r3, [pc, #124]	; (8000f58 <recibirmensaje+0x29c>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b11      	cmp	r3, #17
 8000ede:	f240 8519 	bls.w	8001914 <recibirmensaje+0xc58>
					coincidencias = 0;
 8000ee2:	4b1d      	ldr	r3, [pc, #116]	; (8000f58 <recibirmensaje+0x29c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	701a      	strb	r2, [r3, #0]
					AT+=2;
 8000ee8:	4b18      	ldr	r3, [pc, #96]	; (8000f4c <recibirmensaje+0x290>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	3302      	adds	r3, #2
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	4b16      	ldr	r3, [pc, #88]	; (8000f4c <recibirmensaje+0x290>)
 8000ef2:	701a      	strb	r2, [r3, #0]
					readyToSend = 1;
 8000ef4:	4a1a      	ldr	r2, [pc, #104]	; (8000f60 <recibirmensaje+0x2a4>)
 8000ef6:	7813      	ldrb	r3, [r2, #0]
 8000ef8:	f043 0310 	orr.w	r3, r3, #16
 8000efc:	7013      	strb	r3, [r2, #0]
					coincidencias = 0;
					readyToSend=1;
					break;
				}
			}
		break;
 8000efe:	f000 bd09 	b.w	8001914 <recibirmensaje+0xc58>
				if(!timeout2){
 8000f02:	4b18      	ldr	r3, [pc, #96]	; (8000f64 <recibirmensaje+0x2a8>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	f040 8504 	bne.w	8001914 <recibirmensaje+0xc58>
					indRX_R=indRX_W;
 8000f0c:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <recibirmensaje+0x2ac>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	b2da      	uxtb	r2, r3
 8000f12:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <recibirmensaje+0x294>)
 8000f14:	701a      	strb	r2, [r3, #0]
					coincidencias = 0;
 8000f16:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <recibirmensaje+0x29c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	701a      	strb	r2, [r3, #0]
					readyToSend=1;
 8000f1c:	4a10      	ldr	r2, [pc, #64]	; (8000f60 <recibirmensaje+0x2a4>)
 8000f1e:	7813      	ldrb	r3, [r2, #0]
 8000f20:	f043 0310 	orr.w	r3, r3, #16
 8000f24:	7013      	strb	r3, [r2, #0]
					break;
 8000f26:	f000 bcfe 	b.w	8001926 <recibirmensaje+0xc6a>
		case 5:
			switch(decodeCIF){
 8000f2a:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <recibirmensaje+0x2c0>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2b03      	cmp	r3, #3
 8000f30:	f200 84f2 	bhi.w	8001918 <recibirmensaje+0xc5c>
 8000f34:	a201      	add	r2, pc, #4	; (adr r2, 8000f3c <recibirmensaje+0x280>)
 8000f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f3a:	bf00      	nop
 8000f3c:	08000f81 	.word	0x08000f81
 8000f40:	08000fed 	.word	0x08000fed
 8000f44:	08001031 	.word	0x08001031
 8000f48:	08001083 	.word	0x08001083
 8000f4c:	200005c5 	.word	0x200005c5
 8000f50:	200005be 	.word	0x200005be
 8000f54:	200001ec 	.word	0x200001ec
 8000f58:	200005c2 	.word	0x200005c2
 8000f5c:	080073d4 	.word	0x080073d4
 8000f60:	200005f4 	.word	0x200005f4
 8000f64:	200005ca 	.word	0x200005ca
 8000f68:	200005bd 	.word	0x200005bd
 8000f6c:	080073ec 	.word	0x080073ec
 8000f70:	08007410 	.word	0x08007410
 8000f74:	0800744c 	.word	0x0800744c
 8000f78:	080074c0 	.word	0x080074c0
 8000f7c:	200005c7 	.word	0x200005c7
			case 0:
				if(buf_rx[indRX_R]==CIFSR[coincidencias]){
 8000f80:	4b9d      	ldr	r3, [pc, #628]	; (80011f8 <recibirmensaje+0x53c>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	461a      	mov	r2, r3
 8000f88:	4b9c      	ldr	r3, [pc, #624]	; (80011fc <recibirmensaje+0x540>)
 8000f8a:	5c9b      	ldrb	r3, [r3, r2]
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	4b9c      	ldr	r3, [pc, #624]	; (8001200 <recibirmensaje+0x544>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	4619      	mov	r1, r3
 8000f94:	4b9b      	ldr	r3, [pc, #620]	; (8001204 <recibirmensaje+0x548>)
 8000f96:	5c5b      	ldrb	r3, [r3, r1]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d114      	bne.n	8000fc6 <recibirmensaje+0x30a>
					coincidencias++;
 8000f9c:	4b98      	ldr	r3, [pc, #608]	; (8001200 <recibirmensaje+0x544>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	4b96      	ldr	r3, [pc, #600]	; (8001200 <recibirmensaje+0x544>)
 8000fa6:	701a      	strb	r2, [r3, #0]

					if(coincidencias>8){
 8000fa8:	4b95      	ldr	r3, [pc, #596]	; (8001200 <recibirmensaje+0x544>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b08      	cmp	r3, #8
 8000fae:	f240 8092 	bls.w	80010d6 <recibirmensaje+0x41a>
						coincidencias = 0;
 8000fb2:	4b93      	ldr	r3, [pc, #588]	; (8001200 <recibirmensaje+0x544>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	701a      	strb	r2, [r3, #0]
						decodeCIF++;
 8000fb8:	4b93      	ldr	r3, [pc, #588]	; (8001208 <recibirmensaje+0x54c>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	4b91      	ldr	r3, [pc, #580]	; (8001208 <recibirmensaje+0x54c>)
 8000fc2:	701a      	strb	r2, [r3, #0]
						coincidencias = 0;
						readyToSend=1;
						break;
					}
				}
			break;
 8000fc4:	e087      	b.n	80010d6 <recibirmensaje+0x41a>
					if(!timeout2){
 8000fc6:	4b91      	ldr	r3, [pc, #580]	; (800120c <recibirmensaje+0x550>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	f040 8083 	bne.w	80010d6 <recibirmensaje+0x41a>
						indRX_R=indRX_W;
 8000fd0:	4b8f      	ldr	r3, [pc, #572]	; (8001210 <recibirmensaje+0x554>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	4b88      	ldr	r3, [pc, #544]	; (80011f8 <recibirmensaje+0x53c>)
 8000fd8:	701a      	strb	r2, [r3, #0]
						coincidencias = 0;
 8000fda:	4b89      	ldr	r3, [pc, #548]	; (8001200 <recibirmensaje+0x544>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	701a      	strb	r2, [r3, #0]
						readyToSend=1;
 8000fe0:	4a8c      	ldr	r2, [pc, #560]	; (8001214 <recibirmensaje+0x558>)
 8000fe2:	7813      	ldrb	r3, [r2, #0]
 8000fe4:	f043 0310 	orr.w	r3, r3, #16
 8000fe8:	7013      	strb	r3, [r2, #0]
						break;
 8000fea:	e07e      	b.n	80010ea <recibirmensaje+0x42e>
			case 1:
				if(buf_rx[indRX_R]==CIFSR_STAIP[coincidencias]){
 8000fec:	4b82      	ldr	r3, [pc, #520]	; (80011f8 <recibirmensaje+0x53c>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	4b81      	ldr	r3, [pc, #516]	; (80011fc <recibirmensaje+0x540>)
 8000ff6:	5c9b      	ldrb	r3, [r3, r2]
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	4b81      	ldr	r3, [pc, #516]	; (8001200 <recibirmensaje+0x544>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	4619      	mov	r1, r3
 8001000:	4b85      	ldr	r3, [pc, #532]	; (8001218 <recibirmensaje+0x55c>)
 8001002:	5c5b      	ldrb	r3, [r3, r1]
 8001004:	429a      	cmp	r2, r3
 8001006:	d169      	bne.n	80010dc <recibirmensaje+0x420>
					coincidencias++;
 8001008:	4b7d      	ldr	r3, [pc, #500]	; (8001200 <recibirmensaje+0x544>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	3301      	adds	r3, #1
 800100e:	b2da      	uxtb	r2, r3
 8001010:	4b7b      	ldr	r3, [pc, #492]	; (8001200 <recibirmensaje+0x544>)
 8001012:	701a      	strb	r2, [r3, #0]

					if(coincidencias>10){
 8001014:	4b7a      	ldr	r3, [pc, #488]	; (8001200 <recibirmensaje+0x544>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b0a      	cmp	r3, #10
 800101a:	d95f      	bls.n	80010dc <recibirmensaje+0x420>
						coincidencias = 0;
 800101c:	4b78      	ldr	r3, [pc, #480]	; (8001200 <recibirmensaje+0x544>)
 800101e:	2200      	movs	r2, #0
 8001020:	701a      	strb	r2, [r3, #0]
						decodeCIF++;
 8001022:	4b79      	ldr	r3, [pc, #484]	; (8001208 <recibirmensaje+0x54c>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	3301      	adds	r3, #1
 8001028:	b2da      	uxtb	r2, r3
 800102a:	4b77      	ldr	r3, [pc, #476]	; (8001208 <recibirmensaje+0x54c>)
 800102c:	701a      	strb	r2, [r3, #0]
						//AT++;
						//readyToSend = 1;
					}
				}
			break;
 800102e:	e055      	b.n	80010dc <recibirmensaje+0x420>
			case 2:
				espIP[coincidencias]=buf_rx[indRX_R];
 8001030:	4b71      	ldr	r3, [pc, #452]	; (80011f8 <recibirmensaje+0x53c>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	b2db      	uxtb	r3, r3
 8001036:	4619      	mov	r1, r3
 8001038:	4b71      	ldr	r3, [pc, #452]	; (8001200 <recibirmensaje+0x544>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	461a      	mov	r2, r3
 800103e:	4b6f      	ldr	r3, [pc, #444]	; (80011fc <recibirmensaje+0x540>)
 8001040:	5c5b      	ldrb	r3, [r3, r1]
 8001042:	b2d9      	uxtb	r1, r3
 8001044:	4b75      	ldr	r3, [pc, #468]	; (800121c <recibirmensaje+0x560>)
 8001046:	5499      	strb	r1, [r3, r2]
				coincidencias++;
 8001048:	4b6d      	ldr	r3, [pc, #436]	; (8001200 <recibirmensaje+0x544>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	3301      	adds	r3, #1
 800104e:	b2da      	uxtb	r2, r3
 8001050:	4b6b      	ldr	r3, [pc, #428]	; (8001200 <recibirmensaje+0x544>)
 8001052:	701a      	strb	r2, [r3, #0]
				if((buf_rx[indRX_R]=='"')&&(largoIP>1)){
 8001054:	4b68      	ldr	r3, [pc, #416]	; (80011f8 <recibirmensaje+0x53c>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	b2db      	uxtb	r3, r3
 800105a:	461a      	mov	r2, r3
 800105c:	4b67      	ldr	r3, [pc, #412]	; (80011fc <recibirmensaje+0x540>)
 800105e:	5c9b      	ldrb	r3, [r3, r2]
 8001060:	b2db      	uxtb	r3, r3
 8001062:	2b22      	cmp	r3, #34	; 0x22
 8001064:	d13d      	bne.n	80010e2 <recibirmensaje+0x426>
 8001066:	4b6e      	ldr	r3, [pc, #440]	; (8001220 <recibirmensaje+0x564>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d939      	bls.n	80010e2 <recibirmensaje+0x426>
					coincidencias=0;
 800106e:	4b64      	ldr	r3, [pc, #400]	; (8001200 <recibirmensaje+0x544>)
 8001070:	2200      	movs	r2, #0
 8001072:	701a      	strb	r2, [r3, #0]
					decodeCIF++;
 8001074:	4b64      	ldr	r3, [pc, #400]	; (8001208 <recibirmensaje+0x54c>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	3301      	adds	r3, #1
 800107a:	b2da      	uxtb	r2, r3
 800107c:	4b62      	ldr	r3, [pc, #392]	; (8001208 <recibirmensaje+0x54c>)
 800107e:	701a      	strb	r2, [r3, #0]
				}
			break;
 8001080:	e02f      	b.n	80010e2 <recibirmensaje+0x426>
			case 3:
				if(buf_rx[indRX_R]==OK[coincidencias]){
 8001082:	4b5d      	ldr	r3, [pc, #372]	; (80011f8 <recibirmensaje+0x53c>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	b2db      	uxtb	r3, r3
 8001088:	461a      	mov	r2, r3
 800108a:	4b5c      	ldr	r3, [pc, #368]	; (80011fc <recibirmensaje+0x540>)
 800108c:	5c9b      	ldrb	r3, [r3, r2]
 800108e:	b2da      	uxtb	r2, r3
 8001090:	4b5b      	ldr	r3, [pc, #364]	; (8001200 <recibirmensaje+0x544>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	4619      	mov	r1, r3
 8001096:	4b63      	ldr	r3, [pc, #396]	; (8001224 <recibirmensaje+0x568>)
 8001098:	5c5b      	ldrb	r3, [r3, r1]
 800109a:	429a      	cmp	r2, r3
 800109c:	d124      	bne.n	80010e8 <recibirmensaje+0x42c>
					coincidencias++;
 800109e:	4b58      	ldr	r3, [pc, #352]	; (8001200 <recibirmensaje+0x544>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	3301      	adds	r3, #1
 80010a4:	b2da      	uxtb	r2, r3
 80010a6:	4b56      	ldr	r3, [pc, #344]	; (8001200 <recibirmensaje+0x544>)
 80010a8:	701a      	strb	r2, [r3, #0]

					if(coincidencias>4){
 80010aa:	4b55      	ldr	r3, [pc, #340]	; (8001200 <recibirmensaje+0x544>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b04      	cmp	r3, #4
 80010b0:	d91a      	bls.n	80010e8 <recibirmensaje+0x42c>
						coincidencias = 0;
 80010b2:	4b53      	ldr	r3, [pc, #332]	; (8001200 <recibirmensaje+0x544>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	701a      	strb	r2, [r3, #0]
						decodeCIF=0;
 80010b8:	4b53      	ldr	r3, [pc, #332]	; (8001208 <recibirmensaje+0x54c>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	701a      	strb	r2, [r3, #0]
						AT++;
 80010be:	4b5a      	ldr	r3, [pc, #360]	; (8001228 <recibirmensaje+0x56c>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	3301      	adds	r3, #1
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	4b58      	ldr	r3, [pc, #352]	; (8001228 <recibirmensaje+0x56c>)
 80010c8:	701a      	strb	r2, [r3, #0]
						readyToSend = 1;
 80010ca:	4a52      	ldr	r2, [pc, #328]	; (8001214 <recibirmensaje+0x558>)
 80010cc:	7813      	ldrb	r3, [r2, #0]
 80010ce:	f043 0310 	orr.w	r3, r3, #16
 80010d2:	7013      	strb	r3, [r2, #0]
					}
				}
			break;
 80010d4:	e008      	b.n	80010e8 <recibirmensaje+0x42c>
			break;
 80010d6:	bf00      	nop
 80010d8:	f000 bc1e 	b.w	8001918 <recibirmensaje+0xc5c>
			break;
 80010dc:	bf00      	nop
 80010de:	f000 bc1b 	b.w	8001918 <recibirmensaje+0xc5c>
			break;
 80010e2:	bf00      	nop
 80010e4:	f000 bc18 	b.w	8001918 <recibirmensaje+0xc5c>
			break;
 80010e8:	bf00      	nop
			}
		break;
 80010ea:	f000 bc15 	b.w	8001918 <recibirmensaje+0xc5c>
		case 6:

			if(buf_rx[indRX_R]==ANS_CIPSTART[coincidencias]){
 80010ee:	4b42      	ldr	r3, [pc, #264]	; (80011f8 <recibirmensaje+0x53c>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	461a      	mov	r2, r3
 80010f6:	4b41      	ldr	r3, [pc, #260]	; (80011fc <recibirmensaje+0x540>)
 80010f8:	5c9b      	ldrb	r3, [r3, r2]
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	4b40      	ldr	r3, [pc, #256]	; (8001200 <recibirmensaje+0x544>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	4619      	mov	r1, r3
 8001102:	4b4a      	ldr	r3, [pc, #296]	; (800122c <recibirmensaje+0x570>)
 8001104:	5c5b      	ldrb	r3, [r3, r1]
 8001106:	429a      	cmp	r2, r3
 8001108:	d127      	bne.n	800115a <recibirmensaje+0x49e>
				coincidencias++;
 800110a:	4b3d      	ldr	r3, [pc, #244]	; (8001200 <recibirmensaje+0x544>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	3301      	adds	r3, #1
 8001110:	b2da      	uxtb	r2, r3
 8001112:	4b3b      	ldr	r3, [pc, #236]	; (8001200 <recibirmensaje+0x544>)
 8001114:	701a      	strb	r2, [r3, #0]

				if(coincidencias>44){
 8001116:	4b3a      	ldr	r3, [pc, #232]	; (8001200 <recibirmensaje+0x544>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b2c      	cmp	r3, #44	; 0x2c
 800111c:	f240 83fe 	bls.w	800191c <recibirmensaje+0xc60>
					coincidencias = 0;
 8001120:	4b37      	ldr	r3, [pc, #220]	; (8001200 <recibirmensaje+0x544>)
 8001122:	2200      	movs	r2, #0
 8001124:	701a      	strb	r2, [r3, #0]
					coincidencias2 = 0;
 8001126:	4b42      	ldr	r3, [pc, #264]	; (8001230 <recibirmensaje+0x574>)
 8001128:	2200      	movs	r2, #0
 800112a:	701a      	strb	r2, [r3, #0]
					AT=8;
 800112c:	4b3e      	ldr	r3, [pc, #248]	; (8001228 <recibirmensaje+0x56c>)
 800112e:	2208      	movs	r2, #8
 8001130:	701a      	strb	r2, [r3, #0]
					readyToSend = 1;
 8001132:	4a38      	ldr	r2, [pc, #224]	; (8001214 <recibirmensaje+0x558>)
 8001134:	7813      	ldrb	r3, [r2, #0]
 8001136:	f043 0310 	orr.w	r3, r3, #16
 800113a:	7013      	strb	r3, [r2, #0]
					espConnected=1;
 800113c:	4a3d      	ldr	r2, [pc, #244]	; (8001234 <recibirmensaje+0x578>)
 800113e:	7813      	ldrb	r3, [r2, #0]
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	7013      	strb	r3, [r2, #0]
					HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001146:	2120      	movs	r1, #32
 8001148:	483b      	ldr	r0, [pc, #236]	; (8001238 <recibirmensaje+0x57c>)
 800114a:	f003 fcac 	bl	8004aa6 <HAL_GPIO_TogglePin>
					sendALIVE=1;
 800114e:	4a39      	ldr	r2, [pc, #228]	; (8001234 <recibirmensaje+0x578>)
 8001150:	7813      	ldrb	r3, [r2, #0]
 8001152:	f043 0302 	orr.w	r3, r3, #2
 8001156:	7013      	strb	r3, [r2, #0]
						readyToSend=1;
						break;
					}
				}

		break;
 8001158:	e3e0      	b.n	800191c <recibirmensaje+0xc60>
					if(!timeout2){
 800115a:	4b2c      	ldr	r3, [pc, #176]	; (800120c <recibirmensaje+0x550>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	f040 83dc 	bne.w	800191c <recibirmensaje+0xc60>
						indRX_R=indRX_W;
 8001164:	4b2a      	ldr	r3, [pc, #168]	; (8001210 <recibirmensaje+0x554>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	b2da      	uxtb	r2, r3
 800116a:	4b23      	ldr	r3, [pc, #140]	; (80011f8 <recibirmensaje+0x53c>)
 800116c:	701a      	strb	r2, [r3, #0]
						coincidencias = 0;
 800116e:	4b24      	ldr	r3, [pc, #144]	; (8001200 <recibirmensaje+0x544>)
 8001170:	2200      	movs	r2, #0
 8001172:	701a      	strb	r2, [r3, #0]
						readyToSend=1;
 8001174:	4a27      	ldr	r2, [pc, #156]	; (8001214 <recibirmensaje+0x558>)
 8001176:	7813      	ldrb	r3, [r2, #0]
 8001178:	f043 0310 	orr.w	r3, r3, #16
 800117c:	7013      	strb	r3, [r2, #0]
						break;
 800117e:	e3d2      	b.n	8001926 <recibirmensaje+0xc6a>
		case 7:
			switch(decoCIPSEND){
 8001180:	4b2e      	ldr	r3, [pc, #184]	; (800123c <recibirmensaje+0x580>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b07      	cmp	r3, #7
 8001186:	f200 83cb 	bhi.w	8001920 <recibirmensaje+0xc64>
 800118a:	a201      	add	r2, pc, #4	; (adr r2, 8001190 <recibirmensaje+0x4d4>)
 800118c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001190:	080011b1 	.word	0x080011b1
 8001194:	08001285 	.word	0x08001285
 8001198:	0800130d 	.word	0x0800130d
 800119c:	0800133f 	.word	0x0800133f
 80011a0:	080013df 	.word	0x080013df
 80011a4:	0800146b 	.word	0x0800146b
 80011a8:	0800154b 	.word	0x0800154b
 80011ac:	080015bf 	.word	0x080015bf
				case 0:
					if(buf_rx[indRX_R]==CIPSEND[coincidencias]){
 80011b0:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <recibirmensaje+0x53c>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	461a      	mov	r2, r3
 80011b8:	4b10      	ldr	r3, [pc, #64]	; (80011fc <recibirmensaje+0x540>)
 80011ba:	5c9b      	ldrb	r3, [r3, r2]
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	4b10      	ldr	r3, [pc, #64]	; (8001200 <recibirmensaje+0x544>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	4619      	mov	r1, r3
 80011c4:	4b1e      	ldr	r3, [pc, #120]	; (8001240 <recibirmensaje+0x584>)
 80011c6:	5c5b      	ldrb	r3, [r3, r1]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d13b      	bne.n	8001244 <recibirmensaje+0x588>
						coincidencias++;
 80011cc:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <recibirmensaje+0x544>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	3301      	adds	r3, #1
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <recibirmensaje+0x544>)
 80011d6:	701a      	strb	r2, [r3, #0]

						if(coincidencias>9){
 80011d8:	4b09      	ldr	r3, [pc, #36]	; (8001200 <recibirmensaje+0x544>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2b09      	cmp	r3, #9
 80011de:	f240 823c 	bls.w	800165a <recibirmensaje+0x99e>
							coincidencias = 0;
 80011e2:	4b07      	ldr	r3, [pc, #28]	; (8001200 <recibirmensaje+0x544>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	701a      	strb	r2, [r3, #0]
							decoCIPSEND++;
 80011e8:	4b14      	ldr	r3, [pc, #80]	; (800123c <recibirmensaje+0x580>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	3301      	adds	r3, #1
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	4b12      	ldr	r3, [pc, #72]	; (800123c <recibirmensaje+0x580>)
 80011f2:	701a      	strb	r2, [r3, #0]
							sendALIVE=0;
							timeToSendAlive=30;
							break;
						}
					}
				break;
 80011f4:	e231      	b.n	800165a <recibirmensaje+0x99e>
 80011f6:	bf00      	nop
 80011f8:	200005be 	.word	0x200005be
 80011fc:	200001ec 	.word	0x200001ec
 8001200:	200005c2 	.word	0x200005c2
 8001204:	08007494 	.word	0x08007494
 8001208:	200005c7 	.word	0x200005c7
 800120c:	200005ca 	.word	0x200005ca
 8001210:	200005bd 	.word	0x200005bd
 8001214:	200005f4 	.word	0x200005f4
 8001218:	080074a0 	.word	0x080074a0
 800121c:	200005ac 	.word	0x200005ac
 8001220:	200005cd 	.word	0x200005cd
 8001224:	08007570 	.word	0x08007570
 8001228:	200005c5 	.word	0x200005c5
 800122c:	08007508 	.word	0x08007508
 8001230:	200005c3 	.word	0x200005c3
 8001234:	200005f8 	.word	0x200005f8
 8001238:	40020000 	.word	0x40020000
 800123c:	200005c6 	.word	0x200005c6
 8001240:	0800753c 	.word	0x0800753c
						if(!timeout2){
 8001244:	4ba1      	ldr	r3, [pc, #644]	; (80014cc <recibirmensaje+0x810>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	f040 8206 	bne.w	800165a <recibirmensaje+0x99e>
							indRX_R=indRX_W;
 800124e:	4ba0      	ldr	r3, [pc, #640]	; (80014d0 <recibirmensaje+0x814>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	b2da      	uxtb	r2, r3
 8001254:	4b9f      	ldr	r3, [pc, #636]	; (80014d4 <recibirmensaje+0x818>)
 8001256:	701a      	strb	r2, [r3, #0]
							coincidencias = 0;
 8001258:	4b9f      	ldr	r3, [pc, #636]	; (80014d8 <recibirmensaje+0x81c>)
 800125a:	2200      	movs	r2, #0
 800125c:	701a      	strb	r2, [r3, #0]
							readyToSend=1;
 800125e:	4a9f      	ldr	r2, [pc, #636]	; (80014dc <recibirmensaje+0x820>)
 8001260:	7813      	ldrb	r3, [r2, #0]
 8001262:	f043 0310 	orr.w	r3, r3, #16
 8001266:	7013      	strb	r3, [r2, #0]
							espReadyToRecieve=0;
 8001268:	4a9c      	ldr	r2, [pc, #624]	; (80014dc <recibirmensaje+0x820>)
 800126a:	7813      	ldrb	r3, [r2, #0]
 800126c:	f36f 1345 	bfc	r3, #5, #1
 8001270:	7013      	strb	r3, [r2, #0]
							sendALIVE=0;
 8001272:	4a9b      	ldr	r2, [pc, #620]	; (80014e0 <recibirmensaje+0x824>)
 8001274:	7813      	ldrb	r3, [r2, #0]
 8001276:	f36f 0341 	bfc	r3, #1, #1
 800127a:	7013      	strb	r3, [r2, #0]
							timeToSendAlive=30;
 800127c:	4b99      	ldr	r3, [pc, #612]	; (80014e4 <recibirmensaje+0x828>)
 800127e:	221e      	movs	r2, #30
 8001280:	701a      	strb	r2, [r3, #0]
							break;
 8001282:	e1f9      	b.n	8001678 <recibirmensaje+0x9bc>
				case 1:
					if((buf_rx[indRX_R]==bytesToSend+'0')&&((bytesToSend<10))){//reviso q sean menos de 10 bytes
 8001284:	4b93      	ldr	r3, [pc, #588]	; (80014d4 <recibirmensaje+0x818>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	b2db      	uxtb	r3, r3
 800128a:	461a      	mov	r2, r3
 800128c:	4b96      	ldr	r3, [pc, #600]	; (80014e8 <recibirmensaje+0x82c>)
 800128e:	5c9b      	ldrb	r3, [r3, r2]
 8001290:	b2db      	uxtb	r3, r3
 8001292:	461a      	mov	r2, r3
 8001294:	4b95      	ldr	r3, [pc, #596]	; (80014ec <recibirmensaje+0x830>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	3330      	adds	r3, #48	; 0x30
 800129a:	429a      	cmp	r2, r3
 800129c:	d10a      	bne.n	80012b4 <recibirmensaje+0x5f8>
 800129e:	4b93      	ldr	r3, [pc, #588]	; (80014ec <recibirmensaje+0x830>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	2b09      	cmp	r3, #9
 80012a4:	d806      	bhi.n	80012b4 <recibirmensaje+0x5f8>
						decoCIPSEND+=2;
 80012a6:	4b92      	ldr	r3, [pc, #584]	; (80014f0 <recibirmensaje+0x834>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	3302      	adds	r3, #2
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	4b90      	ldr	r3, [pc, #576]	; (80014f0 <recibirmensaje+0x834>)
 80012b0:	701a      	strb	r2, [r3, #0]
							bytesToSend_aux=bytesToSend/10;
							bytesToSend_aux*=10;
							//bytesToSend_aux=bytesToSend%10;
						}
					}
				break;
 80012b2:	e1d4      	b.n	800165e <recibirmensaje+0x9a2>
						if(buf_rx[indRX_R]==bytesToSend/10+'0'){
 80012b4:	4b87      	ldr	r3, [pc, #540]	; (80014d4 <recibirmensaje+0x818>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	461a      	mov	r2, r3
 80012bc:	4b8a      	ldr	r3, [pc, #552]	; (80014e8 <recibirmensaje+0x82c>)
 80012be:	5c9b      	ldrb	r3, [r3, r2]
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	4619      	mov	r1, r3
 80012c4:	4b89      	ldr	r3, [pc, #548]	; (80014ec <recibirmensaje+0x830>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	4a8a      	ldr	r2, [pc, #552]	; (80014f4 <recibirmensaje+0x838>)
 80012ca:	fba2 2303 	umull	r2, r3, r2, r3
 80012ce:	08db      	lsrs	r3, r3, #3
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	3330      	adds	r3, #48	; 0x30
 80012d4:	4299      	cmp	r1, r3
 80012d6:	f040 81c2 	bne.w	800165e <recibirmensaje+0x9a2>
							decoCIPSEND++;
 80012da:	4b85      	ldr	r3, [pc, #532]	; (80014f0 <recibirmensaje+0x834>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	3301      	adds	r3, #1
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	4b83      	ldr	r3, [pc, #524]	; (80014f0 <recibirmensaje+0x834>)
 80012e4:	701a      	strb	r2, [r3, #0]
							bytesToSend_aux=bytesToSend/10;
 80012e6:	4b81      	ldr	r3, [pc, #516]	; (80014ec <recibirmensaje+0x830>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	4a82      	ldr	r2, [pc, #520]	; (80014f4 <recibirmensaje+0x838>)
 80012ec:	fba2 2303 	umull	r2, r3, r2, r3
 80012f0:	08db      	lsrs	r3, r3, #3
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	4b80      	ldr	r3, [pc, #512]	; (80014f8 <recibirmensaje+0x83c>)
 80012f6:	701a      	strb	r2, [r3, #0]
							bytesToSend_aux*=10;
 80012f8:	4b7f      	ldr	r3, [pc, #508]	; (80014f8 <recibirmensaje+0x83c>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	461a      	mov	r2, r3
 80012fe:	0092      	lsls	r2, r2, #2
 8001300:	4413      	add	r3, r2
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	b2da      	uxtb	r2, r3
 8001306:	4b7c      	ldr	r3, [pc, #496]	; (80014f8 <recibirmensaje+0x83c>)
 8001308:	701a      	strb	r2, [r3, #0]
				break;
 800130a:	e1a8      	b.n	800165e <recibirmensaje+0x9a2>
				case 2:
					/*
					if(buf_rx[indRX_R]==bytesToSend-bytesToSend_aux+'0'){
						decoCIPSEND++;
					}*/
					if(buf_rx[indRX_R]==bytesToSend-bytesToSend_aux+'0'){
 800130c:	4b71      	ldr	r3, [pc, #452]	; (80014d4 <recibirmensaje+0x818>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	b2db      	uxtb	r3, r3
 8001312:	461a      	mov	r2, r3
 8001314:	4b74      	ldr	r3, [pc, #464]	; (80014e8 <recibirmensaje+0x82c>)
 8001316:	5c9b      	ldrb	r3, [r3, r2]
 8001318:	b2db      	uxtb	r3, r3
 800131a:	461a      	mov	r2, r3
 800131c:	4b73      	ldr	r3, [pc, #460]	; (80014ec <recibirmensaje+0x830>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	4619      	mov	r1, r3
 8001322:	4b75      	ldr	r3, [pc, #468]	; (80014f8 <recibirmensaje+0x83c>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	1acb      	subs	r3, r1, r3
 8001328:	3330      	adds	r3, #48	; 0x30
 800132a:	429a      	cmp	r2, r3
 800132c:	f040 8199 	bne.w	8001662 <recibirmensaje+0x9a6>
											decoCIPSEND++;
 8001330:	4b6f      	ldr	r3, [pc, #444]	; (80014f0 <recibirmensaje+0x834>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	3301      	adds	r3, #1
 8001336:	b2da      	uxtb	r2, r3
 8001338:	4b6d      	ldr	r3, [pc, #436]	; (80014f0 <recibirmensaje+0x834>)
 800133a:	701a      	strb	r2, [r3, #0]
										}
				break;
 800133c:	e191      	b.n	8001662 <recibirmensaje+0x9a6>
				case 3:
					if(buf_rx[indRX_R]==CIPSEND2[coincidencias]){
 800133e:	4b65      	ldr	r3, [pc, #404]	; (80014d4 <recibirmensaje+0x818>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	b2db      	uxtb	r3, r3
 8001344:	461a      	mov	r2, r3
 8001346:	4b68      	ldr	r3, [pc, #416]	; (80014e8 <recibirmensaje+0x82c>)
 8001348:	5c9b      	ldrb	r3, [r3, r2]
 800134a:	b2da      	uxtb	r2, r3
 800134c:	4b62      	ldr	r3, [pc, #392]	; (80014d8 <recibirmensaje+0x81c>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	4619      	mov	r1, r3
 8001352:	4b6a      	ldr	r3, [pc, #424]	; (80014fc <recibirmensaje+0x840>)
 8001354:	5c5b      	ldrb	r3, [r3, r1]
 8001356:	429a      	cmp	r2, r3
 8001358:	d11e      	bne.n	8001398 <recibirmensaje+0x6dc>
						coincidencias++;
 800135a:	4b5f      	ldr	r3, [pc, #380]	; (80014d8 <recibirmensaje+0x81c>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	3301      	adds	r3, #1
 8001360:	b2da      	uxtb	r2, r3
 8001362:	4b5d      	ldr	r3, [pc, #372]	; (80014d8 <recibirmensaje+0x81c>)
 8001364:	701a      	strb	r2, [r3, #0]

						if(coincidencias>7){
 8001366:	4b5c      	ldr	r3, [pc, #368]	; (80014d8 <recibirmensaje+0x81c>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b07      	cmp	r3, #7
 800136c:	f240 817b 	bls.w	8001666 <recibirmensaje+0x9aa>
							coincidencias = 0;
 8001370:	4b59      	ldr	r3, [pc, #356]	; (80014d8 <recibirmensaje+0x81c>)
 8001372:	2200      	movs	r2, #0
 8001374:	701a      	strb	r2, [r3, #0]
							decoCIPSEND++;
 8001376:	4b5e      	ldr	r3, [pc, #376]	; (80014f0 <recibirmensaje+0x834>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	3301      	adds	r3, #1
 800137c:	b2da      	uxtb	r2, r3
 800137e:	4b5c      	ldr	r3, [pc, #368]	; (80014f0 <recibirmensaje+0x834>)
 8001380:	701a      	strb	r2, [r3, #0]
							//AT++;
							readyToSend = 1;
 8001382:	4a56      	ldr	r2, [pc, #344]	; (80014dc <recibirmensaje+0x820>)
 8001384:	7813      	ldrb	r3, [r2, #0]
 8001386:	f043 0310 	orr.w	r3, r3, #16
 800138a:	7013      	strb	r3, [r2, #0]
							espReadyToRecieve=1;
 800138c:	4a53      	ldr	r2, [pc, #332]	; (80014dc <recibirmensaje+0x820>)
 800138e:	7813      	ldrb	r3, [r2, #0]
 8001390:	f043 0320 	orr.w	r3, r3, #32
 8001394:	7013      	strb	r3, [r2, #0]
							sendALIVE=0;
							timeToSendAlive=30;
							break;
						}
					}
				break;
 8001396:	e166      	b.n	8001666 <recibirmensaje+0x9aa>
						if(!timeout2){
 8001398:	4b4c      	ldr	r3, [pc, #304]	; (80014cc <recibirmensaje+0x810>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	f040 8162 	bne.w	8001666 <recibirmensaje+0x9aa>
							decoCIPSEND=0;
 80013a2:	4b53      	ldr	r3, [pc, #332]	; (80014f0 <recibirmensaje+0x834>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	701a      	strb	r2, [r3, #0]
							indRX_R=indRX_W;
 80013a8:	4b49      	ldr	r3, [pc, #292]	; (80014d0 <recibirmensaje+0x814>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	b2da      	uxtb	r2, r3
 80013ae:	4b49      	ldr	r3, [pc, #292]	; (80014d4 <recibirmensaje+0x818>)
 80013b0:	701a      	strb	r2, [r3, #0]
							coincidencias = 0;
 80013b2:	4b49      	ldr	r3, [pc, #292]	; (80014d8 <recibirmensaje+0x81c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	701a      	strb	r2, [r3, #0]
							readyToSend=1;
 80013b8:	4a48      	ldr	r2, [pc, #288]	; (80014dc <recibirmensaje+0x820>)
 80013ba:	7813      	ldrb	r3, [r2, #0]
 80013bc:	f043 0310 	orr.w	r3, r3, #16
 80013c0:	7013      	strb	r3, [r2, #0]
							espReadyToRecieve=0;
 80013c2:	4a46      	ldr	r2, [pc, #280]	; (80014dc <recibirmensaje+0x820>)
 80013c4:	7813      	ldrb	r3, [r2, #0]
 80013c6:	f36f 1345 	bfc	r3, #5, #1
 80013ca:	7013      	strb	r3, [r2, #0]
							sendALIVE=0;
 80013cc:	4a44      	ldr	r2, [pc, #272]	; (80014e0 <recibirmensaje+0x824>)
 80013ce:	7813      	ldrb	r3, [r2, #0]
 80013d0:	f36f 0341 	bfc	r3, #1, #1
 80013d4:	7013      	strb	r3, [r2, #0]
							timeToSendAlive=30;
 80013d6:	4b43      	ldr	r3, [pc, #268]	; (80014e4 <recibirmensaje+0x828>)
 80013d8:	221e      	movs	r2, #30
 80013da:	701a      	strb	r2, [r3, #0]
							break;
 80013dc:	e14c      	b.n	8001678 <recibirmensaje+0x9bc>
				case 4:
					if(buf_rx[indRX_R]==CIPSEND3[coincidencias]){
 80013de:	4b3d      	ldr	r3, [pc, #244]	; (80014d4 <recibirmensaje+0x818>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	461a      	mov	r2, r3
 80013e6:	4b40      	ldr	r3, [pc, #256]	; (80014e8 <recibirmensaje+0x82c>)
 80013e8:	5c9b      	ldrb	r3, [r3, r2]
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	4b3a      	ldr	r3, [pc, #232]	; (80014d8 <recibirmensaje+0x81c>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	4619      	mov	r1, r3
 80013f2:	4b43      	ldr	r3, [pc, #268]	; (8001500 <recibirmensaje+0x844>)
 80013f4:	5c5b      	ldrb	r3, [r3, r1]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d114      	bne.n	8001424 <recibirmensaje+0x768>
						coincidencias++;
 80013fa:	4b37      	ldr	r3, [pc, #220]	; (80014d8 <recibirmensaje+0x81c>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	3301      	adds	r3, #1
 8001400:	b2da      	uxtb	r2, r3
 8001402:	4b35      	ldr	r3, [pc, #212]	; (80014d8 <recibirmensaje+0x81c>)
 8001404:	701a      	strb	r2, [r3, #0]

						if(coincidencias>3){
 8001406:	4b34      	ldr	r3, [pc, #208]	; (80014d8 <recibirmensaje+0x81c>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b03      	cmp	r3, #3
 800140c:	f240 812d 	bls.w	800166a <recibirmensaje+0x9ae>
							coincidencias = 0;
 8001410:	4b31      	ldr	r3, [pc, #196]	; (80014d8 <recibirmensaje+0x81c>)
 8001412:	2200      	movs	r2, #0
 8001414:	701a      	strb	r2, [r3, #0]
							decoCIPSEND++;
 8001416:	4b36      	ldr	r3, [pc, #216]	; (80014f0 <recibirmensaje+0x834>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	3301      	adds	r3, #1
 800141c:	b2da      	uxtb	r2, r3
 800141e:	4b34      	ldr	r3, [pc, #208]	; (80014f0 <recibirmensaje+0x834>)
 8001420:	701a      	strb	r2, [r3, #0]
							sendALIVE=0;
							timeToSendAlive=30;
							break;
						}
					}
				break;
 8001422:	e122      	b.n	800166a <recibirmensaje+0x9ae>
						if(!timeout2){
 8001424:	4b29      	ldr	r3, [pc, #164]	; (80014cc <recibirmensaje+0x810>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	f040 811e 	bne.w	800166a <recibirmensaje+0x9ae>
							decoCIPSEND=0;
 800142e:	4b30      	ldr	r3, [pc, #192]	; (80014f0 <recibirmensaje+0x834>)
 8001430:	2200      	movs	r2, #0
 8001432:	701a      	strb	r2, [r3, #0]
							indRX_R=indRX_W;
 8001434:	4b26      	ldr	r3, [pc, #152]	; (80014d0 <recibirmensaje+0x814>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	b2da      	uxtb	r2, r3
 800143a:	4b26      	ldr	r3, [pc, #152]	; (80014d4 <recibirmensaje+0x818>)
 800143c:	701a      	strb	r2, [r3, #0]
							coincidencias = 0;
 800143e:	4b26      	ldr	r3, [pc, #152]	; (80014d8 <recibirmensaje+0x81c>)
 8001440:	2200      	movs	r2, #0
 8001442:	701a      	strb	r2, [r3, #0]
							readyToSend=1;
 8001444:	4a25      	ldr	r2, [pc, #148]	; (80014dc <recibirmensaje+0x820>)
 8001446:	7813      	ldrb	r3, [r2, #0]
 8001448:	f043 0310 	orr.w	r3, r3, #16
 800144c:	7013      	strb	r3, [r2, #0]
							espReadyToRecieve=0;
 800144e:	4a23      	ldr	r2, [pc, #140]	; (80014dc <recibirmensaje+0x820>)
 8001450:	7813      	ldrb	r3, [r2, #0]
 8001452:	f36f 1345 	bfc	r3, #5, #1
 8001456:	7013      	strb	r3, [r2, #0]
							sendALIVE=0;
 8001458:	4a21      	ldr	r2, [pc, #132]	; (80014e0 <recibirmensaje+0x824>)
 800145a:	7813      	ldrb	r3, [r2, #0]
 800145c:	f36f 0341 	bfc	r3, #1, #1
 8001460:	7013      	strb	r3, [r2, #0]
							timeToSendAlive=30;
 8001462:	4b20      	ldr	r3, [pc, #128]	; (80014e4 <recibirmensaje+0x828>)
 8001464:	221e      	movs	r2, #30
 8001466:	701a      	strb	r2, [r3, #0]
							break;
 8001468:	e106      	b.n	8001678 <recibirmensaje+0x9bc>
				case 5:
					if((buf_rx[indRX_R]==bytesToSend+'0')&&((bytesToSend<10))){//reviso q sean menos de 10 bytes
 800146a:	4b1a      	ldr	r3, [pc, #104]	; (80014d4 <recibirmensaje+0x818>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	b2db      	uxtb	r3, r3
 8001470:	461a      	mov	r2, r3
 8001472:	4b1d      	ldr	r3, [pc, #116]	; (80014e8 <recibirmensaje+0x82c>)
 8001474:	5c9b      	ldrb	r3, [r3, r2]
 8001476:	b2db      	uxtb	r3, r3
 8001478:	461a      	mov	r2, r3
 800147a:	4b1c      	ldr	r3, [pc, #112]	; (80014ec <recibirmensaje+0x830>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	3330      	adds	r3, #48	; 0x30
 8001480:	429a      	cmp	r2, r3
 8001482:	d10a      	bne.n	800149a <recibirmensaje+0x7de>
 8001484:	4b19      	ldr	r3, [pc, #100]	; (80014ec <recibirmensaje+0x830>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b09      	cmp	r3, #9
 800148a:	d806      	bhi.n	800149a <recibirmensaje+0x7de>
						decoCIPSEND+=2;
 800148c:	4b18      	ldr	r3, [pc, #96]	; (80014f0 <recibirmensaje+0x834>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	3302      	adds	r3, #2
 8001492:	b2da      	uxtb	r2, r3
 8001494:	4b16      	ldr	r3, [pc, #88]	; (80014f0 <recibirmensaje+0x834>)
 8001496:	701a      	strb	r2, [r3, #0]
								timeToSendAlive=30;
								break;
							}
						}
					}
				break;
 8001498:	e0e9      	b.n	800166e <recibirmensaje+0x9b2>
						if(buf_rx[indRX_R]==bytesToSend/10+'0'){
 800149a:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <recibirmensaje+0x818>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	461a      	mov	r2, r3
 80014a2:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <recibirmensaje+0x82c>)
 80014a4:	5c9b      	ldrb	r3, [r3, r2]
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	4619      	mov	r1, r3
 80014aa:	4b10      	ldr	r3, [pc, #64]	; (80014ec <recibirmensaje+0x830>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	4a11      	ldr	r2, [pc, #68]	; (80014f4 <recibirmensaje+0x838>)
 80014b0:	fba2 2303 	umull	r2, r3, r2, r3
 80014b4:	08db      	lsrs	r3, r3, #3
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	3330      	adds	r3, #48	; 0x30
 80014ba:	4299      	cmp	r1, r3
 80014bc:	d122      	bne.n	8001504 <recibirmensaje+0x848>
							decoCIPSEND++;
 80014be:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <recibirmensaje+0x834>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	3301      	adds	r3, #1
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <recibirmensaje+0x834>)
 80014c8:	701a      	strb	r2, [r3, #0]
				break;
 80014ca:	e0d0      	b.n	800166e <recibirmensaje+0x9b2>
 80014cc:	200005ca 	.word	0x200005ca
 80014d0:	200005bd 	.word	0x200005bd
 80014d4:	200005be 	.word	0x200005be
 80014d8:	200005c2 	.word	0x200005c2
 80014dc:	200005f4 	.word	0x200005f4
 80014e0:	200005f8 	.word	0x200005f8
 80014e4:	200005d0 	.word	0x200005d0
 80014e8:	200001ec 	.word	0x200001ec
 80014ec:	200005ce 	.word	0x200005ce
 80014f0:	200005c6 	.word	0x200005c6
 80014f4:	cccccccd 	.word	0xcccccccd
 80014f8:	200005cf 	.word	0x200005cf
 80014fc:	08007548 	.word	0x08007548
 8001500:	08007554 	.word	0x08007554
							if(!timeout2){
 8001504:	4ba4      	ldr	r3, [pc, #656]	; (8001798 <recibirmensaje+0xadc>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	f040 80b0 	bne.w	800166e <recibirmensaje+0x9b2>
								decoCIPSEND=0;
 800150e:	4ba3      	ldr	r3, [pc, #652]	; (800179c <recibirmensaje+0xae0>)
 8001510:	2200      	movs	r2, #0
 8001512:	701a      	strb	r2, [r3, #0]
								indRX_R=indRX_W;
 8001514:	4ba2      	ldr	r3, [pc, #648]	; (80017a0 <recibirmensaje+0xae4>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	b2da      	uxtb	r2, r3
 800151a:	4ba2      	ldr	r3, [pc, #648]	; (80017a4 <recibirmensaje+0xae8>)
 800151c:	701a      	strb	r2, [r3, #0]
								coincidencias = 0;
 800151e:	4ba2      	ldr	r3, [pc, #648]	; (80017a8 <recibirmensaje+0xaec>)
 8001520:	2200      	movs	r2, #0
 8001522:	701a      	strb	r2, [r3, #0]
								readyToSend=1;
 8001524:	4aa1      	ldr	r2, [pc, #644]	; (80017ac <recibirmensaje+0xaf0>)
 8001526:	7813      	ldrb	r3, [r2, #0]
 8001528:	f043 0310 	orr.w	r3, r3, #16
 800152c:	7013      	strb	r3, [r2, #0]
								espReadyToRecieve=0;
 800152e:	4a9f      	ldr	r2, [pc, #636]	; (80017ac <recibirmensaje+0xaf0>)
 8001530:	7813      	ldrb	r3, [r2, #0]
 8001532:	f36f 1345 	bfc	r3, #5, #1
 8001536:	7013      	strb	r3, [r2, #0]
								sendALIVE=0;
 8001538:	4a9d      	ldr	r2, [pc, #628]	; (80017b0 <recibirmensaje+0xaf4>)
 800153a:	7813      	ldrb	r3, [r2, #0]
 800153c:	f36f 0341 	bfc	r3, #1, #1
 8001540:	7013      	strb	r3, [r2, #0]
								timeToSendAlive=30;
 8001542:	4b9c      	ldr	r3, [pc, #624]	; (80017b4 <recibirmensaje+0xaf8>)
 8001544:	221e      	movs	r2, #30
 8001546:	701a      	strb	r2, [r3, #0]
								break;
 8001548:	e096      	b.n	8001678 <recibirmensaje+0x9bc>
				case 6:
					/*
					if(buf_rx[indRX_R]==bytesToSend-bytesToSend_aux+'0'){
						decoCIPSEND++;
					}*/
					if(buf_rx[indRX_R]== bytesToSend - bytesToSend_aux+'0'){
 800154a:	4b96      	ldr	r3, [pc, #600]	; (80017a4 <recibirmensaje+0xae8>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	461a      	mov	r2, r3
 8001552:	4b99      	ldr	r3, [pc, #612]	; (80017b8 <recibirmensaje+0xafc>)
 8001554:	5c9b      	ldrb	r3, [r3, r2]
 8001556:	b2db      	uxtb	r3, r3
 8001558:	461a      	mov	r2, r3
 800155a:	4b98      	ldr	r3, [pc, #608]	; (80017bc <recibirmensaje+0xb00>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	4619      	mov	r1, r3
 8001560:	4b97      	ldr	r3, [pc, #604]	; (80017c0 <recibirmensaje+0xb04>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	1acb      	subs	r3, r1, r3
 8001566:	3330      	adds	r3, #48	; 0x30
 8001568:	429a      	cmp	r2, r3
 800156a:	d106      	bne.n	800157a <recibirmensaje+0x8be>
											decoCIPSEND++;
 800156c:	4b8b      	ldr	r3, [pc, #556]	; (800179c <recibirmensaje+0xae0>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	3301      	adds	r3, #1
 8001572:	b2da      	uxtb	r2, r3
 8001574:	4b89      	ldr	r3, [pc, #548]	; (800179c <recibirmensaje+0xae0>)
 8001576:	701a      	strb	r2, [r3, #0]
							sendALIVE=0;
							timeToSendAlive=30;
							break;
						}
					}
				break;
 8001578:	e07b      	b.n	8001672 <recibirmensaje+0x9b6>
						if(!timeout2){
 800157a:	4b87      	ldr	r3, [pc, #540]	; (8001798 <recibirmensaje+0xadc>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d177      	bne.n	8001672 <recibirmensaje+0x9b6>
							decoCIPSEND=0;
 8001582:	4b86      	ldr	r3, [pc, #536]	; (800179c <recibirmensaje+0xae0>)
 8001584:	2200      	movs	r2, #0
 8001586:	701a      	strb	r2, [r3, #0]
							indRX_R=indRX_W;
 8001588:	4b85      	ldr	r3, [pc, #532]	; (80017a0 <recibirmensaje+0xae4>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	b2da      	uxtb	r2, r3
 800158e:	4b85      	ldr	r3, [pc, #532]	; (80017a4 <recibirmensaje+0xae8>)
 8001590:	701a      	strb	r2, [r3, #0]
							coincidencias = 0;
 8001592:	4b85      	ldr	r3, [pc, #532]	; (80017a8 <recibirmensaje+0xaec>)
 8001594:	2200      	movs	r2, #0
 8001596:	701a      	strb	r2, [r3, #0]
							readyToSend=1;
 8001598:	4a84      	ldr	r2, [pc, #528]	; (80017ac <recibirmensaje+0xaf0>)
 800159a:	7813      	ldrb	r3, [r2, #0]
 800159c:	f043 0310 	orr.w	r3, r3, #16
 80015a0:	7013      	strb	r3, [r2, #0]
							espReadyToRecieve=0;
 80015a2:	4a82      	ldr	r2, [pc, #520]	; (80017ac <recibirmensaje+0xaf0>)
 80015a4:	7813      	ldrb	r3, [r2, #0]
 80015a6:	f36f 1345 	bfc	r3, #5, #1
 80015aa:	7013      	strb	r3, [r2, #0]
							sendALIVE=0;
 80015ac:	4a80      	ldr	r2, [pc, #512]	; (80017b0 <recibirmensaje+0xaf4>)
 80015ae:	7813      	ldrb	r3, [r2, #0]
 80015b0:	f36f 0341 	bfc	r3, #1, #1
 80015b4:	7013      	strb	r3, [r2, #0]
							timeToSendAlive=30;
 80015b6:	4b7f      	ldr	r3, [pc, #508]	; (80017b4 <recibirmensaje+0xaf8>)
 80015b8:	221e      	movs	r2, #30
 80015ba:	701a      	strb	r2, [r3, #0]
							break;
 80015bc:	e05c      	b.n	8001678 <recibirmensaje+0x9bc>
				case 7:
					if(buf_rx[indRX_R]==CIPSEND4[coincidencias]){
 80015be:	4b79      	ldr	r3, [pc, #484]	; (80017a4 <recibirmensaje+0xae8>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	461a      	mov	r2, r3
 80015c6:	4b7c      	ldr	r3, [pc, #496]	; (80017b8 <recibirmensaje+0xafc>)
 80015c8:	5c9b      	ldrb	r3, [r3, r2]
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	4b76      	ldr	r3, [pc, #472]	; (80017a8 <recibirmensaje+0xaec>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	4619      	mov	r1, r3
 80015d2:	4b7c      	ldr	r3, [pc, #496]	; (80017c4 <recibirmensaje+0xb08>)
 80015d4:	5c5b      	ldrb	r3, [r3, r1]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d11d      	bne.n	8001616 <recibirmensaje+0x95a>
						coincidencias++;
 80015da:	4b73      	ldr	r3, [pc, #460]	; (80017a8 <recibirmensaje+0xaec>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	3301      	adds	r3, #1
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	4b71      	ldr	r3, [pc, #452]	; (80017a8 <recibirmensaje+0xaec>)
 80015e4:	701a      	strb	r2, [r3, #0]

						if(coincidencias>17){
 80015e6:	4b70      	ldr	r3, [pc, #448]	; (80017a8 <recibirmensaje+0xaec>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	2b11      	cmp	r3, #17
 80015ec:	d943      	bls.n	8001676 <recibirmensaje+0x9ba>
							coincidencias = 0;
 80015ee:	4b6e      	ldr	r3, [pc, #440]	; (80017a8 <recibirmensaje+0xaec>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	701a      	strb	r2, [r3, #0]
							decoCIPSEND=0;
 80015f4:	4b69      	ldr	r3, [pc, #420]	; (800179c <recibirmensaje+0xae0>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	701a      	strb	r2, [r3, #0]
							AT=8;
 80015fa:	4b73      	ldr	r3, [pc, #460]	; (80017c8 <recibirmensaje+0xb0c>)
 80015fc:	2208      	movs	r2, #8
 80015fe:	701a      	strb	r2, [r3, #0]
							readyToSend=1;
 8001600:	4a6a      	ldr	r2, [pc, #424]	; (80017ac <recibirmensaje+0xaf0>)
 8001602:	7813      	ldrb	r3, [r2, #0]
 8001604:	f043 0310 	orr.w	r3, r3, #16
 8001608:	7013      	strb	r3, [r2, #0]
							espReadyToRecieve=0;
 800160a:	4a68      	ldr	r2, [pc, #416]	; (80017ac <recibirmensaje+0xaf0>)
 800160c:	7813      	ldrb	r3, [r2, #0]
 800160e:	f36f 1345 	bfc	r3, #5, #1
 8001612:	7013      	strb	r3, [r2, #0]
							sendALIVE=0;
							timeToSendAlive=30;
							break;
						}
					}
				break;
 8001614:	e02f      	b.n	8001676 <recibirmensaje+0x9ba>
						if(!timeout2){
 8001616:	4b60      	ldr	r3, [pc, #384]	; (8001798 <recibirmensaje+0xadc>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d12b      	bne.n	8001676 <recibirmensaje+0x9ba>
							decoCIPSEND=0;
 800161e:	4b5f      	ldr	r3, [pc, #380]	; (800179c <recibirmensaje+0xae0>)
 8001620:	2200      	movs	r2, #0
 8001622:	701a      	strb	r2, [r3, #0]
							indRX_R=indRX_W;
 8001624:	4b5e      	ldr	r3, [pc, #376]	; (80017a0 <recibirmensaje+0xae4>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	b2da      	uxtb	r2, r3
 800162a:	4b5e      	ldr	r3, [pc, #376]	; (80017a4 <recibirmensaje+0xae8>)
 800162c:	701a      	strb	r2, [r3, #0]
							coincidencias = 0;
 800162e:	4b5e      	ldr	r3, [pc, #376]	; (80017a8 <recibirmensaje+0xaec>)
 8001630:	2200      	movs	r2, #0
 8001632:	701a      	strb	r2, [r3, #0]
							readyToSend=1;
 8001634:	4a5d      	ldr	r2, [pc, #372]	; (80017ac <recibirmensaje+0xaf0>)
 8001636:	7813      	ldrb	r3, [r2, #0]
 8001638:	f043 0310 	orr.w	r3, r3, #16
 800163c:	7013      	strb	r3, [r2, #0]
							espReadyToRecieve=0;
 800163e:	4a5b      	ldr	r2, [pc, #364]	; (80017ac <recibirmensaje+0xaf0>)
 8001640:	7813      	ldrb	r3, [r2, #0]
 8001642:	f36f 1345 	bfc	r3, #5, #1
 8001646:	7013      	strb	r3, [r2, #0]
							sendALIVE=0;
 8001648:	4a59      	ldr	r2, [pc, #356]	; (80017b0 <recibirmensaje+0xaf4>)
 800164a:	7813      	ldrb	r3, [r2, #0]
 800164c:	f36f 0341 	bfc	r3, #1, #1
 8001650:	7013      	strb	r3, [r2, #0]
							timeToSendAlive=30;
 8001652:	4b58      	ldr	r3, [pc, #352]	; (80017b4 <recibirmensaje+0xaf8>)
 8001654:	221e      	movs	r2, #30
 8001656:	701a      	strb	r2, [r3, #0]
							break;
 8001658:	e00e      	b.n	8001678 <recibirmensaje+0x9bc>
				break;
 800165a:	bf00      	nop
 800165c:	e160      	b.n	8001920 <recibirmensaje+0xc64>
				break;
 800165e:	bf00      	nop
 8001660:	e15e      	b.n	8001920 <recibirmensaje+0xc64>
				break;
 8001662:	bf00      	nop
 8001664:	e15c      	b.n	8001920 <recibirmensaje+0xc64>
				break;
 8001666:	bf00      	nop
 8001668:	e15a      	b.n	8001920 <recibirmensaje+0xc64>
				break;
 800166a:	bf00      	nop
 800166c:	e158      	b.n	8001920 <recibirmensaje+0xc64>
				break;
 800166e:	bf00      	nop
 8001670:	e156      	b.n	8001920 <recibirmensaje+0xc64>
				break;
 8001672:	bf00      	nop
 8001674:	e154      	b.n	8001920 <recibirmensaje+0xc64>
				break;
 8001676:	bf00      	nop
			}
		break;
 8001678:	e152      	b.n	8001920 <recibirmensaje+0xc64>
		case 8:
			switch(decoIPD){
 800167a:	4b54      	ldr	r3, [pc, #336]	; (80017cc <recibirmensaje+0xb10>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b05      	cmp	r3, #5
 8001680:	f200 8150 	bhi.w	8001924 <recibirmensaje+0xc68>
 8001684:	a201      	add	r2, pc, #4	; (adr r2, 800168c <recibirmensaje+0x9d0>)
 8001686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800168a:	bf00      	nop
 800168c:	080016a5 	.word	0x080016a5
 8001690:	08001707 	.word	0x08001707
 8001694:	08001729 	.word	0x08001729
 8001698:	080017dd 	.word	0x080017dd
 800169c:	08001817 	.word	0x08001817
 80016a0:	08001869 	.word	0x08001869
				case 0:
					if(buf_rx[indRX_R]==IPD[coincidencias]){
 80016a4:	4b3f      	ldr	r3, [pc, #252]	; (80017a4 <recibirmensaje+0xae8>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	461a      	mov	r2, r3
 80016ac:	4b42      	ldr	r3, [pc, #264]	; (80017b8 <recibirmensaje+0xafc>)
 80016ae:	5c9b      	ldrb	r3, [r3, r2]
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	4b3d      	ldr	r3, [pc, #244]	; (80017a8 <recibirmensaje+0xaec>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	4619      	mov	r1, r3
 80016b8:	4b45      	ldr	r3, [pc, #276]	; (80017d0 <recibirmensaje+0xb14>)
 80016ba:	5c5b      	ldrb	r3, [r3, r1]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d114      	bne.n	80016ea <recibirmensaje+0xa2e>
						coincidencias++;
 80016c0:	4b39      	ldr	r3, [pc, #228]	; (80017a8 <recibirmensaje+0xaec>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	3301      	adds	r3, #1
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	4b37      	ldr	r3, [pc, #220]	; (80017a8 <recibirmensaje+0xaec>)
 80016ca:	701a      	strb	r2, [r3, #0]

						if(coincidencias>4){
 80016cc:	4b36      	ldr	r3, [pc, #216]	; (80017a8 <recibirmensaje+0xaec>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b04      	cmp	r3, #4
 80016d2:	f240 8111 	bls.w	80018f8 <recibirmensaje+0xc3c>
							coincidencias = 0;
 80016d6:	4b34      	ldr	r3, [pc, #208]	; (80017a8 <recibirmensaje+0xaec>)
 80016d8:	2200      	movs	r2, #0
 80016da:	701a      	strb	r2, [r3, #0]
							decoIPD++;
 80016dc:	4b3b      	ldr	r3, [pc, #236]	; (80017cc <recibirmensaje+0xb10>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	3301      	adds	r3, #1
 80016e2:	b2da      	uxtb	r2, r3
 80016e4:	4b39      	ldr	r3, [pc, #228]	; (80017cc <recibirmensaje+0xb10>)
 80016e6:	701a      	strb	r2, [r3, #0]
							indRX_R=indRX_W;
							coincidencias=0;
							break;
						}
					}
				break;
 80016e8:	e106      	b.n	80018f8 <recibirmensaje+0xc3c>
						if(coincidencias>0){
 80016ea:	4b2f      	ldr	r3, [pc, #188]	; (80017a8 <recibirmensaje+0xaec>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f000 8102 	beq.w	80018f8 <recibirmensaje+0xc3c>
							indRX_R=indRX_W;
 80016f4:	4b2a      	ldr	r3, [pc, #168]	; (80017a0 <recibirmensaje+0xae4>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	4b2a      	ldr	r3, [pc, #168]	; (80017a4 <recibirmensaje+0xae8>)
 80016fc:	701a      	strb	r2, [r3, #0]
							coincidencias=0;
 80016fe:	4b2a      	ldr	r3, [pc, #168]	; (80017a8 <recibirmensaje+0xaec>)
 8001700:	2200      	movs	r2, #0
 8001702:	701a      	strb	r2, [r3, #0]
							break;
 8001704:	e0fd      	b.n	8001902 <recibirmensaje+0xc46>
				case 1:
					if(buf_rx[indRX_R]==':'){
 8001706:	4b27      	ldr	r3, [pc, #156]	; (80017a4 <recibirmensaje+0xae8>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	b2db      	uxtb	r3, r3
 800170c:	461a      	mov	r2, r3
 800170e:	4b2a      	ldr	r3, [pc, #168]	; (80017b8 <recibirmensaje+0xafc>)
 8001710:	5c9b      	ldrb	r3, [r3, r2]
 8001712:	b2db      	uxtb	r3, r3
 8001714:	2b3a      	cmp	r3, #58	; 0x3a
 8001716:	f040 80f1 	bne.w	80018fc <recibirmensaje+0xc40>
						decoIPD++;
 800171a:	4b2c      	ldr	r3, [pc, #176]	; (80017cc <recibirmensaje+0xb10>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	3301      	adds	r3, #1
 8001720:	b2da      	uxtb	r2, r3
 8001722:	4b2a      	ldr	r3, [pc, #168]	; (80017cc <recibirmensaje+0xb10>)
 8001724:	701a      	strb	r2, [r3, #0]
					}
				break;
 8001726:	e0e9      	b.n	80018fc <recibirmensaje+0xc40>
				case 2:
					if(buf_rx[indRX_R]==UNER[coincidencias]){
 8001728:	4b1e      	ldr	r3, [pc, #120]	; (80017a4 <recibirmensaje+0xae8>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	b2db      	uxtb	r3, r3
 800172e:	461a      	mov	r2, r3
 8001730:	4b21      	ldr	r3, [pc, #132]	; (80017b8 <recibirmensaje+0xafc>)
 8001732:	5c9b      	ldrb	r3, [r3, r2]
 8001734:	b2da      	uxtb	r2, r3
 8001736:	4b1c      	ldr	r3, [pc, #112]	; (80017a8 <recibirmensaje+0xaec>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	4619      	mov	r1, r3
 800173c:	4b25      	ldr	r3, [pc, #148]	; (80017d4 <recibirmensaje+0xb18>)
 800173e:	5c5b      	ldrb	r3, [r3, r1]
 8001740:	429a      	cmp	r2, r3
 8001742:	d117      	bne.n	8001774 <recibirmensaje+0xab8>
						coincidencias++;
 8001744:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <recibirmensaje+0xaec>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	3301      	adds	r3, #1
 800174a:	b2da      	uxtb	r2, r3
 800174c:	4b16      	ldr	r3, [pc, #88]	; (80017a8 <recibirmensaje+0xaec>)
 800174e:	701a      	strb	r2, [r3, #0]

						if(coincidencias>3){
 8001750:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <recibirmensaje+0xaec>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	2b03      	cmp	r3, #3
 8001756:	f240 80d3 	bls.w	8001900 <recibirmensaje+0xc44>
							coincidencias = 0;
 800175a:	4b13      	ldr	r3, [pc, #76]	; (80017a8 <recibirmensaje+0xaec>)
 800175c:	2200      	movs	r2, #0
 800175e:	701a      	strb	r2, [r3, #0]
							decoIPD++;
 8001760:	4b1a      	ldr	r3, [pc, #104]	; (80017cc <recibirmensaje+0xb10>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	3301      	adds	r3, #1
 8001766:	b2da      	uxtb	r2, r3
 8001768:	4b18      	ldr	r3, [pc, #96]	; (80017cc <recibirmensaje+0xb10>)
 800176a:	701a      	strb	r2, [r3, #0]
							cks='U'^'N'^'E'^'R';
 800176c:	4b1a      	ldr	r3, [pc, #104]	; (80017d8 <recibirmensaje+0xb1c>)
 800176e:	220c      	movs	r2, #12
 8001770:	701a      	strb	r2, [r3, #0]
							coincidencias=0;
							decoIPD=0;
							break;
						}
					}
				break;
 8001772:	e0c5      	b.n	8001900 <recibirmensaje+0xc44>
						if(coincidencias>0){
 8001774:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <recibirmensaje+0xaec>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	f000 80c1 	beq.w	8001900 <recibirmensaje+0xc44>
							indRX_R=indRX_W;
 800177e:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <recibirmensaje+0xae4>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	b2da      	uxtb	r2, r3
 8001784:	4b07      	ldr	r3, [pc, #28]	; (80017a4 <recibirmensaje+0xae8>)
 8001786:	701a      	strb	r2, [r3, #0]
							coincidencias=0;
 8001788:	4b07      	ldr	r3, [pc, #28]	; (80017a8 <recibirmensaje+0xaec>)
 800178a:	2200      	movs	r2, #0
 800178c:	701a      	strb	r2, [r3, #0]
							decoIPD=0;
 800178e:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <recibirmensaje+0xb10>)
 8001790:	2200      	movs	r2, #0
 8001792:	701a      	strb	r2, [r3, #0]
							break;
 8001794:	e0b5      	b.n	8001902 <recibirmensaje+0xc46>
 8001796:	bf00      	nop
 8001798:	200005ca 	.word	0x200005ca
 800179c:	200005c6 	.word	0x200005c6
 80017a0:	200005bd 	.word	0x200005bd
 80017a4:	200005be 	.word	0x200005be
 80017a8:	200005c2 	.word	0x200005c2
 80017ac:	200005f4 	.word	0x200005f4
 80017b0:	200005f8 	.word	0x200005f8
 80017b4:	200005d0 	.word	0x200005d0
 80017b8:	200001ec 	.word	0x200001ec
 80017bc:	200005ce 	.word	0x200005ce
 80017c0:	200005cf 	.word	0x200005cf
 80017c4:	0800755c 	.word	0x0800755c
 80017c8:	200005c5 	.word	0x200005c5
 80017cc:	200005c8 	.word	0x200005c8
 80017d0:	08007578 	.word	0x08007578
 80017d4:	08007580 	.word	0x08007580
 80017d8:	200005d1 	.word	0x200005d1
				case 3:
					bytesUNERprotocol=buf_rx[indRX_R];
 80017dc:	4b56      	ldr	r3, [pc, #344]	; (8001938 <recibirmensaje+0xc7c>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	461a      	mov	r2, r3
 80017e4:	4b55      	ldr	r3, [pc, #340]	; (800193c <recibirmensaje+0xc80>)
 80017e6:	5c9b      	ldrb	r3, [r3, r2]
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	4b55      	ldr	r3, [pc, #340]	; (8001940 <recibirmensaje+0xc84>)
 80017ec:	701a      	strb	r2, [r3, #0]
					decoIPD++;
 80017ee:	4b55      	ldr	r3, [pc, #340]	; (8001944 <recibirmensaje+0xc88>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	3301      	adds	r3, #1
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	4b53      	ldr	r3, [pc, #332]	; (8001944 <recibirmensaje+0xc88>)
 80017f8:	701a      	strb	r2, [r3, #0]
					cks^=buf_rx[indRX_R];
 80017fa:	4b4f      	ldr	r3, [pc, #316]	; (8001938 <recibirmensaje+0xc7c>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	461a      	mov	r2, r3
 8001802:	4b4e      	ldr	r3, [pc, #312]	; (800193c <recibirmensaje+0xc80>)
 8001804:	5c9b      	ldrb	r3, [r3, r2]
 8001806:	b2da      	uxtb	r2, r3
 8001808:	4b4f      	ldr	r3, [pc, #316]	; (8001948 <recibirmensaje+0xc8c>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	4053      	eors	r3, r2
 800180e:	b2da      	uxtb	r2, r3
 8001810:	4b4d      	ldr	r3, [pc, #308]	; (8001948 <recibirmensaje+0xc8c>)
 8001812:	701a      	strb	r2, [r3, #0]
				break;
 8001814:	e075      	b.n	8001902 <recibirmensaje+0xc46>
				case 4:
					if(buf_rx[indRX_R]==':'){
 8001816:	4b48      	ldr	r3, [pc, #288]	; (8001938 <recibirmensaje+0xc7c>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	b2db      	uxtb	r3, r3
 800181c:	461a      	mov	r2, r3
 800181e:	4b47      	ldr	r3, [pc, #284]	; (800193c <recibirmensaje+0xc80>)
 8001820:	5c9b      	ldrb	r3, [r3, r2]
 8001822:	b2db      	uxtb	r3, r3
 8001824:	2b3a      	cmp	r3, #58	; 0x3a
 8001826:	d113      	bne.n	8001850 <recibirmensaje+0xb94>
						decoIPD++;
 8001828:	4b46      	ldr	r3, [pc, #280]	; (8001944 <recibirmensaje+0xc88>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	3301      	adds	r3, #1
 800182e:	b2da      	uxtb	r2, r3
 8001830:	4b44      	ldr	r3, [pc, #272]	; (8001944 <recibirmensaje+0xc88>)
 8001832:	701a      	strb	r2, [r3, #0]
						cks^=buf_rx[indRX_R];
 8001834:	4b40      	ldr	r3, [pc, #256]	; (8001938 <recibirmensaje+0xc7c>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	b2db      	uxtb	r3, r3
 800183a:	461a      	mov	r2, r3
 800183c:	4b3f      	ldr	r3, [pc, #252]	; (800193c <recibirmensaje+0xc80>)
 800183e:	5c9b      	ldrb	r3, [r3, r2]
 8001840:	b2da      	uxtb	r2, r3
 8001842:	4b41      	ldr	r3, [pc, #260]	; (8001948 <recibirmensaje+0xc8c>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	4053      	eors	r3, r2
 8001848:	b2da      	uxtb	r2, r3
 800184a:	4b3f      	ldr	r3, [pc, #252]	; (8001948 <recibirmensaje+0xc8c>)
 800184c:	701a      	strb	r2, [r3, #0]
						indRX_R=indRX_W;
						coincidencias=0;
						decoIPD=0;
						break;
					}
				break;
 800184e:	e058      	b.n	8001902 <recibirmensaje+0xc46>
						indRX_R=indRX_W;
 8001850:	4b3e      	ldr	r3, [pc, #248]	; (800194c <recibirmensaje+0xc90>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	b2da      	uxtb	r2, r3
 8001856:	4b38      	ldr	r3, [pc, #224]	; (8001938 <recibirmensaje+0xc7c>)
 8001858:	701a      	strb	r2, [r3, #0]
						coincidencias=0;
 800185a:	4b3d      	ldr	r3, [pc, #244]	; (8001950 <recibirmensaje+0xc94>)
 800185c:	2200      	movs	r2, #0
 800185e:	701a      	strb	r2, [r3, #0]
						decoIPD=0;
 8001860:	4b38      	ldr	r3, [pc, #224]	; (8001944 <recibirmensaje+0xc88>)
 8001862:	2200      	movs	r2, #0
 8001864:	701a      	strb	r2, [r3, #0]
						break;
 8001866:	e04c      	b.n	8001902 <recibirmensaje+0xc46>
				case 5:
					if(contByte==1){
 8001868:	4b3a      	ldr	r3, [pc, #232]	; (8001954 <recibirmensaje+0xc98>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d104      	bne.n	800187a <recibirmensaje+0xbbe>
						cmdPosInBuf=indRX_R;
 8001870:	4b31      	ldr	r3, [pc, #196]	; (8001938 <recibirmensaje+0xc7c>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	b2da      	uxtb	r2, r3
 8001876:	4b38      	ldr	r3, [pc, #224]	; (8001958 <recibirmensaje+0xc9c>)
 8001878:	701a      	strb	r2, [r3, #0]
					}
					if(contByte<bytesUNERprotocol){
 800187a:	4b36      	ldr	r3, [pc, #216]	; (8001954 <recibirmensaje+0xc98>)
 800187c:	781a      	ldrb	r2, [r3, #0]
 800187e:	4b30      	ldr	r3, [pc, #192]	; (8001940 <recibirmensaje+0xc84>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	429a      	cmp	r2, r3
 8001884:	d213      	bcs.n	80018ae <recibirmensaje+0xbf2>
						cks^=buf_rx[indRX_R];
 8001886:	4b2c      	ldr	r3, [pc, #176]	; (8001938 <recibirmensaje+0xc7c>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	b2db      	uxtb	r3, r3
 800188c:	461a      	mov	r2, r3
 800188e:	4b2b      	ldr	r3, [pc, #172]	; (800193c <recibirmensaje+0xc80>)
 8001890:	5c9b      	ldrb	r3, [r3, r2]
 8001892:	b2da      	uxtb	r2, r3
 8001894:	4b2c      	ldr	r3, [pc, #176]	; (8001948 <recibirmensaje+0xc8c>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	4053      	eors	r3, r2
 800189a:	b2da      	uxtb	r2, r3
 800189c:	4b2a      	ldr	r3, [pc, #168]	; (8001948 <recibirmensaje+0xc8c>)
 800189e:	701a      	strb	r2, [r3, #0]
						contByte++;
 80018a0:	4b2c      	ldr	r3, [pc, #176]	; (8001954 <recibirmensaje+0xc98>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	3301      	adds	r3, #1
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	4b2a      	ldr	r3, [pc, #168]	; (8001954 <recibirmensaje+0xc98>)
 80018aa:	701a      	strb	r2, [r3, #0]
							contByte=1;
							coincidencias=0;
							decoIPD=0;
						}
					}
				break;
 80018ac:	e029      	b.n	8001902 <recibirmensaje+0xc46>
						if(cks==buf_rx[indRX_R]){
 80018ae:	4b22      	ldr	r3, [pc, #136]	; (8001938 <recibirmensaje+0xc7c>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	461a      	mov	r2, r3
 80018b6:	4b21      	ldr	r3, [pc, #132]	; (800193c <recibirmensaje+0xc80>)
 80018b8:	5c9b      	ldrb	r3, [r3, r2]
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	4b22      	ldr	r3, [pc, #136]	; (8001948 <recibirmensaje+0xc8c>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d10f      	bne.n	80018e4 <recibirmensaje+0xc28>
							DecodeComands((uint8_t*)&buf_rx, cmdPosInBuf);
 80018c4:	4b24      	ldr	r3, [pc, #144]	; (8001958 <recibirmensaje+0xc9c>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	4619      	mov	r1, r3
 80018ca:	481c      	ldr	r0, [pc, #112]	; (800193c <recibirmensaje+0xc80>)
 80018cc:	f000 f94e 	bl	8001b6c <DecodeComands>
							contByte=1;
 80018d0:	4b20      	ldr	r3, [pc, #128]	; (8001954 <recibirmensaje+0xc98>)
 80018d2:	2201      	movs	r2, #1
 80018d4:	701a      	strb	r2, [r3, #0]
							coincidencias=0;
 80018d6:	4b1e      	ldr	r3, [pc, #120]	; (8001950 <recibirmensaje+0xc94>)
 80018d8:	2200      	movs	r2, #0
 80018da:	701a      	strb	r2, [r3, #0]
							decoIPD=0;
 80018dc:	4b19      	ldr	r3, [pc, #100]	; (8001944 <recibirmensaje+0xc88>)
 80018de:	2200      	movs	r2, #0
 80018e0:	701a      	strb	r2, [r3, #0]
				break;
 80018e2:	e00e      	b.n	8001902 <recibirmensaje+0xc46>
							contByte=1;
 80018e4:	4b1b      	ldr	r3, [pc, #108]	; (8001954 <recibirmensaje+0xc98>)
 80018e6:	2201      	movs	r2, #1
 80018e8:	701a      	strb	r2, [r3, #0]
							coincidencias=0;
 80018ea:	4b19      	ldr	r3, [pc, #100]	; (8001950 <recibirmensaje+0xc94>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	701a      	strb	r2, [r3, #0]
							decoIPD=0;
 80018f0:	4b14      	ldr	r3, [pc, #80]	; (8001944 <recibirmensaje+0xc88>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	701a      	strb	r2, [r3, #0]
				break;
 80018f6:	e004      	b.n	8001902 <recibirmensaje+0xc46>
				break;
 80018f8:	bf00      	nop
 80018fa:	e013      	b.n	8001924 <recibirmensaje+0xc68>
				break;
 80018fc:	bf00      	nop
 80018fe:	e011      	b.n	8001924 <recibirmensaje+0xc68>
				break;
 8001900:	bf00      	nop
			}
		break;
 8001902:	e00f      	b.n	8001924 <recibirmensaje+0xc68>
		default:

		break;
 8001904:	bf00      	nop
 8001906:	e00e      	b.n	8001926 <recibirmensaje+0xc6a>
		break;
 8001908:	bf00      	nop
 800190a:	e00c      	b.n	8001926 <recibirmensaje+0xc6a>
		break;
 800190c:	bf00      	nop
 800190e:	e00a      	b.n	8001926 <recibirmensaje+0xc6a>
		break;
 8001910:	bf00      	nop
 8001912:	e008      	b.n	8001926 <recibirmensaje+0xc6a>
		break;
 8001914:	bf00      	nop
 8001916:	e006      	b.n	8001926 <recibirmensaje+0xc6a>
		break;
 8001918:	bf00      	nop
 800191a:	e004      	b.n	8001926 <recibirmensaje+0xc6a>
		break;
 800191c:	bf00      	nop
 800191e:	e002      	b.n	8001926 <recibirmensaje+0xc6a>
		break;
 8001920:	bf00      	nop
 8001922:	e000      	b.n	8001926 <recibirmensaje+0xc6a>
		break;
 8001924:	bf00      	nop
	}
	indRX_R++;
 8001926:	4b04      	ldr	r3, [pc, #16]	; (8001938 <recibirmensaje+0xc7c>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	b2db      	uxtb	r3, r3
 800192c:	3301      	adds	r3, #1
 800192e:	b2da      	uxtb	r2, r3
 8001930:	4b01      	ldr	r3, [pc, #4]	; (8001938 <recibirmensaje+0xc7c>)
 8001932:	701a      	strb	r2, [r3, #0]
}
 8001934:	bf00      	nop
 8001936:	bd80      	pop	{r7, pc}
 8001938:	200005be 	.word	0x200005be
 800193c:	200001ec 	.word	0x200001ec
 8001940:	200005d2 	.word	0x200005d2
 8001944:	200005c8 	.word	0x200005c8
 8001948:	200005d1 	.word	0x200005d1
 800194c:	200005bd 	.word	0x200005bd
 8001950:	200005c2 	.word	0x200005c2
 8001954:	20000000 	.word	0x20000000
 8001958:	200005d3 	.word	0x200005d3

0800195c <udpCom>:

void udpCom(uint8_t cmd){
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	71fb      	strb	r3, [r7, #7]

	if(readyToSend){
 8001966:	4b74      	ldr	r3, [pc, #464]	; (8001b38 <udpCom+0x1dc>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800196e:	b2db      	uxtb	r3, r3
 8001970:	2b00      	cmp	r3, #0
 8001972:	f000 80db 	beq.w	8001b2c <udpCom+0x1d0>
		switch(cmd){
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d002      	beq.n	8001982 <udpCom+0x26>
 800197c:	2b01      	cmp	r3, #1
 800197e:	d06c      	beq.n	8001a5a <udpCom+0xfe>
					readyToSend = 0;
				}
			break;*/
		}
	}
}
 8001980:	e0d5      	b.n	8001b2e <udpCom+0x1d2>
				if(!espReadyToRecieve){
 8001982:	4b6d      	ldr	r3, [pc, #436]	; (8001b38 <udpCom+0x1dc>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800198a:	b2db      	uxtb	r3, r3
 800198c:	2b00      	cmp	r3, #0
 800198e:	d132      	bne.n	80019f6 <udpCom+0x9a>
					AT=7;
 8001990:	4b6a      	ldr	r3, [pc, #424]	; (8001b3c <udpCom+0x1e0>)
 8001992:	2207      	movs	r2, #7
 8001994:	701a      	strb	r2, [r3, #0]
					memcpy((uint8_t*)&buf_tx[indTX_W],CIPSEND,11);
 8001996:	4b6a      	ldr	r3, [pc, #424]	; (8001b40 <udpCom+0x1e4>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	b2db      	uxtb	r3, r3
 800199c:	461a      	mov	r2, r3
 800199e:	4b69      	ldr	r3, [pc, #420]	; (8001b44 <udpCom+0x1e8>)
 80019a0:	4413      	add	r3, r2
 80019a2:	220b      	movs	r2, #11
 80019a4:	4968      	ldr	r1, [pc, #416]	; (8001b48 <udpCom+0x1ec>)
 80019a6:	4618      	mov	r0, r3
 80019a8:	f005 fcea 	bl	8007380 <memcpy>
					indTX_W+=11;
 80019ac:	4b64      	ldr	r3, [pc, #400]	; (8001b40 <udpCom+0x1e4>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	330b      	adds	r3, #11
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	4b62      	ldr	r3, [pc, #392]	; (8001b40 <udpCom+0x1e4>)
 80019b8:	701a      	strb	r2, [r3, #0]
					memcpy((uint8_t*)&buf_tx[indTX_W],"8\r\n",3);
 80019ba:	4b61      	ldr	r3, [pc, #388]	; (8001b40 <udpCom+0x1e4>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	461a      	mov	r2, r3
 80019c2:	4b60      	ldr	r3, [pc, #384]	; (8001b44 <udpCom+0x1e8>)
 80019c4:	4413      	add	r3, r2
 80019c6:	2203      	movs	r2, #3
 80019c8:	4960      	ldr	r1, [pc, #384]	; (8001b4c <udpCom+0x1f0>)
 80019ca:	4618      	mov	r0, r3
 80019cc:	f005 fcd8 	bl	8007380 <memcpy>
					indTX_W+=3;
 80019d0:	4b5b      	ldr	r3, [pc, #364]	; (8001b40 <udpCom+0x1e4>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	3303      	adds	r3, #3
 80019d8:	b2da      	uxtb	r2, r3
 80019da:	4b59      	ldr	r3, [pc, #356]	; (8001b40 <udpCom+0x1e4>)
 80019dc:	701a      	strb	r2, [r3, #0]
					bytesToSend=8;
 80019de:	4b5c      	ldr	r3, [pc, #368]	; (8001b50 <udpCom+0x1f4>)
 80019e0:	2208      	movs	r2, #8
 80019e2:	701a      	strb	r2, [r3, #0]
					timeout2 = 8;
 80019e4:	4b5b      	ldr	r3, [pc, #364]	; (8001b54 <udpCom+0x1f8>)
 80019e6:	2208      	movs	r2, #8
 80019e8:	701a      	strb	r2, [r3, #0]
					readyToSend = 0;
 80019ea:	4a53      	ldr	r2, [pc, #332]	; (8001b38 <udpCom+0x1dc>)
 80019ec:	7813      	ldrb	r3, [r2, #0]
 80019ee:	f36f 1304 	bfc	r3, #4, #1
 80019f2:	7013      	strb	r3, [r2, #0]
			break;
 80019f4:	e09b      	b.n	8001b2e <udpCom+0x1d2>
					memcpy((uint8_t*)&buf_tx[indTX_W],ALIVE,7);
 80019f6:	4b52      	ldr	r3, [pc, #328]	; (8001b40 <udpCom+0x1e4>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	461a      	mov	r2, r3
 80019fe:	4b51      	ldr	r3, [pc, #324]	; (8001b44 <udpCom+0x1e8>)
 8001a00:	4413      	add	r3, r2
 8001a02:	4a55      	ldr	r2, [pc, #340]	; (8001b58 <udpCom+0x1fc>)
 8001a04:	6810      	ldr	r0, [r2, #0]
 8001a06:	6018      	str	r0, [r3, #0]
 8001a08:	8891      	ldrh	r1, [r2, #4]
 8001a0a:	7992      	ldrb	r2, [r2, #6]
 8001a0c:	8099      	strh	r1, [r3, #4]
 8001a0e:	719a      	strb	r2, [r3, #6]
					indTX_W+=7;
 8001a10:	4b4b      	ldr	r3, [pc, #300]	; (8001b40 <udpCom+0x1e4>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	3307      	adds	r3, #7
 8001a18:	b2da      	uxtb	r2, r3
 8001a1a:	4b49      	ldr	r3, [pc, #292]	; (8001b40 <udpCom+0x1e4>)
 8001a1c:	701a      	strb	r2, [r3, #0]
					buf_tx[indTX_W]='U'^'N'^'E'^'R'^0x02^':'^0xF0;
 8001a1e:	4b48      	ldr	r3, [pc, #288]	; (8001b40 <udpCom+0x1e4>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	461a      	mov	r2, r3
 8001a26:	4b47      	ldr	r3, [pc, #284]	; (8001b44 <udpCom+0x1e8>)
 8001a28:	21c4      	movs	r1, #196	; 0xc4
 8001a2a:	5499      	strb	r1, [r3, r2]
					indTX_W+=1;
 8001a2c:	4b44      	ldr	r3, [pc, #272]	; (8001b40 <udpCom+0x1e4>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	3301      	adds	r3, #1
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	4b42      	ldr	r3, [pc, #264]	; (8001b40 <udpCom+0x1e4>)
 8001a38:	701a      	strb	r2, [r3, #0]
					espReadyToRecieve=0;
 8001a3a:	4a3f      	ldr	r2, [pc, #252]	; (8001b38 <udpCom+0x1dc>)
 8001a3c:	7813      	ldrb	r3, [r2, #0]
 8001a3e:	f36f 1345 	bfc	r3, #5, #1
 8001a42:	7013      	strb	r3, [r2, #0]
					sendALIVE=0;
 8001a44:	4a45      	ldr	r2, [pc, #276]	; (8001b5c <udpCom+0x200>)
 8001a46:	7813      	ldrb	r3, [r2, #0]
 8001a48:	f36f 0341 	bfc	r3, #1, #1
 8001a4c:	7013      	strb	r3, [r2, #0]
					readyToSend = 0;
 8001a4e:	4a3a      	ldr	r2, [pc, #232]	; (8001b38 <udpCom+0x1dc>)
 8001a50:	7813      	ldrb	r3, [r2, #0]
 8001a52:	f36f 1304 	bfc	r3, #4, #1
 8001a56:	7013      	strb	r3, [r2, #0]
			break;
 8001a58:	e069      	b.n	8001b2e <udpCom+0x1d2>
				if(!espReadyToRecieve){
 8001a5a:	4b37      	ldr	r3, [pc, #220]	; (8001b38 <udpCom+0x1dc>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d132      	bne.n	8001ace <udpCom+0x172>
					AT=7;
 8001a68:	4b34      	ldr	r3, [pc, #208]	; (8001b3c <udpCom+0x1e0>)
 8001a6a:	2207      	movs	r2, #7
 8001a6c:	701a      	strb	r2, [r3, #0]
					memcpy((uint8_t*)&buf_tx[indTX_W],CIPSEND,11);
 8001a6e:	4b34      	ldr	r3, [pc, #208]	; (8001b40 <udpCom+0x1e4>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	461a      	mov	r2, r3
 8001a76:	4b33      	ldr	r3, [pc, #204]	; (8001b44 <udpCom+0x1e8>)
 8001a78:	4413      	add	r3, r2
 8001a7a:	220b      	movs	r2, #11
 8001a7c:	4932      	ldr	r1, [pc, #200]	; (8001b48 <udpCom+0x1ec>)
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f005 fc7e 	bl	8007380 <memcpy>
					indTX_W+=11;
 8001a84:	4b2e      	ldr	r3, [pc, #184]	; (8001b40 <udpCom+0x1e4>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	330b      	adds	r3, #11
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	4b2c      	ldr	r3, [pc, #176]	; (8001b40 <udpCom+0x1e4>)
 8001a90:	701a      	strb	r2, [r3, #0]
					memcpy((uint8_t*)&buf_tx[indTX_W],"9\r\n",3);
 8001a92:	4b2b      	ldr	r3, [pc, #172]	; (8001b40 <udpCom+0x1e4>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4b2a      	ldr	r3, [pc, #168]	; (8001b44 <udpCom+0x1e8>)
 8001a9c:	4413      	add	r3, r2
 8001a9e:	2203      	movs	r2, #3
 8001aa0:	492f      	ldr	r1, [pc, #188]	; (8001b60 <udpCom+0x204>)
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f005 fc6c 	bl	8007380 <memcpy>
					indTX_W+=3;
 8001aa8:	4b25      	ldr	r3, [pc, #148]	; (8001b40 <udpCom+0x1e4>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	3303      	adds	r3, #3
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	4b23      	ldr	r3, [pc, #140]	; (8001b40 <udpCom+0x1e4>)
 8001ab4:	701a      	strb	r2, [r3, #0]
					bytesToSend=9;
 8001ab6:	4b26      	ldr	r3, [pc, #152]	; (8001b50 <udpCom+0x1f4>)
 8001ab8:	2209      	movs	r2, #9
 8001aba:	701a      	strb	r2, [r3, #0]
					timeout2 = 20;
 8001abc:	4b25      	ldr	r3, [pc, #148]	; (8001b54 <udpCom+0x1f8>)
 8001abe:	2214      	movs	r2, #20
 8001ac0:	701a      	strb	r2, [r3, #0]
					readyToSend = 0;
 8001ac2:	4a1d      	ldr	r2, [pc, #116]	; (8001b38 <udpCom+0x1dc>)
 8001ac4:	7813      	ldrb	r3, [r2, #0]
 8001ac6:	f36f 1304 	bfc	r3, #4, #1
 8001aca:	7013      	strb	r3, [r2, #0]
			break;
 8001acc:	e02f      	b.n	8001b2e <udpCom+0x1d2>
					memcpy((uint8_t*)&buf_tx[indTX_W],ACK_D0,9);
 8001ace:	4b1c      	ldr	r3, [pc, #112]	; (8001b40 <udpCom+0x1e4>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	4b1b      	ldr	r3, [pc, #108]	; (8001b44 <udpCom+0x1e8>)
 8001ad8:	4413      	add	r3, r2
 8001ada:	4922      	ldr	r1, [pc, #136]	; (8001b64 <udpCom+0x208>)
 8001adc:	461a      	mov	r2, r3
 8001ade:	460b      	mov	r3, r1
 8001ae0:	cb03      	ldmia	r3!, {r0, r1}
 8001ae2:	6010      	str	r0, [r2, #0]
 8001ae4:	6051      	str	r1, [r2, #4]
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	7213      	strb	r3, [r2, #8]
					indTX_W+=9;
 8001aea:	4b15      	ldr	r3, [pc, #84]	; (8001b40 <udpCom+0x1e4>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	3309      	adds	r3, #9
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <udpCom+0x1e4>)
 8001af6:	701a      	strb	r2, [r3, #0]
					buf_tx[indTX_W]='U'^'N'^'E'^'R'^0x03^':'^0xD0^0x0D;
 8001af8:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <udpCom+0x1e4>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	461a      	mov	r2, r3
 8001b00:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <udpCom+0x1e8>)
 8001b02:	21e8      	movs	r1, #232	; 0xe8
 8001b04:	5499      	strb	r1, [r3, r2]
					indTX_W+=1;
 8001b06:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <udpCom+0x1e4>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	b2da      	uxtb	r2, r3
 8001b10:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <udpCom+0x1e4>)
 8001b12:	701a      	strb	r2, [r3, #0]
					espReadyToRecieve=0;
 8001b14:	4a08      	ldr	r2, [pc, #32]	; (8001b38 <udpCom+0x1dc>)
 8001b16:	7813      	ldrb	r3, [r2, #0]
 8001b18:	f36f 1345 	bfc	r3, #5, #1
 8001b1c:	7013      	strb	r3, [r2, #0]
					duty++;
 8001b1e:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <udpCom+0x20c>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	3301      	adds	r3, #1
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <udpCom+0x20c>)
 8001b28:	701a      	strb	r2, [r3, #0]
			break;
 8001b2a:	e000      	b.n	8001b2e <udpCom+0x1d2>
	}
 8001b2c:	bf00      	nop
}
 8001b2e:	bf00      	nop
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	200005f4 	.word	0x200005f4
 8001b3c:	200005c5 	.word	0x200005c5
 8001b40:	200005bf 	.word	0x200005bf
 8001b44:	200002ec 	.word	0x200002ec
 8001b48:	0800753c 	.word	0x0800753c
 8001b4c:	080073c4 	.word	0x080073c4
 8001b50:	200005ce 	.word	0x200005ce
 8001b54:	200005ca 	.word	0x200005ca
 8001b58:	08007588 	.word	0x08007588
 8001b5c:	200005f8 	.word	0x200005f8
 8001b60:	080073c8 	.word	0x080073c8
 8001b64:	08007590 	.word	0x08007590
 8001b68:	200005c4 	.word	0x200005c4

08001b6c <DecodeComands>:

void DecodeComands(uint8_t *buffer,uint8_t indexCMD){
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	460b      	mov	r3, r1
 8001b76:	70fb      	strb	r3, [r7, #3]

	uint8_t i=1;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	73fb      	strb	r3, [r7, #15]

		switch(buffer[indexCMD]){
 8001b7c:	78fb      	ldrb	r3, [r7, #3]
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2bf1      	cmp	r3, #241	; 0xf1
 8001b86:	d055      	beq.n	8001c34 <DecodeComands+0xc8>
 8001b88:	2bf1      	cmp	r3, #241	; 0xf1
 8001b8a:	f300 820f 	bgt.w	8001fac <DecodeComands+0x440>
 8001b8e:	2bf0      	cmp	r3, #240	; 0xf0
 8001b90:	f000 8125 	beq.w	8001dde <DecodeComands+0x272>
 8001b94:	2bf0      	cmp	r3, #240	; 0xf0
 8001b96:	f300 8209 	bgt.w	8001fac <DecodeComands+0x440>
 8001b9a:	2bd5      	cmp	r3, #213	; 0xd5
 8001b9c:	d01c      	beq.n	8001bd8 <DecodeComands+0x6c>
 8001b9e:	2bd5      	cmp	r3, #213	; 0xd5
 8001ba0:	f300 8204 	bgt.w	8001fac <DecodeComands+0x440>
 8001ba4:	2bd0      	cmp	r3, #208	; 0xd0
 8001ba6:	f000 813d 	beq.w	8001e24 <DecodeComands+0x2b8>
 8001baa:	2bd0      	cmp	r3, #208	; 0xd0
 8001bac:	f300 81fe 	bgt.w	8001fac <DecodeComands+0x440>
 8001bb0:	2bc0      	cmp	r3, #192	; 0xc0
 8001bb2:	d07c      	beq.n	8001cae <DecodeComands+0x142>
 8001bb4:	2bc0      	cmp	r3, #192	; 0xc0
 8001bb6:	f300 81f9 	bgt.w	8001fac <DecodeComands+0x440>
 8001bba:	2ba1      	cmp	r3, #161	; 0xa1
 8001bbc:	f000 81f5 	beq.w	8001faa <DecodeComands+0x43e>
 8001bc0:	2bb3      	cmp	r3, #179	; 0xb3
 8001bc2:	d000      	beq.n	8001bc6 <DecodeComands+0x5a>
					comandoActual=0xD0;
					//comando=0xD0;
					readyToSend=1;
			break;
		}
}
 8001bc4:	e1f2      	b.n	8001fac <DecodeComands+0x440>
					comandoActual=0xB3;
 8001bc6:	4b8b      	ldr	r3, [pc, #556]	; (8001df4 <DecodeComands+0x288>)
 8001bc8:	22b3      	movs	r2, #179	; 0xb3
 8001bca:	701a      	strb	r2, [r3, #0]
					stop=1;
 8001bcc:	4a8a      	ldr	r2, [pc, #552]	; (8001df8 <DecodeComands+0x28c>)
 8001bce:	7813      	ldrb	r3, [r2, #0]
 8001bd0:	f043 0308 	orr.w	r3, r3, #8
 8001bd4:	7013      	strb	r3, [r2, #0]
			break;
 8001bd6:	e1e9      	b.n	8001fac <DecodeComands+0x440>
					PWM_motor2.u16[0]=300;
 8001bd8:	4b88      	ldr	r3, [pc, #544]	; (8001dfc <DecodeComands+0x290>)
 8001bda:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001bde:	801a      	strh	r2, [r3, #0]
					PWM_motor1.u16[0]=300;
 8001be0:	4b87      	ldr	r3, [pc, #540]	; (8001e00 <DecodeComands+0x294>)
 8001be2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001be6:	801a      	strh	r2, [r3, #0]
					__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,0);
 8001be8:	4b86      	ldr	r3, [pc, #536]	; (8001e04 <DecodeComands+0x298>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2200      	movs	r2, #0
 8001bee:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,PWM_motor1.u16[0]);
 8001bf0:	4b83      	ldr	r3, [pc, #524]	; (8001e00 <DecodeComands+0x294>)
 8001bf2:	881a      	ldrh	r2, [r3, #0]
 8001bf4:	4b83      	ldr	r3, [pc, #524]	; (8001e04 <DecodeComands+0x298>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	639a      	str	r2, [r3, #56]	; 0x38
					__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,PWM_motor2.u16[0]);
 8001bfa:	4b80      	ldr	r3, [pc, #512]	; (8001dfc <DecodeComands+0x290>)
 8001bfc:	881a      	ldrh	r2, [r3, #0]
 8001bfe:	4b81      	ldr	r3, [pc, #516]	; (8001e04 <DecodeComands+0x298>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	63da      	str	r2, [r3, #60]	; 0x3c
					__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,0);
 8001c04:	4b7f      	ldr	r3, [pc, #508]	; (8001e04 <DecodeComands+0x298>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	641a      	str	r2, [r3, #64]	; 0x40
					race=1;
 8001c0c:	4a7a      	ldr	r2, [pc, #488]	; (8001df8 <DecodeComands+0x28c>)
 8001c0e:	7813      	ldrb	r3, [r2, #0]
 8001c10:	f043 0301 	orr.w	r3, r3, #1
 8001c14:	7013      	strb	r3, [r2, #0]
					timeoutPID=2;
 8001c16:	4b7c      	ldr	r3, [pc, #496]	; (8001e08 <DecodeComands+0x29c>)
 8001c18:	2202      	movs	r2, #2
 8001c1a:	701a      	strb	r2, [r3, #0]
					duty=2;
 8001c1c:	4b7b      	ldr	r3, [pc, #492]	; (8001e0c <DecodeComands+0x2a0>)
 8001c1e:	2202      	movs	r2, #2
 8001c20:	701a      	strb	r2, [r3, #0]
					comandoActual=0xD5;
 8001c22:	4b74      	ldr	r3, [pc, #464]	; (8001df4 <DecodeComands+0x288>)
 8001c24:	22d5      	movs	r2, #213	; 0xd5
 8001c26:	701a      	strb	r2, [r3, #0]
					readyToSend=1;
 8001c28:	4a73      	ldr	r2, [pc, #460]	; (8001df8 <DecodeComands+0x28c>)
 8001c2a:	7813      	ldrb	r3, [r2, #0]
 8001c2c:	f043 0310 	orr.w	r3, r3, #16
 8001c30:	7013      	strb	r3, [r2, #0]
			break;
 8001c32:	e1bb      	b.n	8001fac <DecodeComands+0x440>
					PWM_motor1.u8[0]=buffer[indexCMD+i];
 8001c34:	78fa      	ldrb	r2, [r7, #3]
 8001c36:	7bfb      	ldrb	r3, [r7, #15]
 8001c38:	4413      	add	r3, r2
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4413      	add	r3, r2
 8001c40:	781a      	ldrb	r2, [r3, #0]
 8001c42:	4b6f      	ldr	r3, [pc, #444]	; (8001e00 <DecodeComands+0x294>)
 8001c44:	701a      	strb	r2, [r3, #0]
					i++;
 8001c46:	7bfb      	ldrb	r3, [r7, #15]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	73fb      	strb	r3, [r7, #15]
					PWM_motor1.u8[1]=buffer[indexCMD+i];
 8001c4c:	78fa      	ldrb	r2, [r7, #3]
 8001c4e:	7bfb      	ldrb	r3, [r7, #15]
 8001c50:	4413      	add	r3, r2
 8001c52:	461a      	mov	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4413      	add	r3, r2
 8001c58:	781a      	ldrb	r2, [r3, #0]
 8001c5a:	4b69      	ldr	r3, [pc, #420]	; (8001e00 <DecodeComands+0x294>)
 8001c5c:	705a      	strb	r2, [r3, #1]
					i++;
 8001c5e:	7bfb      	ldrb	r3, [r7, #15]
 8001c60:	3301      	adds	r3, #1
 8001c62:	73fb      	strb	r3, [r7, #15]
					PWM_motor1.u8[2]=buffer[indexCMD+i];
 8001c64:	78fa      	ldrb	r2, [r7, #3]
 8001c66:	7bfb      	ldrb	r3, [r7, #15]
 8001c68:	4413      	add	r3, r2
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4413      	add	r3, r2
 8001c70:	781a      	ldrb	r2, [r3, #0]
 8001c72:	4b63      	ldr	r3, [pc, #396]	; (8001e00 <DecodeComands+0x294>)
 8001c74:	709a      	strb	r2, [r3, #2]
					i++;
 8001c76:	7bfb      	ldrb	r3, [r7, #15]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	73fb      	strb	r3, [r7, #15]
					PWM_motor1.u8[3]=buffer[indexCMD+i];
 8001c7c:	78fa      	ldrb	r2, [r7, #3]
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
 8001c80:	4413      	add	r3, r2
 8001c82:	461a      	mov	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4413      	add	r3, r2
 8001c88:	781a      	ldrb	r2, [r3, #0]
 8001c8a:	4b5d      	ldr	r3, [pc, #372]	; (8001e00 <DecodeComands+0x294>)
 8001c8c:	70da      	strb	r2, [r3, #3]
					PWM_motor2.u32=PWM_motor1.u32;
 8001c8e:	4b5c      	ldr	r3, [pc, #368]	; (8001e00 <DecodeComands+0x294>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a5a      	ldr	r2, [pc, #360]	; (8001dfc <DecodeComands+0x290>)
 8001c94:	6013      	str	r3, [r2, #0]
					comandoActual=0xF1;
 8001c96:	4b57      	ldr	r3, [pc, #348]	; (8001df4 <DecodeComands+0x288>)
 8001c98:	22f1      	movs	r2, #241	; 0xf1
 8001c9a:	701a      	strb	r2, [r3, #0]
					race=1;
 8001c9c:	4a56      	ldr	r2, [pc, #344]	; (8001df8 <DecodeComands+0x28c>)
 8001c9e:	7813      	ldrb	r3, [r2, #0]
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	7013      	strb	r3, [r2, #0]
					timeoutPID=2;
 8001ca6:	4b58      	ldr	r3, [pc, #352]	; (8001e08 <DecodeComands+0x29c>)
 8001ca8:	2202      	movs	r2, #2
 8001caa:	701a      	strb	r2, [r3, #0]
			break;
 8001cac:	e17e      	b.n	8001fac <DecodeComands+0x440>
					Kp.u8[0]=buffer[indexCMD+i];
 8001cae:	78fa      	ldrb	r2, [r7, #3]
 8001cb0:	7bfb      	ldrb	r3, [r7, #15]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4413      	add	r3, r2
 8001cba:	781a      	ldrb	r2, [r3, #0]
 8001cbc:	4b54      	ldr	r3, [pc, #336]	; (8001e10 <DecodeComands+0x2a4>)
 8001cbe:	701a      	strb	r2, [r3, #0]
					i++;
 8001cc0:	7bfb      	ldrb	r3, [r7, #15]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	73fb      	strb	r3, [r7, #15]
					Kp.u8[1]=buffer[indexCMD+i];
 8001cc6:	78fa      	ldrb	r2, [r7, #3]
 8001cc8:	7bfb      	ldrb	r3, [r7, #15]
 8001cca:	4413      	add	r3, r2
 8001ccc:	461a      	mov	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	781a      	ldrb	r2, [r3, #0]
 8001cd4:	4b4e      	ldr	r3, [pc, #312]	; (8001e10 <DecodeComands+0x2a4>)
 8001cd6:	705a      	strb	r2, [r3, #1]
					i++;
 8001cd8:	7bfb      	ldrb	r3, [r7, #15]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	73fb      	strb	r3, [r7, #15]
					Kp.u8[2]=buffer[indexCMD+i];
 8001cde:	78fa      	ldrb	r2, [r7, #3]
 8001ce0:	7bfb      	ldrb	r3, [r7, #15]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4413      	add	r3, r2
 8001cea:	781a      	ldrb	r2, [r3, #0]
 8001cec:	4b48      	ldr	r3, [pc, #288]	; (8001e10 <DecodeComands+0x2a4>)
 8001cee:	709a      	strb	r2, [r3, #2]
					i++;
 8001cf0:	7bfb      	ldrb	r3, [r7, #15]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	73fb      	strb	r3, [r7, #15]
					Kp.u8[3]=buffer[indexCMD+i];
 8001cf6:	78fa      	ldrb	r2, [r7, #3]
 8001cf8:	7bfb      	ldrb	r3, [r7, #15]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4413      	add	r3, r2
 8001d02:	781a      	ldrb	r2, [r3, #0]
 8001d04:	4b42      	ldr	r3, [pc, #264]	; (8001e10 <DecodeComands+0x2a4>)
 8001d06:	70da      	strb	r2, [r3, #3]
					i++;
 8001d08:	7bfb      	ldrb	r3, [r7, #15]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	73fb      	strb	r3, [r7, #15]
					Kd.u8[0]=buffer[indexCMD+i];
 8001d0e:	78fa      	ldrb	r2, [r7, #3]
 8001d10:	7bfb      	ldrb	r3, [r7, #15]
 8001d12:	4413      	add	r3, r2
 8001d14:	461a      	mov	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4413      	add	r3, r2
 8001d1a:	781a      	ldrb	r2, [r3, #0]
 8001d1c:	4b3d      	ldr	r3, [pc, #244]	; (8001e14 <DecodeComands+0x2a8>)
 8001d1e:	701a      	strb	r2, [r3, #0]
					i++;
 8001d20:	7bfb      	ldrb	r3, [r7, #15]
 8001d22:	3301      	adds	r3, #1
 8001d24:	73fb      	strb	r3, [r7, #15]
					Kd.u8[1]=buffer[indexCMD+i];
 8001d26:	78fa      	ldrb	r2, [r7, #3]
 8001d28:	7bfb      	ldrb	r3, [r7, #15]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4413      	add	r3, r2
 8001d32:	781a      	ldrb	r2, [r3, #0]
 8001d34:	4b37      	ldr	r3, [pc, #220]	; (8001e14 <DecodeComands+0x2a8>)
 8001d36:	705a      	strb	r2, [r3, #1]
					i++;
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	73fb      	strb	r3, [r7, #15]
					Kd.u8[2]=buffer[indexCMD+i];
 8001d3e:	78fa      	ldrb	r2, [r7, #3]
 8001d40:	7bfb      	ldrb	r3, [r7, #15]
 8001d42:	4413      	add	r3, r2
 8001d44:	461a      	mov	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4413      	add	r3, r2
 8001d4a:	781a      	ldrb	r2, [r3, #0]
 8001d4c:	4b31      	ldr	r3, [pc, #196]	; (8001e14 <DecodeComands+0x2a8>)
 8001d4e:	709a      	strb	r2, [r3, #2]
					i++;
 8001d50:	7bfb      	ldrb	r3, [r7, #15]
 8001d52:	3301      	adds	r3, #1
 8001d54:	73fb      	strb	r3, [r7, #15]
					Kd.u8[3]=buffer[indexCMD+i];
 8001d56:	78fa      	ldrb	r2, [r7, #3]
 8001d58:	7bfb      	ldrb	r3, [r7, #15]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4413      	add	r3, r2
 8001d62:	781a      	ldrb	r2, [r3, #0]
 8001d64:	4b2b      	ldr	r3, [pc, #172]	; (8001e14 <DecodeComands+0x2a8>)
 8001d66:	70da      	strb	r2, [r3, #3]
					i++;
 8001d68:	7bfb      	ldrb	r3, [r7, #15]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	73fb      	strb	r3, [r7, #15]
					Ki.u8[0]=buffer[indexCMD+i];
 8001d6e:	78fa      	ldrb	r2, [r7, #3]
 8001d70:	7bfb      	ldrb	r3, [r7, #15]
 8001d72:	4413      	add	r3, r2
 8001d74:	461a      	mov	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4413      	add	r3, r2
 8001d7a:	781a      	ldrb	r2, [r3, #0]
 8001d7c:	4b26      	ldr	r3, [pc, #152]	; (8001e18 <DecodeComands+0x2ac>)
 8001d7e:	701a      	strb	r2, [r3, #0]
					i++;
 8001d80:	7bfb      	ldrb	r3, [r7, #15]
 8001d82:	3301      	adds	r3, #1
 8001d84:	73fb      	strb	r3, [r7, #15]
					Ki.u8[1]=buffer[indexCMD+i];
 8001d86:	78fa      	ldrb	r2, [r7, #3]
 8001d88:	7bfb      	ldrb	r3, [r7, #15]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4413      	add	r3, r2
 8001d92:	781a      	ldrb	r2, [r3, #0]
 8001d94:	4b20      	ldr	r3, [pc, #128]	; (8001e18 <DecodeComands+0x2ac>)
 8001d96:	705a      	strb	r2, [r3, #1]
					i++;
 8001d98:	7bfb      	ldrb	r3, [r7, #15]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	73fb      	strb	r3, [r7, #15]
					Ki.u8[2]=buffer[indexCMD+i];
 8001d9e:	78fa      	ldrb	r2, [r7, #3]
 8001da0:	7bfb      	ldrb	r3, [r7, #15]
 8001da2:	4413      	add	r3, r2
 8001da4:	461a      	mov	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4413      	add	r3, r2
 8001daa:	781a      	ldrb	r2, [r3, #0]
 8001dac:	4b1a      	ldr	r3, [pc, #104]	; (8001e18 <DecodeComands+0x2ac>)
 8001dae:	709a      	strb	r2, [r3, #2]
					i++;
 8001db0:	7bfb      	ldrb	r3, [r7, #15]
 8001db2:	3301      	adds	r3, #1
 8001db4:	73fb      	strb	r3, [r7, #15]
					Ki.u8[3]=buffer[indexCMD+i];
 8001db6:	78fa      	ldrb	r2, [r7, #3]
 8001db8:	7bfb      	ldrb	r3, [r7, #15]
 8001dba:	4413      	add	r3, r2
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	781a      	ldrb	r2, [r3, #0]
 8001dc4:	4b14      	ldr	r3, [pc, #80]	; (8001e18 <DecodeComands+0x2ac>)
 8001dc6:	70da      	strb	r2, [r3, #3]
					i++;
 8001dc8:	7bfb      	ldrb	r3, [r7, #15]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	73fb      	strb	r3, [r7, #15]
					HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001dce:	2120      	movs	r1, #32
 8001dd0:	4812      	ldr	r0, [pc, #72]	; (8001e1c <DecodeComands+0x2b0>)
 8001dd2:	f002 fe68 	bl	8004aa6 <HAL_GPIO_TogglePin>
					comandoActual=0xC0;
 8001dd6:	4b07      	ldr	r3, [pc, #28]	; (8001df4 <DecodeComands+0x288>)
 8001dd8:	22c0      	movs	r2, #192	; 0xc0
 8001dda:	701a      	strb	r2, [r3, #0]
			break;
 8001ddc:	e0e6      	b.n	8001fac <DecodeComands+0x440>
					sendALIVE=1;
 8001dde:	4a10      	ldr	r2, [pc, #64]	; (8001e20 <DecodeComands+0x2b4>)
 8001de0:	7813      	ldrb	r3, [r2, #0]
 8001de2:	f043 0302 	orr.w	r3, r3, #2
 8001de6:	7013      	strb	r3, [r2, #0]
					readyToSend=1;
 8001de8:	4a03      	ldr	r2, [pc, #12]	; (8001df8 <DecodeComands+0x28c>)
 8001dea:	7813      	ldrb	r3, [r2, #0]
 8001dec:	f043 0310 	orr.w	r3, r3, #16
 8001df0:	7013      	strb	r3, [r2, #0]
			break;
 8001df2:	e0db      	b.n	8001fac <DecodeComands+0x440>
 8001df4:	200005d4 	.word	0x200005d4
 8001df8:	200005f4 	.word	0x200005f4
 8001dfc:	200005dc 	.word	0x200005dc
 8001e00:	200005d8 	.word	0x200005d8
 8001e04:	200000d4 	.word	0x200000d4
 8001e08:	200005cc 	.word	0x200005cc
 8001e0c:	200005c4 	.word	0x200005c4
 8001e10:	200005e8 	.word	0x200005e8
 8001e14:	200005ec 	.word	0x200005ec
 8001e18:	200005f0 	.word	0x200005f0
 8001e1c:	40020000 	.word	0x40020000
 8001e20:	200005f8 	.word	0x200005f8
					PWM_motor1.u8[0]=buffer[indexCMD+i];
 8001e24:	78fa      	ldrb	r2, [r7, #3]
 8001e26:	7bfb      	ldrb	r3, [r7, #15]
 8001e28:	4413      	add	r3, r2
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4413      	add	r3, r2
 8001e30:	781a      	ldrb	r2, [r3, #0]
 8001e32:	4b60      	ldr	r3, [pc, #384]	; (8001fb4 <DecodeComands+0x448>)
 8001e34:	701a      	strb	r2, [r3, #0]
					i++;
 8001e36:	7bfb      	ldrb	r3, [r7, #15]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	73fb      	strb	r3, [r7, #15]
					PWM_motor1.u8[1]=buffer[indexCMD+i];
 8001e3c:	78fa      	ldrb	r2, [r7, #3]
 8001e3e:	7bfb      	ldrb	r3, [r7, #15]
 8001e40:	4413      	add	r3, r2
 8001e42:	461a      	mov	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4413      	add	r3, r2
 8001e48:	781a      	ldrb	r2, [r3, #0]
 8001e4a:	4b5a      	ldr	r3, [pc, #360]	; (8001fb4 <DecodeComands+0x448>)
 8001e4c:	705a      	strb	r2, [r3, #1]
					i++;
 8001e4e:	7bfb      	ldrb	r3, [r7, #15]
 8001e50:	3301      	adds	r3, #1
 8001e52:	73fb      	strb	r3, [r7, #15]
					PWM_motor1.u8[2]=buffer[indexCMD+i];
 8001e54:	78fa      	ldrb	r2, [r7, #3]
 8001e56:	7bfb      	ldrb	r3, [r7, #15]
 8001e58:	4413      	add	r3, r2
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4413      	add	r3, r2
 8001e60:	781a      	ldrb	r2, [r3, #0]
 8001e62:	4b54      	ldr	r3, [pc, #336]	; (8001fb4 <DecodeComands+0x448>)
 8001e64:	709a      	strb	r2, [r3, #2]
					i++;
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	73fb      	strb	r3, [r7, #15]
					PWM_motor1.u8[3]=buffer[indexCMD+i];
 8001e6c:	78fa      	ldrb	r2, [r7, #3]
 8001e6e:	7bfb      	ldrb	r3, [r7, #15]
 8001e70:	4413      	add	r3, r2
 8001e72:	461a      	mov	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4413      	add	r3, r2
 8001e78:	781a      	ldrb	r2, [r3, #0]
 8001e7a:	4b4e      	ldr	r3, [pc, #312]	; (8001fb4 <DecodeComands+0x448>)
 8001e7c:	70da      	strb	r2, [r3, #3]
					i++;
 8001e7e:	7bfb      	ldrb	r3, [r7, #15]
 8001e80:	3301      	adds	r3, #1
 8001e82:	73fb      	strb	r3, [r7, #15]
					PWM_motor2.u8[0]=buffer[indexCMD+i];
 8001e84:	78fa      	ldrb	r2, [r7, #3]
 8001e86:	7bfb      	ldrb	r3, [r7, #15]
 8001e88:	4413      	add	r3, r2
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4413      	add	r3, r2
 8001e90:	781a      	ldrb	r2, [r3, #0]
 8001e92:	4b49      	ldr	r3, [pc, #292]	; (8001fb8 <DecodeComands+0x44c>)
 8001e94:	701a      	strb	r2, [r3, #0]
					i++;
 8001e96:	7bfb      	ldrb	r3, [r7, #15]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	73fb      	strb	r3, [r7, #15]
					PWM_motor2.u8[1]=buffer[indexCMD+i];
 8001e9c:	78fa      	ldrb	r2, [r7, #3]
 8001e9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	781a      	ldrb	r2, [r3, #0]
 8001eaa:	4b43      	ldr	r3, [pc, #268]	; (8001fb8 <DecodeComands+0x44c>)
 8001eac:	705a      	strb	r2, [r3, #1]
					i++;
 8001eae:	7bfb      	ldrb	r3, [r7, #15]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	73fb      	strb	r3, [r7, #15]
					PWM_motor2.u8[2]=buffer[indexCMD+i];
 8001eb4:	78fa      	ldrb	r2, [r7, #3]
 8001eb6:	7bfb      	ldrb	r3, [r7, #15]
 8001eb8:	4413      	add	r3, r2
 8001eba:	461a      	mov	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	781a      	ldrb	r2, [r3, #0]
 8001ec2:	4b3d      	ldr	r3, [pc, #244]	; (8001fb8 <DecodeComands+0x44c>)
 8001ec4:	709a      	strb	r2, [r3, #2]
					i++;
 8001ec6:	7bfb      	ldrb	r3, [r7, #15]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	73fb      	strb	r3, [r7, #15]
					PWM_motor2.u8[3]=buffer[indexCMD+i];
 8001ecc:	78fa      	ldrb	r2, [r7, #3]
 8001ece:	7bfb      	ldrb	r3, [r7, #15]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	781a      	ldrb	r2, [r3, #0]
 8001eda:	4b37      	ldr	r3, [pc, #220]	; (8001fb8 <DecodeComands+0x44c>)
 8001edc:	70da      	strb	r2, [r3, #3]
					i++;
 8001ede:	7bfb      	ldrb	r3, [r7, #15]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	73fb      	strb	r3, [r7, #15]
					jobTime.u8[0]=buffer[indexCMD+i];
 8001ee4:	78fa      	ldrb	r2, [r7, #3]
 8001ee6:	7bfb      	ldrb	r3, [r7, #15]
 8001ee8:	4413      	add	r3, r2
 8001eea:	461a      	mov	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4413      	add	r3, r2
 8001ef0:	781a      	ldrb	r2, [r3, #0]
 8001ef2:	4b32      	ldr	r3, [pc, #200]	; (8001fbc <DecodeComands+0x450>)
 8001ef4:	701a      	strb	r2, [r3, #0]
					i++;
 8001ef6:	7bfb      	ldrb	r3, [r7, #15]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	73fb      	strb	r3, [r7, #15]
					jobTime.u8[1]=buffer[indexCMD+i];
 8001efc:	78fa      	ldrb	r2, [r7, #3]
 8001efe:	7bfb      	ldrb	r3, [r7, #15]
 8001f00:	4413      	add	r3, r2
 8001f02:	461a      	mov	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4413      	add	r3, r2
 8001f08:	781a      	ldrb	r2, [r3, #0]
 8001f0a:	4b2c      	ldr	r3, [pc, #176]	; (8001fbc <DecodeComands+0x450>)
 8001f0c:	705a      	strb	r2, [r3, #1]
					i++;
 8001f0e:	7bfb      	ldrb	r3, [r7, #15]
 8001f10:	3301      	adds	r3, #1
 8001f12:	73fb      	strb	r3, [r7, #15]
					jobTime.u8[2]=buffer[indexCMD+i];
 8001f14:	78fa      	ldrb	r2, [r7, #3]
 8001f16:	7bfb      	ldrb	r3, [r7, #15]
 8001f18:	4413      	add	r3, r2
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4413      	add	r3, r2
 8001f20:	781a      	ldrb	r2, [r3, #0]
 8001f22:	4b26      	ldr	r3, [pc, #152]	; (8001fbc <DecodeComands+0x450>)
 8001f24:	709a      	strb	r2, [r3, #2]
					i++;
 8001f26:	7bfb      	ldrb	r3, [r7, #15]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	73fb      	strb	r3, [r7, #15]
					jobTime.u8[3]=buffer[indexCMD+i];
 8001f2c:	78fa      	ldrb	r2, [r7, #3]
 8001f2e:	7bfb      	ldrb	r3, [r7, #15]
 8001f30:	4413      	add	r3, r2
 8001f32:	461a      	mov	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4413      	add	r3, r2
 8001f38:	781a      	ldrb	r2, [r3, #0]
 8001f3a:	4b20      	ldr	r3, [pc, #128]	; (8001fbc <DecodeComands+0x450>)
 8001f3c:	70da      	strb	r2, [r3, #3]
					i++;
 8001f3e:	7bfb      	ldrb	r3, [r7, #15]
 8001f40:	3301      	adds	r3, #1
 8001f42:	73fb      	strb	r3, [r7, #15]
					jobTime.u32=jobTime.u32/100;
 8001f44:	4b1d      	ldr	r3, [pc, #116]	; (8001fbc <DecodeComands+0x450>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a1d      	ldr	r2, [pc, #116]	; (8001fc0 <DecodeComands+0x454>)
 8001f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4e:	095b      	lsrs	r3, r3, #5
 8001f50:	4a1a      	ldr	r2, [pc, #104]	; (8001fbc <DecodeComands+0x450>)
 8001f52:	6013      	str	r3, [r2, #0]
					__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,0);
 8001f54:	4b1b      	ldr	r3, [pc, #108]	; (8001fc4 <DecodeComands+0x458>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,PWM_motor1.u16[0]);
 8001f5c:	4b15      	ldr	r3, [pc, #84]	; (8001fb4 <DecodeComands+0x448>)
 8001f5e:	881a      	ldrh	r2, [r3, #0]
 8001f60:	4b18      	ldr	r3, [pc, #96]	; (8001fc4 <DecodeComands+0x458>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	639a      	str	r2, [r3, #56]	; 0x38
					__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,PWM_motor2.u16[0]);
 8001f66:	4b14      	ldr	r3, [pc, #80]	; (8001fb8 <DecodeComands+0x44c>)
 8001f68:	881a      	ldrh	r2, [r3, #0]
 8001f6a:	4b16      	ldr	r3, [pc, #88]	; (8001fc4 <DecodeComands+0x458>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	63da      	str	r2, [r3, #60]	; 0x3c
					__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,0);
 8001f70:	4b14      	ldr	r3, [pc, #80]	; (8001fc4 <DecodeComands+0x458>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2200      	movs	r2, #0
 8001f76:	641a      	str	r2, [r3, #64]	; 0x40
					race=1;
 8001f78:	4a13      	ldr	r2, [pc, #76]	; (8001fc8 <DecodeComands+0x45c>)
 8001f7a:	7813      	ldrb	r3, [r2, #0]
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	7013      	strb	r3, [r2, #0]
					timeoutPID=1;
 8001f82:	4b12      	ldr	r3, [pc, #72]	; (8001fcc <DecodeComands+0x460>)
 8001f84:	2201      	movs	r2, #1
 8001f86:	701a      	strb	r2, [r3, #0]
					killRace=1;
 8001f88:	4a0f      	ldr	r2, [pc, #60]	; (8001fc8 <DecodeComands+0x45c>)
 8001f8a:	7813      	ldrb	r3, [r2, #0]
 8001f8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f90:	7013      	strb	r3, [r2, #0]
					duty=2;
 8001f92:	4b0f      	ldr	r3, [pc, #60]	; (8001fd0 <DecodeComands+0x464>)
 8001f94:	2202      	movs	r2, #2
 8001f96:	701a      	strb	r2, [r3, #0]
					comandoActual=0xD0;
 8001f98:	4b0e      	ldr	r3, [pc, #56]	; (8001fd4 <DecodeComands+0x468>)
 8001f9a:	22d0      	movs	r2, #208	; 0xd0
 8001f9c:	701a      	strb	r2, [r3, #0]
					readyToSend=1;
 8001f9e:	4a0a      	ldr	r2, [pc, #40]	; (8001fc8 <DecodeComands+0x45c>)
 8001fa0:	7813      	ldrb	r3, [r2, #0]
 8001fa2:	f043 0310 	orr.w	r3, r3, #16
 8001fa6:	7013      	strb	r3, [r2, #0]
			break;
 8001fa8:	e000      	b.n	8001fac <DecodeComands+0x440>
		break;
 8001faa:	bf00      	nop
}
 8001fac:	bf00      	nop
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	200005d8 	.word	0x200005d8
 8001fb8:	200005dc 	.word	0x200005dc
 8001fbc:	200005e0 	.word	0x200005e0
 8001fc0:	51eb851f 	.word	0x51eb851f
 8001fc4:	200000d4 	.word	0x200000d4
 8001fc8:	200005f4 	.word	0x200005f4
 8001fcc:	200005cc 	.word	0x200005cc
 8001fd0:	200005c4 	.word	0x200005c4
 8001fd4:	200005d4 	.word	0x200005d4

08001fd8 <findLine>:

uint8_t posMINCenter=0,posMINRight=0,posMINLeft=0;
uint16_t sensorValue=0;
float xMin=0,fx2_fx3,fx2_fx1,x2_x1,x2_x3,x2_x1cuad,x2_x3cuad,denominador, numerador, cuenta;

void findLine(){
 8001fd8:	b480      	push	{r7}
 8001fda:	b08b      	sub	sp, #44	; 0x2c
 8001fdc:	af00      	add	r7, sp, #0

	float aux[9];
	uint8_t f=0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		sensorValue = ADCData[0][0];
 8001fe4:	4b8c      	ldr	r3, [pc, #560]	; (8002218 <findLine+0x240>)
 8001fe6:	881b      	ldrh	r3, [r3, #0]
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	4b8c      	ldr	r3, [pc, #560]	; (800221c <findLine+0x244>)
 8001fec:	801a      	strh	r2, [r3, #0]


		posMINCenter=0;
 8001fee:	4b8c      	ldr	r3, [pc, #560]	; (8002220 <findLine+0x248>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	701a      	strb	r2, [r3, #0]
		while(f<7){					//ENCUENTRO LA MENOR LECTURA
 8001ff4:	e02d      	b.n	8002052 <findLine+0x7a>
			if(sensorValue > ADCData[0][f]){
 8001ff6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ffa:	4a87      	ldr	r2, [pc, #540]	; (8002218 <findLine+0x240>)
 8001ffc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002000:	b29a      	uxth	r2, r3
 8002002:	4b86      	ldr	r3, [pc, #536]	; (800221c <findLine+0x244>)
 8002004:	881b      	ldrh	r3, [r3, #0]
 8002006:	429a      	cmp	r2, r3
 8002008:	d20b      	bcs.n	8002022 <findLine+0x4a>
				sensorValue=ADCData[0][f];
 800200a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800200e:	4a82      	ldr	r2, [pc, #520]	; (8002218 <findLine+0x240>)
 8002010:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002014:	b29a      	uxth	r2, r3
 8002016:	4b81      	ldr	r3, [pc, #516]	; (800221c <findLine+0x244>)
 8002018:	801a      	strh	r2, [r3, #0]
				posMINCenter=f;
 800201a:	4a81      	ldr	r2, [pc, #516]	; (8002220 <findLine+0x248>)
 800201c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002020:	7013      	strb	r3, [r2, #0]
			}
			aux[f+1]=ADCData[0][f];
 8002022:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002026:	4a7c      	ldr	r2, [pc, #496]	; (8002218 <findLine+0x240>)
 8002028:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800202c:	b29a      	uxth	r2, r3
 800202e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002032:	3301      	adds	r3, #1
 8002034:	ee07 2a90 	vmov	s15, r2
 8002038:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	3328      	adds	r3, #40	; 0x28
 8002040:	443b      	add	r3, r7
 8002042:	3b28      	subs	r3, #40	; 0x28
 8002044:	edc3 7a00 	vstr	s15, [r3]
			f++;
 8002048:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800204c:	3301      	adds	r3, #1
 800204e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		while(f<7){					//ENCUENTRO LA MENOR LECTURA
 8002052:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002056:	2b06      	cmp	r3, #6
 8002058:	d9cd      	bls.n	8001ff6 <findLine+0x1e>
		}
		f=0;
 800205a:	2300      	movs	r3, #0
 800205c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		posMINCenter+=1;
 8002060:	4b6f      	ldr	r3, [pc, #444]	; (8002220 <findLine+0x248>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	3301      	adds	r3, #1
 8002066:	b2da      	uxtb	r2, r3
 8002068:	4b6d      	ldr	r3, [pc, #436]	; (8002220 <findLine+0x248>)
 800206a:	701a      	strb	r2, [r3, #0]
		aux[0]=aux[2];
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	603b      	str	r3, [r7, #0]
		aux[8]=aux[6];
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	623b      	str	r3, [r7, #32]

		posMINRight=posMINCenter-1;
 8002074:	4b6a      	ldr	r3, [pc, #424]	; (8002220 <findLine+0x248>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	3b01      	subs	r3, #1
 800207a:	b2da      	uxtb	r2, r3
 800207c:	4b69      	ldr	r3, [pc, #420]	; (8002224 <findLine+0x24c>)
 800207e:	701a      	strb	r2, [r3, #0]
		posMINLeft=posMINCenter+1;
 8002080:	4b67      	ldr	r3, [pc, #412]	; (8002220 <findLine+0x248>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	3301      	adds	r3, #1
 8002086:	b2da      	uxtb	r2, r3
 8002088:	4b67      	ldr	r3, [pc, #412]	; (8002228 <findLine+0x250>)
 800208a:	701a      	strb	r2, [r3, #0]

		fx2_fx3=aux[posMINCenter]-aux[posMINRight];
 800208c:	4b64      	ldr	r3, [pc, #400]	; (8002220 <findLine+0x248>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	3328      	adds	r3, #40	; 0x28
 8002094:	443b      	add	r3, r7
 8002096:	3b28      	subs	r3, #40	; 0x28
 8002098:	ed93 7a00 	vldr	s14, [r3]
 800209c:	4b61      	ldr	r3, [pc, #388]	; (8002224 <findLine+0x24c>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	3328      	adds	r3, #40	; 0x28
 80020a4:	443b      	add	r3, r7
 80020a6:	3b28      	subs	r3, #40	; 0x28
 80020a8:	edd3 7a00 	vldr	s15, [r3]
 80020ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020b0:	4b5e      	ldr	r3, [pc, #376]	; (800222c <findLine+0x254>)
 80020b2:	edc3 7a00 	vstr	s15, [r3]
		fx2_fx1=aux[posMINCenter]-aux[posMINLeft];
 80020b6:	4b5a      	ldr	r3, [pc, #360]	; (8002220 <findLine+0x248>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	3328      	adds	r3, #40	; 0x28
 80020be:	443b      	add	r3, r7
 80020c0:	3b28      	subs	r3, #40	; 0x28
 80020c2:	ed93 7a00 	vldr	s14, [r3]
 80020c6:	4b58      	ldr	r3, [pc, #352]	; (8002228 <findLine+0x250>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	3328      	adds	r3, #40	; 0x28
 80020ce:	443b      	add	r3, r7
 80020d0:	3b28      	subs	r3, #40	; 0x28
 80020d2:	edd3 7a00 	vldr	s15, [r3]
 80020d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020da:	4b55      	ldr	r3, [pc, #340]	; (8002230 <findLine+0x258>)
 80020dc:	edc3 7a00 	vstr	s15, [r3]

		x2_x1=COORD_SENSORES[posMINCenter]-COORD_SENSORES[posMINLeft];
 80020e0:	4b4f      	ldr	r3, [pc, #316]	; (8002220 <findLine+0x248>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	461a      	mov	r2, r3
 80020e6:	4b53      	ldr	r3, [pc, #332]	; (8002234 <findLine+0x25c>)
 80020e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80020ec:	4b4e      	ldr	r3, [pc, #312]	; (8002228 <findLine+0x250>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	4619      	mov	r1, r3
 80020f2:	4b50      	ldr	r3, [pc, #320]	; (8002234 <findLine+0x25c>)
 80020f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	ee07 3a90 	vmov	s15, r3
 80020fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002102:	4b4d      	ldr	r3, [pc, #308]	; (8002238 <findLine+0x260>)
 8002104:	edc3 7a00 	vstr	s15, [r3]
		x2_x1cuad=(x2_x1*x2_x1);
 8002108:	4b4b      	ldr	r3, [pc, #300]	; (8002238 <findLine+0x260>)
 800210a:	ed93 7a00 	vldr	s14, [r3]
 800210e:	4b4a      	ldr	r3, [pc, #296]	; (8002238 <findLine+0x260>)
 8002110:	edd3 7a00 	vldr	s15, [r3]
 8002114:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002118:	4b48      	ldr	r3, [pc, #288]	; (800223c <findLine+0x264>)
 800211a:	edc3 7a00 	vstr	s15, [r3]
		x2_x3=COORD_SENSORES[posMINCenter]-COORD_SENSORES[posMINRight];
 800211e:	4b40      	ldr	r3, [pc, #256]	; (8002220 <findLine+0x248>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	461a      	mov	r2, r3
 8002124:	4b43      	ldr	r3, [pc, #268]	; (8002234 <findLine+0x25c>)
 8002126:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800212a:	4b3e      	ldr	r3, [pc, #248]	; (8002224 <findLine+0x24c>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	4619      	mov	r1, r3
 8002130:	4b40      	ldr	r3, [pc, #256]	; (8002234 <findLine+0x25c>)
 8002132:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	ee07 3a90 	vmov	s15, r3
 800213c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002140:	4b3f      	ldr	r3, [pc, #252]	; (8002240 <findLine+0x268>)
 8002142:	edc3 7a00 	vstr	s15, [r3]
		x2_x3cuad=(x2_x3*x2_x3);
 8002146:	4b3e      	ldr	r3, [pc, #248]	; (8002240 <findLine+0x268>)
 8002148:	ed93 7a00 	vldr	s14, [r3]
 800214c:	4b3c      	ldr	r3, [pc, #240]	; (8002240 <findLine+0x268>)
 800214e:	edd3 7a00 	vldr	s15, [r3]
 8002152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002156:	4b3b      	ldr	r3, [pc, #236]	; (8002244 <findLine+0x26c>)
 8002158:	edc3 7a00 	vstr	s15, [r3]

		numerador=((x2_x1cuad*fx2_fx3) - (x2_x3cuad*fx2_fx1));
 800215c:	4b37      	ldr	r3, [pc, #220]	; (800223c <findLine+0x264>)
 800215e:	ed93 7a00 	vldr	s14, [r3]
 8002162:	4b32      	ldr	r3, [pc, #200]	; (800222c <findLine+0x254>)
 8002164:	edd3 7a00 	vldr	s15, [r3]
 8002168:	ee27 7a27 	vmul.f32	s14, s14, s15
 800216c:	4b35      	ldr	r3, [pc, #212]	; (8002244 <findLine+0x26c>)
 800216e:	edd3 6a00 	vldr	s13, [r3]
 8002172:	4b2f      	ldr	r3, [pc, #188]	; (8002230 <findLine+0x258>)
 8002174:	edd3 7a00 	vldr	s15, [r3]
 8002178:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800217c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002180:	4b31      	ldr	r3, [pc, #196]	; (8002248 <findLine+0x270>)
 8002182:	edc3 7a00 	vstr	s15, [r3]
		denominador=(2*((x2_x1*fx2_fx3)-(x2_x3*fx2_fx1)));
 8002186:	4b2c      	ldr	r3, [pc, #176]	; (8002238 <findLine+0x260>)
 8002188:	ed93 7a00 	vldr	s14, [r3]
 800218c:	4b27      	ldr	r3, [pc, #156]	; (800222c <findLine+0x254>)
 800218e:	edd3 7a00 	vldr	s15, [r3]
 8002192:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002196:	4b2a      	ldr	r3, [pc, #168]	; (8002240 <findLine+0x268>)
 8002198:	edd3 6a00 	vldr	s13, [r3]
 800219c:	4b24      	ldr	r3, [pc, #144]	; (8002230 <findLine+0x258>)
 800219e:	edd3 7a00 	vldr	s15, [r3]
 80021a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021aa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80021ae:	4b27      	ldr	r3, [pc, #156]	; (800224c <findLine+0x274>)
 80021b0:	edc3 7a00 	vstr	s15, [r3]
		cuenta=numerador / denominador;
 80021b4:	4b24      	ldr	r3, [pc, #144]	; (8002248 <findLine+0x270>)
 80021b6:	edd3 6a00 	vldr	s13, [r3]
 80021ba:	4b24      	ldr	r3, [pc, #144]	; (800224c <findLine+0x274>)
 80021bc:	ed93 7a00 	vldr	s14, [r3]
 80021c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021c4:	4b22      	ldr	r3, [pc, #136]	; (8002250 <findLine+0x278>)
 80021c6:	edc3 7a00 	vstr	s15, [r3]
		if(denominador!=0){
 80021ca:	4b20      	ldr	r3, [pc, #128]	; (800224c <findLine+0x274>)
 80021cc:	edd3 7a00 	vldr	s15, [r3]
 80021d0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80021d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021d8:	d017      	beq.n	800220a <findLine+0x232>
			xMin= -(COORD_SENSORES[posMINCenter]-cuenta);
 80021da:	4b11      	ldr	r3, [pc, #68]	; (8002220 <findLine+0x248>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	461a      	mov	r2, r3
 80021e0:	4b14      	ldr	r3, [pc, #80]	; (8002234 <findLine+0x25c>)
 80021e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021e6:	ee07 3a90 	vmov	s15, r3
 80021ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021ee:	4b18      	ldr	r3, [pc, #96]	; (8002250 <findLine+0x278>)
 80021f0:	edd3 7a00 	vldr	s15, [r3]
 80021f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021f8:	eef1 7a67 	vneg.f32	s15, s15
 80021fc:	4b15      	ldr	r3, [pc, #84]	; (8002254 <findLine+0x27c>)
 80021fe:	edc3 7a00 	vstr	s15, [r3]
			error.f=xMin;
 8002202:	4b14      	ldr	r3, [pc, #80]	; (8002254 <findLine+0x27c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a14      	ldr	r2, [pc, #80]	; (8002258 <findLine+0x280>)
 8002208:	6013      	str	r3, [r2, #0]
		}
		//error.f=xMin;
		//return -xMin;

}
 800220a:	bf00      	nop
 800220c:	372c      	adds	r7, #44	; 0x2c
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	200003ec 	.word	0x200003ec
 800221c:	20000610 	.word	0x20000610
 8002220:	2000060c 	.word	0x2000060c
 8002224:	2000060d 	.word	0x2000060d
 8002228:	2000060e 	.word	0x2000060e
 800222c:	20000618 	.word	0x20000618
 8002230:	2000061c 	.word	0x2000061c
 8002234:	0800759c 	.word	0x0800759c
 8002238:	20000620 	.word	0x20000620
 800223c:	20000628 	.word	0x20000628
 8002240:	20000624 	.word	0x20000624
 8002244:	2000062c 	.word	0x2000062c
 8002248:	20000634 	.word	0x20000634
 800224c:	20000630 	.word	0x20000630
 8002250:	20000638 	.word	0x20000638
 8002254:	20000614 	.word	0x20000614
 8002258:	200005e4 	.word	0x200005e4
 800225c:	00000000 	.word	0x00000000

08002260 <calcPID>:

void calcPID(uint16_t pwmBase1,uint16_t pwmBase2){
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	460a      	mov	r2, r1
 800226a:	80fb      	strh	r3, [r7, #6]
 800226c:	4613      	mov	r3, r2
 800226e:	80bb      	strh	r3, [r7, #4]

	uint16_t pwm1,pwm2;

		integral += error.f;
 8002270:	4b65      	ldr	r3, [pc, #404]	; (8002408 <calcPID+0x1a8>)
 8002272:	ed93 7a00 	vldr	s14, [r3]
 8002276:	4b65      	ldr	r3, [pc, #404]	; (800240c <calcPID+0x1ac>)
 8002278:	edd3 7a00 	vldr	s15, [r3]
 800227c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002280:	4b62      	ldr	r3, [pc, #392]	; (800240c <calcPID+0x1ac>)
 8002282:	edc3 7a00 	vstr	s15, [r3]

		if(integral > 1000){
 8002286:	4b61      	ldr	r3, [pc, #388]	; (800240c <calcPID+0x1ac>)
 8002288:	edd3 7a00 	vldr	s15, [r3]
 800228c:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8002410 <calcPID+0x1b0>
 8002290:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002298:	dd03      	ble.n	80022a2 <calcPID+0x42>
				integral = 0;
 800229a:	4b5c      	ldr	r3, [pc, #368]	; (800240c <calcPID+0x1ac>)
 800229c:	f04f 0200 	mov.w	r2, #0
 80022a0:	601a      	str	r2, [r3, #0]
		}

		derivativo= error.f - lastError;
 80022a2:	4b59      	ldr	r3, [pc, #356]	; (8002408 <calcPID+0x1a8>)
 80022a4:	ed93 7a00 	vldr	s14, [r3]
 80022a8:	4b5a      	ldr	r3, [pc, #360]	; (8002414 <calcPID+0x1b4>)
 80022aa:	edd3 7a00 	vldr	s15, [r3]
 80022ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022b2:	4b59      	ldr	r3, [pc, #356]	; (8002418 <calcPID+0x1b8>)
 80022b4:	edc3 7a00 	vstr	s15, [r3]

		turn= (Kp.u32 * error.f) + (Kd.u32 * derivativo) + (Ki.u32 * integral);
 80022b8:	4b58      	ldr	r3, [pc, #352]	; (800241c <calcPID+0x1bc>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	ee07 3a90 	vmov	s15, r3
 80022c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022c4:	4b50      	ldr	r3, [pc, #320]	; (8002408 <calcPID+0x1a8>)
 80022c6:	edd3 7a00 	vldr	s15, [r3]
 80022ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022ce:	4b54      	ldr	r3, [pc, #336]	; (8002420 <calcPID+0x1c0>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	ee07 3a90 	vmov	s15, r3
 80022d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022da:	4b4f      	ldr	r3, [pc, #316]	; (8002418 <calcPID+0x1b8>)
 80022dc:	edd3 7a00 	vldr	s15, [r3]
 80022e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022e8:	4b4e      	ldr	r3, [pc, #312]	; (8002424 <calcPID+0x1c4>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	ee07 3a90 	vmov	s15, r3
 80022f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022f4:	4b45      	ldr	r3, [pc, #276]	; (800240c <calcPID+0x1ac>)
 80022f6:	edd3 7a00 	vldr	s15, [r3]
 80022fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002302:	4b49      	ldr	r3, [pc, #292]	; (8002428 <calcPID+0x1c8>)
 8002304:	edc3 7a00 	vstr	s15, [r3]

		pwm1 = pwmBase1 - turn;
 8002308:	88fb      	ldrh	r3, [r7, #6]
 800230a:	ee07 3a90 	vmov	s15, r3
 800230e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002312:	4b45      	ldr	r3, [pc, #276]	; (8002428 <calcPID+0x1c8>)
 8002314:	edd3 7a00 	vldr	s15, [r3]
 8002318:	ee77 7a67 	vsub.f32	s15, s14, s15
 800231c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002320:	ee17 3a90 	vmov	r3, s15
 8002324:	81fb      	strh	r3, [r7, #14]
		pwm2 = pwmBase2 + turn;
 8002326:	88bb      	ldrh	r3, [r7, #4]
 8002328:	ee07 3a90 	vmov	s15, r3
 800232c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002330:	4b3d      	ldr	r3, [pc, #244]	; (8002428 <calcPID+0x1c8>)
 8002332:	edd3 7a00 	vldr	s15, [r3]
 8002336:	ee77 7a27 	vadd.f32	s15, s14, s15
 800233a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800233e:	ee17 3a90 	vmov	r3, s15
 8002342:	81bb      	strh	r3, [r7, #12]



		if(pwm1>900){
 8002344:	89fb      	ldrh	r3, [r7, #14]
 8002346:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800234a:	d902      	bls.n	8002352 <calcPID+0xf2>
			pwm1=1000;
 800234c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002350:	81fb      	strh	r3, [r7, #14]
		}
		if(pwm2>900){
 8002352:	89bb      	ldrh	r3, [r7, #12]
 8002354:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8002358:	d902      	bls.n	8002360 <calcPID+0x100>
			pwm2=900;
 800235a:	f44f 7361 	mov.w	r3, #900	; 0x384
 800235e:	81bb      	strh	r3, [r7, #12]
		}
		if((-0.1 > error.f)||(error.f > 0.1)){
 8002360:	4b29      	ldr	r3, [pc, #164]	; (8002408 <calcPID+0x1a8>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f7fe f89b 	bl	80004a0 <__aeabi_f2d>
 800236a:	a323      	add	r3, pc, #140	; (adr r3, 80023f8 <calcPID+0x198>)
 800236c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002370:	f7fe f94e 	bl	8000610 <__aeabi_dcmplt>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10c      	bne.n	8002394 <calcPID+0x134>
 800237a:	4b23      	ldr	r3, [pc, #140]	; (8002408 <calcPID+0x1a8>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f7fe f88e 	bl	80004a0 <__aeabi_f2d>
 8002384:	a31e      	add	r3, pc, #120	; (adr r3, 8002400 <calcPID+0x1a0>)
 8002386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800238a:	f7fe f95f 	bl	800064c <__aeabi_dcmpgt>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d027      	beq.n	80023e4 <calcPID+0x184>
			if(0>=pwm1){
 8002394:	89fb      	ldrh	r3, [r7, #14]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d108      	bne.n	80023ac <calcPID+0x14c>
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,pwmBase1);
 800239a:	4b24      	ldr	r3, [pc, #144]	; (800242c <calcPID+0x1cc>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	88fa      	ldrh	r2, [r7, #6]
 80023a0:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,0);
 80023a2:	4b22      	ldr	r3, [pc, #136]	; (800242c <calcPID+0x1cc>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2200      	movs	r2, #0
 80023a8:	639a      	str	r2, [r3, #56]	; 0x38
 80023aa:	e007      	b.n	80023bc <calcPID+0x15c>
			}else{
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,0);
 80023ac:	4b1f      	ldr	r3, [pc, #124]	; (800242c <calcPID+0x1cc>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2200      	movs	r2, #0
 80023b2:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,pwm1);
 80023b4:	4b1d      	ldr	r3, [pc, #116]	; (800242c <calcPID+0x1cc>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	89fa      	ldrh	r2, [r7, #14]
 80023ba:	639a      	str	r2, [r3, #56]	; 0x38
			}

			if(0>=pwm2){
 80023bc:	89bb      	ldrh	r3, [r7, #12]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d108      	bne.n	80023d4 <calcPID+0x174>
					__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,pwmBase2);
 80023c2:	4b1a      	ldr	r3, [pc, #104]	; (800242c <calcPID+0x1cc>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	88ba      	ldrh	r2, [r7, #4]
 80023c8:	641a      	str	r2, [r3, #64]	; 0x40
					__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 80023ca:	4b18      	ldr	r3, [pc, #96]	; (800242c <calcPID+0x1cc>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2200      	movs	r2, #0
 80023d0:	63da      	str	r2, [r3, #60]	; 0x3c
 80023d2:	e007      	b.n	80023e4 <calcPID+0x184>
				}else{
					__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,0);
 80023d4:	4b15      	ldr	r3, [pc, #84]	; (800242c <calcPID+0x1cc>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2200      	movs	r2, #0
 80023da:	641a      	str	r2, [r3, #64]	; 0x40
					__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,pwm2);
 80023dc:	4b13      	ldr	r3, [pc, #76]	; (800242c <calcPID+0x1cc>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	89ba      	ldrh	r2, [r7, #12]
 80023e2:	63da      	str	r2, [r3, #60]	; 0x3c
				}
		}
		lastError=error.f;
 80023e4:	4b08      	ldr	r3, [pc, #32]	; (8002408 <calcPID+0x1a8>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a0a      	ldr	r2, [pc, #40]	; (8002414 <calcPID+0x1b4>)
 80023ea:	6013      	str	r3, [r2, #0]


}
 80023ec:	bf00      	nop
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	f3af 8000 	nop.w
 80023f8:	9999999a 	.word	0x9999999a
 80023fc:	bfb99999 	.word	0xbfb99999
 8002400:	9999999a 	.word	0x9999999a
 8002404:	3fb99999 	.word	0x3fb99999
 8002408:	200005e4 	.word	0x200005e4
 800240c:	200005fc 	.word	0x200005fc
 8002410:	447a0000 	.word	0x447a0000
 8002414:	20000608 	.word	0x20000608
 8002418:	20000600 	.word	0x20000600
 800241c:	200005e8 	.word	0x200005e8
 8002420:	200005ec 	.word	0x200005ec
 8002424:	200005f0 	.word	0x200005f0
 8002428:	20000604 	.word	0x20000604
 800242c:	200000d4 	.word	0x200000d4

08002430 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002434:	f000 fefe 	bl	8003234 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002438:	f000 f9a0 	bl	800277c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800243c:	f000 fc08 	bl	8002c50 <MX_GPIO_Init>
  MX_DMA_Init();
 8002440:	f000 fbe6 	bl	8002c10 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002444:	f000 fbba 	bl	8002bbc <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8002448:	f000 fb40 	bl	8002acc <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800244c:	f000 fb8c 	bl	8002b68 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8002450:	f000 faa6 	bl	80029a0 <MX_TIM3_Init>
  MX_ADC1_Init();
 8002454:	f000 f9fe 	bl	8002854 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 8002458:	4882      	ldr	r0, [pc, #520]	; (8002664 <main+0x234>)
 800245a:	f003 f881 	bl	8005560 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim3);
 800245e:	4882      	ldr	r0, [pc, #520]	; (8002668 <main+0x238>)
 8002460:	f003 f824 	bl	80054ac <HAL_TIM_Base_Start>
  //HAL_ADC_Start_IT(&hadc1);

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002464:	2100      	movs	r1, #0
 8002466:	4880      	ldr	r0, [pc, #512]	; (8002668 <main+0x238>)
 8002468:	f003 f936 	bl	80056d8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800246c:	2104      	movs	r1, #4
 800246e:	487e      	ldr	r0, [pc, #504]	; (8002668 <main+0x238>)
 8002470:	f003 f932 	bl	80056d8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002474:	2108      	movs	r1, #8
 8002476:	487c      	ldr	r0, [pc, #496]	; (8002668 <main+0x238>)
 8002478:	f003 f92e 	bl	80056d8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800247c:	210c      	movs	r1, #12
 800247e:	487a      	ldr	r0, [pc, #488]	; (8002668 <main+0x238>)
 8002480:	f003 f92a 	bl	80056d8 <HAL_TIM_PWM_Start>

  timeout2=30;
 8002484:	4b79      	ldr	r3, [pc, #484]	; (800266c <main+0x23c>)
 8002486:	221e      	movs	r2, #30
 8002488:	701a      	strb	r2, [r3, #0]
  //timeOut3=10;
  timeToSendAlive=30;
 800248a:	4b79      	ldr	r3, [pc, #484]	; (8002670 <main+0x240>)
 800248c:	221e      	movs	r2, #30
 800248e:	701a      	strb	r2, [r3, #0]
  timeout1=30;
 8002490:	4b78      	ldr	r3, [pc, #480]	; (8002674 <main+0x244>)
 8002492:	221e      	movs	r2, #30
 8002494:	701a      	strb	r2, [r3, #0]
  timeoutADC=0;
 8002496:	4b78      	ldr	r3, [pc, #480]	; (8002678 <main+0x248>)
 8002498:	2200      	movs	r2, #0
 800249a:	701a      	strb	r2, [r3, #0]
  readyToSend=1;
 800249c:	4a77      	ldr	r2, [pc, #476]	; (800267c <main+0x24c>)
 800249e:	7813      	ldrb	r3, [r2, #0]
 80024a0:	f043 0310 	orr.w	r3, r3, #16
 80024a4:	7013      	strb	r3, [r2, #0]
  race=0;
 80024a6:	4a75      	ldr	r2, [pc, #468]	; (800267c <main+0x24c>)
 80024a8:	7813      	ldrb	r3, [r2, #0]
 80024aa:	f36f 0300 	bfc	r3, #0, #1
 80024ae:	7013      	strb	r3, [r2, #0]
  killRace=0;
 80024b0:	4a72      	ldr	r2, [pc, #456]	; (800267c <main+0x24c>)
 80024b2:	7813      	ldrb	r3, [r2, #0]
 80024b4:	f36f 1386 	bfc	r3, #6, #1
 80024b8:	7013      	strb	r3, [r2, #0]
  stop=0;
 80024ba:	4a70      	ldr	r2, [pc, #448]	; (800267c <main+0x24c>)
 80024bc:	7813      	ldrb	r3, [r2, #0]
 80024be:	f36f 03c3 	bfc	r3, #3, #1
 80024c2:	7013      	strb	r3, [r2, #0]
  duty=0;
 80024c4:	4b6e      	ldr	r3, [pc, #440]	; (8002680 <main+0x250>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	701a      	strb	r2, [r3, #0]
  espConnected=0;
 80024ca:	4a6e      	ldr	r2, [pc, #440]	; (8002684 <main+0x254>)
 80024cc:	7813      	ldrb	r3, [r2, #0]
 80024ce:	f36f 0300 	bfc	r3, #0, #1
 80024d2:	7013      	strb	r3, [r2, #0]
  sendALIVE=0;
 80024d4:	4a6b      	ldr	r2, [pc, #428]	; (8002684 <main+0x254>)
 80024d6:	7813      	ldrb	r3, [r2, #0]
 80024d8:	f36f 0341 	bfc	r3, #1, #1
 80024dc:	7013      	strb	r3, [r2, #0]

  PWM_motor1.u32=0;
 80024de:	4b6a      	ldr	r3, [pc, #424]	; (8002688 <main+0x258>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
  PWM_motor2.u32=0;
 80024e4:	4b69      	ldr	r3, [pc, #420]	; (800268c <main+0x25c>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
  time100ms=10;
 80024ea:	4b69      	ldr	r3, [pc, #420]	; (8002690 <main+0x260>)
 80024ec:	220a      	movs	r2, #10
 80024ee:	701a      	strb	r2, [r3, #0]
  time10ms=1;
 80024f0:	4b68      	ldr	r3, [pc, #416]	; (8002694 <main+0x264>)
 80024f2:	2201      	movs	r2, #1
 80024f4:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(ON100MS){
 80024f6:	4b61      	ldr	r3, [pc, #388]	; (800267c <main+0x24c>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b00      	cmp	r3, #0
 8002502:	d032      	beq.n	800256a <main+0x13a>
	  	 		ON100MS=0;
 8002504:	4a5d      	ldr	r2, [pc, #372]	; (800267c <main+0x24c>)
 8002506:	7813      	ldrb	r3, [r2, #0]
 8002508:	f36f 0341 	bfc	r3, #1, #1
 800250c:	7013      	strb	r3, [r2, #0]
	  	 	  	if(timeout1>0)
 800250e:	4b59      	ldr	r3, [pc, #356]	; (8002674 <main+0x244>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d005      	beq.n	8002522 <main+0xf2>
	  	 	  		timeout1--;
 8002516:	4b57      	ldr	r3, [pc, #348]	; (8002674 <main+0x244>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	3b01      	subs	r3, #1
 800251c:	b2da      	uxtb	r2, r3
 800251e:	4b55      	ldr	r3, [pc, #340]	; (8002674 <main+0x244>)
 8002520:	701a      	strb	r2, [r3, #0]
	  	 		if(timeout2>0)
 8002522:	4b52      	ldr	r3, [pc, #328]	; (800266c <main+0x23c>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d005      	beq.n	8002536 <main+0x106>
	  	 			timeout2--;
 800252a:	4b50      	ldr	r3, [pc, #320]	; (800266c <main+0x23c>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	3b01      	subs	r3, #1
 8002530:	b2da      	uxtb	r2, r3
 8002532:	4b4e      	ldr	r3, [pc, #312]	; (800266c <main+0x23c>)
 8002534:	701a      	strb	r2, [r3, #0]
	  	 		if(jobTime.u32>0)
 8002536:	4b58      	ldr	r3, [pc, #352]	; (8002698 <main+0x268>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d004      	beq.n	8002548 <main+0x118>
	  	 			jobTime.u32--;
 800253e:	4b56      	ldr	r3, [pc, #344]	; (8002698 <main+0x268>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	3b01      	subs	r3, #1
 8002544:	4a54      	ldr	r2, [pc, #336]	; (8002698 <main+0x268>)
 8002546:	6013      	str	r3, [r2, #0]
	  	 		if((timeToSendAlive>0)&&(espConnected))
 8002548:	4b49      	ldr	r3, [pc, #292]	; (8002670 <main+0x240>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d00c      	beq.n	800256a <main+0x13a>
 8002550:	4b4c      	ldr	r3, [pc, #304]	; (8002684 <main+0x254>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d005      	beq.n	800256a <main+0x13a>
	  	 			timeToSendAlive--;
 800255e:	4b44      	ldr	r3, [pc, #272]	; (8002670 <main+0x240>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	3b01      	subs	r3, #1
 8002564:	b2da      	uxtb	r2, r3
 8002566:	4b42      	ldr	r3, [pc, #264]	; (8002670 <main+0x240>)
 8002568:	701a      	strb	r2, [r3, #0]
	  	  }

	  if(ON10MS){
 800256a:	4b44      	ldr	r3, [pc, #272]	; (800267c <main+0x24c>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b00      	cmp	r3, #0
 8002576:	d018      	beq.n	80025aa <main+0x17a>
		  ON10MS=0;
 8002578:	4a40      	ldr	r2, [pc, #256]	; (800267c <main+0x24c>)
 800257a:	7813      	ldrb	r3, [r2, #0]
 800257c:	f36f 0382 	bfc	r3, #2, #1
 8002580:	7013      	strb	r3, [r2, #0]
		  if(timeoutADC>0){
 8002582:	4b3d      	ldr	r3, [pc, #244]	; (8002678 <main+0x248>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d005      	beq.n	8002596 <main+0x166>
			  timeoutADC--;
 800258a:	4b3b      	ldr	r3, [pc, #236]	; (8002678 <main+0x248>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	3b01      	subs	r3, #1
 8002590:	b2da      	uxtb	r2, r3
 8002592:	4b39      	ldr	r3, [pc, #228]	; (8002678 <main+0x248>)
 8002594:	701a      	strb	r2, [r3, #0]
		  }
		  if(timeoutPID>0){
 8002596:	4b41      	ldr	r3, [pc, #260]	; (800269c <main+0x26c>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d005      	beq.n	80025aa <main+0x17a>
		  		timeoutPID--;
 800259e:	4b3f      	ldr	r3, [pc, #252]	; (800269c <main+0x26c>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	3b01      	subs	r3, #1
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	4b3d      	ldr	r3, [pc, #244]	; (800269c <main+0x26c>)
 80025a8:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  	  if( (!timeToSendAlive) && (espConnected) ){
 80025aa:	4b31      	ldr	r3, [pc, #196]	; (8002670 <main+0x240>)
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d118      	bne.n	80025e4 <main+0x1b4>
 80025b2:	4b34      	ldr	r3, [pc, #208]	; (8002684 <main+0x254>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d011      	beq.n	80025e4 <main+0x1b4>
	  		  sendALIVE=1;
 80025c0:	4a30      	ldr	r2, [pc, #192]	; (8002684 <main+0x254>)
 80025c2:	7813      	ldrb	r3, [r2, #0]
 80025c4:	f043 0302 	orr.w	r3, r3, #2
 80025c8:	7013      	strb	r3, [r2, #0]
	  		  espReadyToRecieve=0;
 80025ca:	4a2c      	ldr	r2, [pc, #176]	; (800267c <main+0x24c>)
 80025cc:	7813      	ldrb	r3, [r2, #0]
 80025ce:	f36f 1345 	bfc	r3, #5, #1
 80025d2:	7013      	strb	r3, [r2, #0]
	  		  timeToSendAlive=50;
 80025d4:	4b26      	ldr	r3, [pc, #152]	; (8002670 <main+0x240>)
 80025d6:	2232      	movs	r2, #50	; 0x32
 80025d8:	701a      	strb	r2, [r3, #0]
	  		  readyToSend=1;
 80025da:	4a28      	ldr	r2, [pc, #160]	; (800267c <main+0x24c>)
 80025dc:	7813      	ldrb	r3, [r2, #0]
 80025de:	f043 0310 	orr.w	r3, r3, #16
 80025e2:	7013      	strb	r3, [r2, #0]
	  	  }

	  	  if(sendALIVE){
 80025e4:	4b27      	ldr	r3, [pc, #156]	; (8002684 <main+0x254>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d002      	beq.n	80025f8 <main+0x1c8>
	  	  	udpCom(0);
 80025f2:	2000      	movs	r0, #0
 80025f4:	f7ff f9b2 	bl	800195c <udpCom>
	  	  }


	  		if(indTX_R!=indTX_W){
 80025f8:	4b29      	ldr	r3, [pc, #164]	; (80026a0 <main+0x270>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	b2da      	uxtb	r2, r3
 80025fe:	4b29      	ldr	r3, [pc, #164]	; (80026a4 <main+0x274>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	b2db      	uxtb	r3, r3
 8002604:	429a      	cmp	r2, r3
 8002606:	d001      	beq.n	800260c <main+0x1dc>
	  			uart();
 8002608:	f7fe fa2e 	bl	8000a68 <uart>
	  		}

	  		if(indRX_R!=indRX_W){
 800260c:	4b26      	ldr	r3, [pc, #152]	; (80026a8 <main+0x278>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	b2da      	uxtb	r2, r3
 8002612:	4b26      	ldr	r3, [pc, #152]	; (80026ac <main+0x27c>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	b2db      	uxtb	r3, r3
 8002618:	429a      	cmp	r2, r3
 800261a:	d001      	beq.n	8002620 <main+0x1f0>
	  			recibirmensaje();
 800261c:	f7fe fb4e 	bl	8000cbc <recibirmensaje>
	  		}

	  	switch(duty){
 8002620:	4b17      	ldr	r3, [pc, #92]	; (8002680 <main+0x250>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d002      	beq.n	800262e <main+0x1fe>
 8002628:	2b01      	cmp	r3, #1
 800262a:	d018      	beq.n	800265e <main+0x22e>
 800262c:	e045      	b.n	80026ba <main+0x28a>
	  		case 0:
	  			if(!timeout1){
 800262e:	4b11      	ldr	r3, [pc, #68]	; (8002674 <main+0x244>)
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d140      	bne.n	80026b8 <main+0x288>
	  				initEsp();
 8002636:	f7fe fa3d 	bl	8000ab4 <initEsp>
	  				HAL_UART_Receive_IT(&huart1, (uint8_t *)&buf_rx[indRX_W], 1);
 800263a:	4b1c      	ldr	r3, [pc, #112]	; (80026ac <main+0x27c>)
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	b2db      	uxtb	r3, r3
 8002640:	461a      	mov	r2, r3
 8002642:	4b1b      	ldr	r3, [pc, #108]	; (80026b0 <main+0x280>)
 8002644:	4413      	add	r3, r2
 8002646:	2201      	movs	r2, #1
 8002648:	4619      	mov	r1, r3
 800264a:	481a      	ldr	r0, [pc, #104]	; (80026b4 <main+0x284>)
 800264c:	f003 ff49 	bl	80064e2 <HAL_UART_Receive_IT>
	  				duty++;
 8002650:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <main+0x250>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	3301      	adds	r3, #1
 8002656:	b2da      	uxtb	r2, r3
 8002658:	4b09      	ldr	r3, [pc, #36]	; (8002680 <main+0x250>)
 800265a:	701a      	strb	r2, [r3, #0]
	  			}
	  		break;
 800265c:	e02c      	b.n	80026b8 <main+0x288>
	  		case 1:
	  			initEsp();
 800265e:	f7fe fa29 	bl	8000ab4 <initEsp>
	  		break;
 8002662:	e02a      	b.n	80026ba <main+0x28a>
 8002664:	2000011c 	.word	0x2000011c
 8002668:	200000d4 	.word	0x200000d4
 800266c:	200005ca 	.word	0x200005ca
 8002670:	200005d0 	.word	0x200005d0
 8002674:	200005c9 	.word	0x200005c9
 8002678:	200005cb 	.word	0x200005cb
 800267c:	200005f4 	.word	0x200005f4
 8002680:	200005c4 	.word	0x200005c4
 8002684:	200005f8 	.word	0x200005f8
 8002688:	200005d8 	.word	0x200005d8
 800268c:	200005dc 	.word	0x200005dc
 8002690:	200005bb 	.word	0x200005bb
 8002694:	200005bc 	.word	0x200005bc
 8002698:	200005e0 	.word	0x200005e0
 800269c:	200005cc 	.word	0x200005cc
 80026a0:	200005c0 	.word	0x200005c0
 80026a4:	200005bf 	.word	0x200005bf
 80026a8:	200005be 	.word	0x200005be
 80026ac:	200005bd 	.word	0x200005bd
 80026b0:	200001ec 	.word	0x200001ec
 80026b4:	20000164 	.word	0x20000164
	  		break;
 80026b8:	bf00      	nop
	  	}

	  	if(!timeoutADC){
 80026ba:	4b29      	ldr	r3, [pc, #164]	; (8002760 <main+0x330>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d104      	bne.n	80026cc <main+0x29c>
	  		findLine();
 80026c2:	f7ff fc89 	bl	8001fd8 <findLine>
	  		timeoutADC=1;
 80026c6:	4b26      	ldr	r3, [pc, #152]	; (8002760 <main+0x330>)
 80026c8:	2201      	movs	r2, #1
 80026ca:	701a      	strb	r2, [r3, #0]
	  	}

	  	if((race)&&(!timeoutPID)){
 80026cc:	4b25      	ldr	r3, [pc, #148]	; (8002764 <main+0x334>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00e      	beq.n	80026f8 <main+0x2c8>
 80026da:	4b23      	ldr	r3, [pc, #140]	; (8002768 <main+0x338>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10a      	bne.n	80026f8 <main+0x2c8>
	  		  	calcPID(PWM_motor1.u16[0], PWM_motor2.u16[0]);
 80026e2:	4b22      	ldr	r3, [pc, #136]	; (800276c <main+0x33c>)
 80026e4:	881b      	ldrh	r3, [r3, #0]
 80026e6:	4a22      	ldr	r2, [pc, #136]	; (8002770 <main+0x340>)
 80026e8:	8812      	ldrh	r2, [r2, #0]
 80026ea:	4611      	mov	r1, r2
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff fdb7 	bl	8002260 <calcPID>
	  		  	timeoutPID=1;
 80026f2:	4b1d      	ldr	r3, [pc, #116]	; (8002768 <main+0x338>)
 80026f4:	2201      	movs	r2, #1
 80026f6:	701a      	strb	r2, [r3, #0]
	  	}


	  		if( ( ( (!jobTime.u32) && (killRace) ) ) || (stop) ) {
 80026f8:	4b1e      	ldr	r3, [pc, #120]	; (8002774 <main+0x344>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d106      	bne.n	800270e <main+0x2de>
 8002700:	4b18      	ldr	r3, [pc, #96]	; (8002764 <main+0x334>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b00      	cmp	r3, #0
 800270c:	d107      	bne.n	800271e <main+0x2ee>
 800270e:	4b15      	ldr	r3, [pc, #84]	; (8002764 <main+0x334>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b00      	cmp	r3, #0
 800271a:	f43f aeec 	beq.w	80024f6 <main+0xc6>
	  				  stop=0;
 800271e:	4a11      	ldr	r2, [pc, #68]	; (8002764 <main+0x334>)
 8002720:	7813      	ldrb	r3, [r2, #0]
 8002722:	f36f 03c3 	bfc	r3, #3, #1
 8002726:	7013      	strb	r3, [r2, #0]
	  				  race=0;
 8002728:	4a0e      	ldr	r2, [pc, #56]	; (8002764 <main+0x334>)
 800272a:	7813      	ldrb	r3, [r2, #0]
 800272c:	f36f 0300 	bfc	r3, #0, #1
 8002730:	7013      	strb	r3, [r2, #0]
	  				  killRace=0;
 8002732:	4a0c      	ldr	r2, [pc, #48]	; (8002764 <main+0x334>)
 8002734:	7813      	ldrb	r3, [r2, #0]
 8002736:	f36f 1386 	bfc	r3, #6, #1
 800273a:	7013      	strb	r3, [r2, #0]
	  				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,0);
 800273c:	4b0e      	ldr	r3, [pc, #56]	; (8002778 <main+0x348>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2200      	movs	r2, #0
 8002742:	635a      	str	r2, [r3, #52]	; 0x34
	  				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,0);
 8002744:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <main+0x348>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2200      	movs	r2, #0
 800274a:	639a      	str	r2, [r3, #56]	; 0x38
	  				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 800274c:	4b0a      	ldr	r3, [pc, #40]	; (8002778 <main+0x348>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2200      	movs	r2, #0
 8002752:	63da      	str	r2, [r3, #60]	; 0x3c
	  				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,0);
 8002754:	4b08      	ldr	r3, [pc, #32]	; (8002778 <main+0x348>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2200      	movs	r2, #0
 800275a:	641a      	str	r2, [r3, #64]	; 0x40
	  if(ON100MS){
 800275c:	e6cb      	b.n	80024f6 <main+0xc6>
 800275e:	bf00      	nop
 8002760:	200005cb 	.word	0x200005cb
 8002764:	200005f4 	.word	0x200005f4
 8002768:	200005cc 	.word	0x200005cc
 800276c:	200005d8 	.word	0x200005d8
 8002770:	200005dc 	.word	0x200005dc
 8002774:	200005e0 	.word	0x200005e0
 8002778:	200000d4 	.word	0x200000d4

0800277c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b094      	sub	sp, #80	; 0x50
 8002780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002782:	f107 0320 	add.w	r3, r7, #32
 8002786:	2230      	movs	r2, #48	; 0x30
 8002788:	2100      	movs	r1, #0
 800278a:	4618      	mov	r0, r3
 800278c:	f004 fe06 	bl	800739c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002790:	f107 030c 	add.w	r3, r7, #12
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	605a      	str	r2, [r3, #4]
 800279a:	609a      	str	r2, [r3, #8]
 800279c:	60da      	str	r2, [r3, #12]
 800279e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80027a0:	2300      	movs	r3, #0
 80027a2:	60bb      	str	r3, [r7, #8]
 80027a4:	4b29      	ldr	r3, [pc, #164]	; (800284c <SystemClock_Config+0xd0>)
 80027a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a8:	4a28      	ldr	r2, [pc, #160]	; (800284c <SystemClock_Config+0xd0>)
 80027aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ae:	6413      	str	r3, [r2, #64]	; 0x40
 80027b0:	4b26      	ldr	r3, [pc, #152]	; (800284c <SystemClock_Config+0xd0>)
 80027b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b8:	60bb      	str	r3, [r7, #8]
 80027ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80027bc:	2300      	movs	r3, #0
 80027be:	607b      	str	r3, [r7, #4]
 80027c0:	4b23      	ldr	r3, [pc, #140]	; (8002850 <SystemClock_Config+0xd4>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80027c8:	4a21      	ldr	r2, [pc, #132]	; (8002850 <SystemClock_Config+0xd4>)
 80027ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027ce:	6013      	str	r3, [r2, #0]
 80027d0:	4b1f      	ldr	r3, [pc, #124]	; (8002850 <SystemClock_Config+0xd4>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80027d8:	607b      	str	r3, [r7, #4]
 80027da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80027dc:	2302      	movs	r3, #2
 80027de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027e0:	2301      	movs	r3, #1
 80027e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80027e4:	2310      	movs	r3, #16
 80027e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027e8:	2302      	movs	r3, #2
 80027ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80027ec:	2300      	movs	r3, #0
 80027ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80027f0:	2310      	movs	r3, #16
 80027f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80027f4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80027f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80027fa:	2304      	movs	r3, #4
 80027fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80027fe:	2307      	movs	r3, #7
 8002800:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002802:	f107 0320 	add.w	r3, r7, #32
 8002806:	4618      	mov	r0, r3
 8002808:	f002 f968 	bl	8004adc <HAL_RCC_OscConfig>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002812:	f000 fa8b 	bl	8002d2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002816:	230f      	movs	r3, #15
 8002818:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800281a:	2302      	movs	r3, #2
 800281c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800281e:	2300      	movs	r3, #0
 8002820:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002822:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002826:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002828:	2300      	movs	r3, #0
 800282a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800282c:	f107 030c 	add.w	r3, r7, #12
 8002830:	2102      	movs	r1, #2
 8002832:	4618      	mov	r0, r3
 8002834:	f002 fbca 	bl	8004fcc <HAL_RCC_ClockConfig>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800283e:	f000 fa75 	bl	8002d2c <Error_Handler>
  }
}
 8002842:	bf00      	nop
 8002844:	3750      	adds	r7, #80	; 0x50
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	40023800 	.word	0x40023800
 8002850:	40007000 	.word	0x40007000

08002854 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800285a:	463b      	mov	r3, r7
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	605a      	str	r2, [r3, #4]
 8002862:	609a      	str	r2, [r3, #8]
 8002864:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002866:	4b4b      	ldr	r3, [pc, #300]	; (8002994 <MX_ADC1_Init+0x140>)
 8002868:	4a4b      	ldr	r2, [pc, #300]	; (8002998 <MX_ADC1_Init+0x144>)
 800286a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800286c:	4b49      	ldr	r3, [pc, #292]	; (8002994 <MX_ADC1_Init+0x140>)
 800286e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002872:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002874:	4b47      	ldr	r3, [pc, #284]	; (8002994 <MX_ADC1_Init+0x140>)
 8002876:	2200      	movs	r2, #0
 8002878:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800287a:	4b46      	ldr	r3, [pc, #280]	; (8002994 <MX_ADC1_Init+0x140>)
 800287c:	2201      	movs	r2, #1
 800287e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002880:	4b44      	ldr	r3, [pc, #272]	; (8002994 <MX_ADC1_Init+0x140>)
 8002882:	2200      	movs	r2, #0
 8002884:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002886:	4b43      	ldr	r3, [pc, #268]	; (8002994 <MX_ADC1_Init+0x140>)
 8002888:	2200      	movs	r2, #0
 800288a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800288e:	4b41      	ldr	r3, [pc, #260]	; (8002994 <MX_ADC1_Init+0x140>)
 8002890:	2200      	movs	r2, #0
 8002892:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002894:	4b3f      	ldr	r3, [pc, #252]	; (8002994 <MX_ADC1_Init+0x140>)
 8002896:	4a41      	ldr	r2, [pc, #260]	; (800299c <MX_ADC1_Init+0x148>)
 8002898:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800289a:	4b3e      	ldr	r3, [pc, #248]	; (8002994 <MX_ADC1_Init+0x140>)
 800289c:	2200      	movs	r2, #0
 800289e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 7;
 80028a0:	4b3c      	ldr	r3, [pc, #240]	; (8002994 <MX_ADC1_Init+0x140>)
 80028a2:	2207      	movs	r2, #7
 80028a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80028a6:	4b3b      	ldr	r3, [pc, #236]	; (8002994 <MX_ADC1_Init+0x140>)
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80028ae:	4b39      	ldr	r3, [pc, #228]	; (8002994 <MX_ADC1_Init+0x140>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80028b4:	4837      	ldr	r0, [pc, #220]	; (8002994 <MX_ADC1_Init+0x140>)
 80028b6:	f000 fd2f 	bl	8003318 <HAL_ADC_Init>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80028c0:	f000 fa34 	bl	8002d2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80028c4:	2300      	movs	r3, #0
 80028c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80028c8:	2301      	movs	r3, #1
 80028ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80028cc:	2301      	movs	r3, #1
 80028ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028d0:	463b      	mov	r3, r7
 80028d2:	4619      	mov	r1, r3
 80028d4:	482f      	ldr	r0, [pc, #188]	; (8002994 <MX_ADC1_Init+0x140>)
 80028d6:	f000 ff8b 	bl	80037f0 <HAL_ADC_ConfigChannel>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80028e0:	f000 fa24 	bl	8002d2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80028e4:	2301      	movs	r3, #1
 80028e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80028e8:	2302      	movs	r3, #2
 80028ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028ec:	463b      	mov	r3, r7
 80028ee:	4619      	mov	r1, r3
 80028f0:	4828      	ldr	r0, [pc, #160]	; (8002994 <MX_ADC1_Init+0x140>)
 80028f2:	f000 ff7d 	bl	80037f0 <HAL_ADC_ConfigChannel>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80028fc:	f000 fa16 	bl	8002d2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002900:	2304      	movs	r3, #4
 8002902:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002904:	2303      	movs	r3, #3
 8002906:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002908:	463b      	mov	r3, r7
 800290a:	4619      	mov	r1, r3
 800290c:	4821      	ldr	r0, [pc, #132]	; (8002994 <MX_ADC1_Init+0x140>)
 800290e:	f000 ff6f 	bl	80037f0 <HAL_ADC_ConfigChannel>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002918:	f000 fa08 	bl	8002d2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800291c:	2308      	movs	r3, #8
 800291e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002920:	2304      	movs	r3, #4
 8002922:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002924:	463b      	mov	r3, r7
 8002926:	4619      	mov	r1, r3
 8002928:	481a      	ldr	r0, [pc, #104]	; (8002994 <MX_ADC1_Init+0x140>)
 800292a:	f000 ff61 	bl	80037f0 <HAL_ADC_ConfigChannel>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002934:	f000 f9fa 	bl	8002d2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002938:	230a      	movs	r3, #10
 800293a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800293c:	2305      	movs	r3, #5
 800293e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002940:	463b      	mov	r3, r7
 8002942:	4619      	mov	r1, r3
 8002944:	4813      	ldr	r0, [pc, #76]	; (8002994 <MX_ADC1_Init+0x140>)
 8002946:	f000 ff53 	bl	80037f0 <HAL_ADC_ConfigChannel>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8002950:	f000 f9ec 	bl	8002d2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002954:	230c      	movs	r3, #12
 8002956:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8002958:	2306      	movs	r3, #6
 800295a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800295c:	463b      	mov	r3, r7
 800295e:	4619      	mov	r1, r3
 8002960:	480c      	ldr	r0, [pc, #48]	; (8002994 <MX_ADC1_Init+0x140>)
 8002962:	f000 ff45 	bl	80037f0 <HAL_ADC_ConfigChannel>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 800296c:	f000 f9de 	bl	8002d2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002970:	230d      	movs	r3, #13
 8002972:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8002974:	2307      	movs	r3, #7
 8002976:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002978:	463b      	mov	r3, r7
 800297a:	4619      	mov	r1, r3
 800297c:	4805      	ldr	r0, [pc, #20]	; (8002994 <MX_ADC1_Init+0x140>)
 800297e:	f000 ff37 	bl	80037f0 <HAL_ADC_ConfigChannel>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8002988:	f000 f9d0 	bl	8002d2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800298c:	bf00      	nop
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	2000002c 	.word	0x2000002c
 8002998:	40012000 	.word	0x40012000
 800299c:	0f000001 	.word	0x0f000001

080029a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b08e      	sub	sp, #56	; 0x38
 80029a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029aa:	2200      	movs	r2, #0
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	605a      	str	r2, [r3, #4]
 80029b0:	609a      	str	r2, [r3, #8]
 80029b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029b4:	f107 0320 	add.w	r3, r7, #32
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029be:	1d3b      	adds	r3, r7, #4
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	605a      	str	r2, [r3, #4]
 80029c6:	609a      	str	r2, [r3, #8]
 80029c8:	60da      	str	r2, [r3, #12]
 80029ca:	611a      	str	r2, [r3, #16]
 80029cc:	615a      	str	r2, [r3, #20]
 80029ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80029d0:	4b3c      	ldr	r3, [pc, #240]	; (8002ac4 <MX_TIM3_Init+0x124>)
 80029d2:	4a3d      	ldr	r2, [pc, #244]	; (8002ac8 <MX_TIM3_Init+0x128>)
 80029d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 80029d6:	4b3b      	ldr	r3, [pc, #236]	; (8002ac4 <MX_TIM3_Init+0x124>)
 80029d8:	2263      	movs	r2, #99	; 0x63
 80029da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029dc:	4b39      	ldr	r3, [pc, #228]	; (8002ac4 <MX_TIM3_Init+0x124>)
 80029de:	2200      	movs	r2, #0
 80029e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 210;
 80029e2:	4b38      	ldr	r3, [pc, #224]	; (8002ac4 <MX_TIM3_Init+0x124>)
 80029e4:	22d2      	movs	r2, #210	; 0xd2
 80029e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029e8:	4b36      	ldr	r3, [pc, #216]	; (8002ac4 <MX_TIM3_Init+0x124>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029ee:	4b35      	ldr	r3, [pc, #212]	; (8002ac4 <MX_TIM3_Init+0x124>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80029f4:	4833      	ldr	r0, [pc, #204]	; (8002ac4 <MX_TIM3_Init+0x124>)
 80029f6:	f002 fd09 	bl	800540c <HAL_TIM_Base_Init>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8002a00:	f000 f994 	bl	8002d2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a08:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002a0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a0e:	4619      	mov	r1, r3
 8002a10:	482c      	ldr	r0, [pc, #176]	; (8002ac4 <MX_TIM3_Init+0x124>)
 8002a12:	f003 f8db 	bl	8005bcc <HAL_TIM_ConfigClockSource>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8002a1c:	f000 f986 	bl	8002d2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002a20:	4828      	ldr	r0, [pc, #160]	; (8002ac4 <MX_TIM3_Init+0x124>)
 8002a22:	f002 fdff 	bl	8005624 <HAL_TIM_PWM_Init>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8002a2c:	f000 f97e 	bl	8002d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a30:	2300      	movs	r3, #0
 8002a32:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a34:	2300      	movs	r3, #0
 8002a36:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a38:	f107 0320 	add.w	r3, r7, #32
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4821      	ldr	r0, [pc, #132]	; (8002ac4 <MX_TIM3_Init+0x124>)
 8002a40:	f003 fc80 	bl	8006344 <HAL_TIMEx_MasterConfigSynchronization>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8002a4a:	f000 f96f 	bl	8002d2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a4e:	2360      	movs	r3, #96	; 0x60
 8002a50:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a52:	2300      	movs	r3, #0
 8002a54:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a56:	2300      	movs	r3, #0
 8002a58:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a5e:	1d3b      	adds	r3, r7, #4
 8002a60:	2200      	movs	r2, #0
 8002a62:	4619      	mov	r1, r3
 8002a64:	4817      	ldr	r0, [pc, #92]	; (8002ac4 <MX_TIM3_Init+0x124>)
 8002a66:	f002 ffef 	bl	8005a48 <HAL_TIM_PWM_ConfigChannel>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8002a70:	f000 f95c 	bl	8002d2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a74:	1d3b      	adds	r3, r7, #4
 8002a76:	2204      	movs	r2, #4
 8002a78:	4619      	mov	r1, r3
 8002a7a:	4812      	ldr	r0, [pc, #72]	; (8002ac4 <MX_TIM3_Init+0x124>)
 8002a7c:	f002 ffe4 	bl	8005a48 <HAL_TIM_PWM_ConfigChannel>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 8002a86:	f000 f951 	bl	8002d2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002a8a:	1d3b      	adds	r3, r7, #4
 8002a8c:	2208      	movs	r2, #8
 8002a8e:	4619      	mov	r1, r3
 8002a90:	480c      	ldr	r0, [pc, #48]	; (8002ac4 <MX_TIM3_Init+0x124>)
 8002a92:	f002 ffd9 	bl	8005a48 <HAL_TIM_PWM_ConfigChannel>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <MX_TIM3_Init+0x100>
  {
    Error_Handler();
 8002a9c:	f000 f946 	bl	8002d2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002aa0:	1d3b      	adds	r3, r7, #4
 8002aa2:	220c      	movs	r2, #12
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4807      	ldr	r0, [pc, #28]	; (8002ac4 <MX_TIM3_Init+0x124>)
 8002aa8:	f002 ffce 	bl	8005a48 <HAL_TIM_PWM_ConfigChannel>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <MX_TIM3_Init+0x116>
  {
    Error_Handler();
 8002ab2:	f000 f93b 	bl	8002d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002ab6:	4803      	ldr	r0, [pc, #12]	; (8002ac4 <MX_TIM3_Init+0x124>)
 8002ab8:	f000 fa66 	bl	8002f88 <HAL_TIM_MspPostInit>

}
 8002abc:	bf00      	nop
 8002abe:	3738      	adds	r7, #56	; 0x38
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	200000d4 	.word	0x200000d4
 8002ac8:	40000400 	.word	0x40000400

08002acc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ad2:	f107 0308 	add.w	r3, r7, #8
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	601a      	str	r2, [r3, #0]
 8002ada:	605a      	str	r2, [r3, #4]
 8002adc:	609a      	str	r2, [r3, #8]
 8002ade:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ae0:	463b      	mov	r3, r7
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002ae8:	4b1d      	ldr	r3, [pc, #116]	; (8002b60 <MX_TIM4_Init+0x94>)
 8002aea:	4a1e      	ldr	r2, [pc, #120]	; (8002b64 <MX_TIM4_Init+0x98>)
 8002aec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100;
 8002aee:	4b1c      	ldr	r3, [pc, #112]	; (8002b60 <MX_TIM4_Init+0x94>)
 8002af0:	2264      	movs	r2, #100	; 0x64
 8002af2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002af4:	4b1a      	ldr	r3, [pc, #104]	; (8002b60 <MX_TIM4_Init+0x94>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 8400;
 8002afa:	4b19      	ldr	r3, [pc, #100]	; (8002b60 <MX_TIM4_Init+0x94>)
 8002afc:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8002b00:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b02:	4b17      	ldr	r3, [pc, #92]	; (8002b60 <MX_TIM4_Init+0x94>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b08:	4b15      	ldr	r3, [pc, #84]	; (8002b60 <MX_TIM4_Init+0x94>)
 8002b0a:	2280      	movs	r2, #128	; 0x80
 8002b0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002b0e:	4814      	ldr	r0, [pc, #80]	; (8002b60 <MX_TIM4_Init+0x94>)
 8002b10:	f002 fc7c 	bl	800540c <HAL_TIM_Base_Init>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002b1a:	f000 f907 	bl	8002d2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b22:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002b24:	f107 0308 	add.w	r3, r7, #8
 8002b28:	4619      	mov	r1, r3
 8002b2a:	480d      	ldr	r0, [pc, #52]	; (8002b60 <MX_TIM4_Init+0x94>)
 8002b2c:	f003 f84e 	bl	8005bcc <HAL_TIM_ConfigClockSource>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002b36:	f000 f8f9 	bl	8002d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002b42:	463b      	mov	r3, r7
 8002b44:	4619      	mov	r1, r3
 8002b46:	4806      	ldr	r0, [pc, #24]	; (8002b60 <MX_TIM4_Init+0x94>)
 8002b48:	f003 fbfc 	bl	8006344 <HAL_TIMEx_MasterConfigSynchronization>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002b52:	f000 f8eb 	bl	8002d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002b56:	bf00      	nop
 8002b58:	3718      	adds	r7, #24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	2000011c 	.word	0x2000011c
 8002b64:	40000800 	.word	0x40000800

08002b68 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b6c:	4b11      	ldr	r3, [pc, #68]	; (8002bb4 <MX_USART1_UART_Init+0x4c>)
 8002b6e:	4a12      	ldr	r2, [pc, #72]	; (8002bb8 <MX_USART1_UART_Init+0x50>)
 8002b70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002b72:	4b10      	ldr	r3, [pc, #64]	; (8002bb4 <MX_USART1_UART_Init+0x4c>)
 8002b74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b7a:	4b0e      	ldr	r3, [pc, #56]	; (8002bb4 <MX_USART1_UART_Init+0x4c>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b80:	4b0c      	ldr	r3, [pc, #48]	; (8002bb4 <MX_USART1_UART_Init+0x4c>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b86:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <MX_USART1_UART_Init+0x4c>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b8c:	4b09      	ldr	r3, [pc, #36]	; (8002bb4 <MX_USART1_UART_Init+0x4c>)
 8002b8e:	220c      	movs	r2, #12
 8002b90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b92:	4b08      	ldr	r3, [pc, #32]	; (8002bb4 <MX_USART1_UART_Init+0x4c>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b98:	4b06      	ldr	r3, [pc, #24]	; (8002bb4 <MX_USART1_UART_Init+0x4c>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b9e:	4805      	ldr	r0, [pc, #20]	; (8002bb4 <MX_USART1_UART_Init+0x4c>)
 8002ba0:	f003 fc52 	bl	8006448 <HAL_UART_Init>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002baa:	f000 f8bf 	bl	8002d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002bae:	bf00      	nop
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	20000164 	.word	0x20000164
 8002bb8:	40011000 	.word	0x40011000

08002bbc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002bc0:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <MX_USART2_UART_Init+0x4c>)
 8002bc2:	4a12      	ldr	r2, [pc, #72]	; (8002c0c <MX_USART2_UART_Init+0x50>)
 8002bc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002bc6:	4b10      	ldr	r3, [pc, #64]	; (8002c08 <MX_USART2_UART_Init+0x4c>)
 8002bc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bcc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002bce:	4b0e      	ldr	r3, [pc, #56]	; (8002c08 <MX_USART2_UART_Init+0x4c>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002bd4:	4b0c      	ldr	r3, [pc, #48]	; (8002c08 <MX_USART2_UART_Init+0x4c>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002bda:	4b0b      	ldr	r3, [pc, #44]	; (8002c08 <MX_USART2_UART_Init+0x4c>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002be0:	4b09      	ldr	r3, [pc, #36]	; (8002c08 <MX_USART2_UART_Init+0x4c>)
 8002be2:	220c      	movs	r2, #12
 8002be4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002be6:	4b08      	ldr	r3, [pc, #32]	; (8002c08 <MX_USART2_UART_Init+0x4c>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bec:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <MX_USART2_UART_Init+0x4c>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002bf2:	4805      	ldr	r0, [pc, #20]	; (8002c08 <MX_USART2_UART_Init+0x4c>)
 8002bf4:	f003 fc28 	bl	8006448 <HAL_UART_Init>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002bfe:	f000 f895 	bl	8002d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c02:	bf00      	nop
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	200001a8 	.word	0x200001a8
 8002c0c:	40004400 	.word	0x40004400

08002c10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002c16:	2300      	movs	r3, #0
 8002c18:	607b      	str	r3, [r7, #4]
 8002c1a:	4b0c      	ldr	r3, [pc, #48]	; (8002c4c <MX_DMA_Init+0x3c>)
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1e:	4a0b      	ldr	r2, [pc, #44]	; (8002c4c <MX_DMA_Init+0x3c>)
 8002c20:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c24:	6313      	str	r3, [r2, #48]	; 0x30
 8002c26:	4b09      	ldr	r3, [pc, #36]	; (8002c4c <MX_DMA_Init+0x3c>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c2e:	607b      	str	r3, [r7, #4]
 8002c30:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002c32:	2200      	movs	r2, #0
 8002c34:	2100      	movs	r1, #0
 8002c36:	2038      	movs	r0, #56	; 0x38
 8002c38:	f001 f95f 	bl	8003efa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002c3c:	2038      	movs	r0, #56	; 0x38
 8002c3e:	f001 f978 	bl	8003f32 <HAL_NVIC_EnableIRQ>

}
 8002c42:	bf00      	nop
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	40023800 	.word	0x40023800

08002c50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b08a      	sub	sp, #40	; 0x28
 8002c54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c56:	f107 0314 	add.w	r3, r7, #20
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	601a      	str	r2, [r3, #0]
 8002c5e:	605a      	str	r2, [r3, #4]
 8002c60:	609a      	str	r2, [r3, #8]
 8002c62:	60da      	str	r2, [r3, #12]
 8002c64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c66:	2300      	movs	r3, #0
 8002c68:	613b      	str	r3, [r7, #16]
 8002c6a:	4b2d      	ldr	r3, [pc, #180]	; (8002d20 <MX_GPIO_Init+0xd0>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6e:	4a2c      	ldr	r2, [pc, #176]	; (8002d20 <MX_GPIO_Init+0xd0>)
 8002c70:	f043 0304 	orr.w	r3, r3, #4
 8002c74:	6313      	str	r3, [r2, #48]	; 0x30
 8002c76:	4b2a      	ldr	r3, [pc, #168]	; (8002d20 <MX_GPIO_Init+0xd0>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	f003 0304 	and.w	r3, r3, #4
 8002c7e:	613b      	str	r3, [r7, #16]
 8002c80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c82:	2300      	movs	r3, #0
 8002c84:	60fb      	str	r3, [r7, #12]
 8002c86:	4b26      	ldr	r3, [pc, #152]	; (8002d20 <MX_GPIO_Init+0xd0>)
 8002c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8a:	4a25      	ldr	r2, [pc, #148]	; (8002d20 <MX_GPIO_Init+0xd0>)
 8002c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c90:	6313      	str	r3, [r2, #48]	; 0x30
 8002c92:	4b23      	ldr	r3, [pc, #140]	; (8002d20 <MX_GPIO_Init+0xd0>)
 8002c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	60bb      	str	r3, [r7, #8]
 8002ca2:	4b1f      	ldr	r3, [pc, #124]	; (8002d20 <MX_GPIO_Init+0xd0>)
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca6:	4a1e      	ldr	r2, [pc, #120]	; (8002d20 <MX_GPIO_Init+0xd0>)
 8002ca8:	f043 0301 	orr.w	r3, r3, #1
 8002cac:	6313      	str	r3, [r2, #48]	; 0x30
 8002cae:	4b1c      	ldr	r3, [pc, #112]	; (8002d20 <MX_GPIO_Init+0xd0>)
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	60bb      	str	r3, [r7, #8]
 8002cb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cba:	2300      	movs	r3, #0
 8002cbc:	607b      	str	r3, [r7, #4]
 8002cbe:	4b18      	ldr	r3, [pc, #96]	; (8002d20 <MX_GPIO_Init+0xd0>)
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc2:	4a17      	ldr	r2, [pc, #92]	; (8002d20 <MX_GPIO_Init+0xd0>)
 8002cc4:	f043 0302 	orr.w	r3, r3, #2
 8002cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cca:	4b15      	ldr	r3, [pc, #84]	; (8002d20 <MX_GPIO_Init+0xd0>)
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	607b      	str	r3, [r7, #4]
 8002cd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	2120      	movs	r1, #32
 8002cda:	4812      	ldr	r0, [pc, #72]	; (8002d24 <MX_GPIO_Init+0xd4>)
 8002cdc:	f001 feca 	bl	8004a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002ce0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ce4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002ce6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002cea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cec:	2300      	movs	r3, #0
 8002cee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002cf0:	f107 0314 	add.w	r3, r7, #20
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	480c      	ldr	r0, [pc, #48]	; (8002d28 <MX_GPIO_Init+0xd8>)
 8002cf8:	f001 fd38 	bl	800476c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002cfc:	2320      	movs	r3, #32
 8002cfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d00:	2301      	movs	r3, #1
 8002d02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d04:	2300      	movs	r3, #0
 8002d06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002d0c:	f107 0314 	add.w	r3, r7, #20
 8002d10:	4619      	mov	r1, r3
 8002d12:	4804      	ldr	r0, [pc, #16]	; (8002d24 <MX_GPIO_Init+0xd4>)
 8002d14:	f001 fd2a 	bl	800476c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002d18:	bf00      	nop
 8002d1a:	3728      	adds	r7, #40	; 0x28
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40023800 	.word	0x40023800
 8002d24:	40020000 	.word	0x40020000
 8002d28:	40020800 	.word	0x40020800

08002d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d30:	b672      	cpsid	i
}
 8002d32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d34:	e7fe      	b.n	8002d34 <Error_Handler+0x8>
	...

08002d38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d3e:	2300      	movs	r3, #0
 8002d40:	607b      	str	r3, [r7, #4]
 8002d42:	4b10      	ldr	r3, [pc, #64]	; (8002d84 <HAL_MspInit+0x4c>)
 8002d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d46:	4a0f      	ldr	r2, [pc, #60]	; (8002d84 <HAL_MspInit+0x4c>)
 8002d48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d4e:	4b0d      	ldr	r3, [pc, #52]	; (8002d84 <HAL_MspInit+0x4c>)
 8002d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d56:	607b      	str	r3, [r7, #4]
 8002d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	603b      	str	r3, [r7, #0]
 8002d5e:	4b09      	ldr	r3, [pc, #36]	; (8002d84 <HAL_MspInit+0x4c>)
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	4a08      	ldr	r2, [pc, #32]	; (8002d84 <HAL_MspInit+0x4c>)
 8002d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d68:	6413      	str	r3, [r2, #64]	; 0x40
 8002d6a:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <HAL_MspInit+0x4c>)
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d72:	603b      	str	r3, [r7, #0]
 8002d74:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002d76:	2007      	movs	r0, #7
 8002d78:	f001 f8b4 	bl	8003ee4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d7c:	bf00      	nop
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40023800 	.word	0x40023800

08002d88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b08c      	sub	sp, #48	; 0x30
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d90:	f107 031c 	add.w	r3, r7, #28
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	605a      	str	r2, [r3, #4]
 8002d9a:	609a      	str	r2, [r3, #8]
 8002d9c:	60da      	str	r2, [r3, #12]
 8002d9e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a4e      	ldr	r2, [pc, #312]	; (8002ee0 <HAL_ADC_MspInit+0x158>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	f040 8095 	bne.w	8002ed6 <HAL_ADC_MspInit+0x14e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002dac:	2300      	movs	r3, #0
 8002dae:	61bb      	str	r3, [r7, #24]
 8002db0:	4b4c      	ldr	r3, [pc, #304]	; (8002ee4 <HAL_ADC_MspInit+0x15c>)
 8002db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db4:	4a4b      	ldr	r2, [pc, #300]	; (8002ee4 <HAL_ADC_MspInit+0x15c>)
 8002db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dba:	6453      	str	r3, [r2, #68]	; 0x44
 8002dbc:	4b49      	ldr	r3, [pc, #292]	; (8002ee4 <HAL_ADC_MspInit+0x15c>)
 8002dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc4:	61bb      	str	r3, [r7, #24]
 8002dc6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dc8:	2300      	movs	r3, #0
 8002dca:	617b      	str	r3, [r7, #20]
 8002dcc:	4b45      	ldr	r3, [pc, #276]	; (8002ee4 <HAL_ADC_MspInit+0x15c>)
 8002dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd0:	4a44      	ldr	r2, [pc, #272]	; (8002ee4 <HAL_ADC_MspInit+0x15c>)
 8002dd2:	f043 0304 	orr.w	r3, r3, #4
 8002dd6:	6313      	str	r3, [r2, #48]	; 0x30
 8002dd8:	4b42      	ldr	r3, [pc, #264]	; (8002ee4 <HAL_ADC_MspInit+0x15c>)
 8002dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	617b      	str	r3, [r7, #20]
 8002de2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002de4:	2300      	movs	r3, #0
 8002de6:	613b      	str	r3, [r7, #16]
 8002de8:	4b3e      	ldr	r3, [pc, #248]	; (8002ee4 <HAL_ADC_MspInit+0x15c>)
 8002dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dec:	4a3d      	ldr	r2, [pc, #244]	; (8002ee4 <HAL_ADC_MspInit+0x15c>)
 8002dee:	f043 0301 	orr.w	r3, r3, #1
 8002df2:	6313      	str	r3, [r2, #48]	; 0x30
 8002df4:	4b3b      	ldr	r3, [pc, #236]	; (8002ee4 <HAL_ADC_MspInit+0x15c>)
 8002df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	613b      	str	r3, [r7, #16]
 8002dfe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e00:	2300      	movs	r3, #0
 8002e02:	60fb      	str	r3, [r7, #12]
 8002e04:	4b37      	ldr	r3, [pc, #220]	; (8002ee4 <HAL_ADC_MspInit+0x15c>)
 8002e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e08:	4a36      	ldr	r2, [pc, #216]	; (8002ee4 <HAL_ADC_MspInit+0x15c>)
 8002e0a:	f043 0302 	orr.w	r3, r3, #2
 8002e0e:	6313      	str	r3, [r2, #48]	; 0x30
 8002e10:	4b34      	ldr	r3, [pc, #208]	; (8002ee4 <HAL_ADC_MspInit+0x15c>)
 8002e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	60fb      	str	r3, [r7, #12]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002e1c:	230f      	movs	r3, #15
 8002e1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e20:	2303      	movs	r3, #3
 8002e22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e24:	2300      	movs	r3, #0
 8002e26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e28:	f107 031c 	add.w	r3, r7, #28
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	482e      	ldr	r0, [pc, #184]	; (8002ee8 <HAL_ADC_MspInit+0x160>)
 8002e30:	f001 fc9c 	bl	800476c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8002e34:	2313      	movs	r3, #19
 8002e36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e40:	f107 031c 	add.w	r3, r7, #28
 8002e44:	4619      	mov	r1, r3
 8002e46:	4829      	ldr	r0, [pc, #164]	; (8002eec <HAL_ADC_MspInit+0x164>)
 8002e48:	f001 fc90 	bl	800476c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e50:	2303      	movs	r3, #3
 8002e52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e54:	2300      	movs	r3, #0
 8002e56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e58:	f107 031c 	add.w	r3, r7, #28
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4824      	ldr	r0, [pc, #144]	; (8002ef0 <HAL_ADC_MspInit+0x168>)
 8002e60:	f001 fc84 	bl	800476c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002e64:	4b23      	ldr	r3, [pc, #140]	; (8002ef4 <HAL_ADC_MspInit+0x16c>)
 8002e66:	4a24      	ldr	r2, [pc, #144]	; (8002ef8 <HAL_ADC_MspInit+0x170>)
 8002e68:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002e6a:	4b22      	ldr	r3, [pc, #136]	; (8002ef4 <HAL_ADC_MspInit+0x16c>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e70:	4b20      	ldr	r3, [pc, #128]	; (8002ef4 <HAL_ADC_MspInit+0x16c>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e76:	4b1f      	ldr	r3, [pc, #124]	; (8002ef4 <HAL_ADC_MspInit+0x16c>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002e7c:	4b1d      	ldr	r3, [pc, #116]	; (8002ef4 <HAL_ADC_MspInit+0x16c>)
 8002e7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e82:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e84:	4b1b      	ldr	r3, [pc, #108]	; (8002ef4 <HAL_ADC_MspInit+0x16c>)
 8002e86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e8a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e8c:	4b19      	ldr	r3, [pc, #100]	; (8002ef4 <HAL_ADC_MspInit+0x16c>)
 8002e8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e92:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002e94:	4b17      	ldr	r3, [pc, #92]	; (8002ef4 <HAL_ADC_MspInit+0x16c>)
 8002e96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e9a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002e9c:	4b15      	ldr	r3, [pc, #84]	; (8002ef4 <HAL_ADC_MspInit+0x16c>)
 8002e9e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ea2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ea4:	4b13      	ldr	r3, [pc, #76]	; (8002ef4 <HAL_ADC_MspInit+0x16c>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002eaa:	4812      	ldr	r0, [pc, #72]	; (8002ef4 <HAL_ADC_MspInit+0x16c>)
 8002eac:	f001 f85c 	bl	8003f68 <HAL_DMA_Init>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <HAL_ADC_MspInit+0x132>
    {
      Error_Handler();
 8002eb6:	f7ff ff39 	bl	8002d2c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a0d      	ldr	r2, [pc, #52]	; (8002ef4 <HAL_ADC_MspInit+0x16c>)
 8002ebe:	639a      	str	r2, [r3, #56]	; 0x38
 8002ec0:	4a0c      	ldr	r2, [pc, #48]	; (8002ef4 <HAL_ADC_MspInit+0x16c>)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	2100      	movs	r1, #0
 8002eca:	2012      	movs	r0, #18
 8002ecc:	f001 f815 	bl	8003efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002ed0:	2012      	movs	r0, #18
 8002ed2:	f001 f82e 	bl	8003f32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002ed6:	bf00      	nop
 8002ed8:	3730      	adds	r7, #48	; 0x30
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	40012000 	.word	0x40012000
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	40020800 	.word	0x40020800
 8002eec:	40020000 	.word	0x40020000
 8002ef0:	40020400 	.word	0x40020400
 8002ef4:	20000074 	.word	0x20000074
 8002ef8:	40026410 	.word	0x40026410

08002efc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a1c      	ldr	r2, [pc, #112]	; (8002f7c <HAL_TIM_Base_MspInit+0x80>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d116      	bne.n	8002f3c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f0e:	2300      	movs	r3, #0
 8002f10:	60fb      	str	r3, [r7, #12]
 8002f12:	4b1b      	ldr	r3, [pc, #108]	; (8002f80 <HAL_TIM_Base_MspInit+0x84>)
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	4a1a      	ldr	r2, [pc, #104]	; (8002f80 <HAL_TIM_Base_MspInit+0x84>)
 8002f18:	f043 0302 	orr.w	r3, r3, #2
 8002f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f1e:	4b18      	ldr	r3, [pc, #96]	; (8002f80 <HAL_TIM_Base_MspInit+0x84>)
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	60fb      	str	r3, [r7, #12]
 8002f28:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	201d      	movs	r0, #29
 8002f30:	f000 ffe3 	bl	8003efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002f34:	201d      	movs	r0, #29
 8002f36:	f000 fffc 	bl	8003f32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002f3a:	e01a      	b.n	8002f72 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM4)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a10      	ldr	r2, [pc, #64]	; (8002f84 <HAL_TIM_Base_MspInit+0x88>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d115      	bne.n	8002f72 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f46:	2300      	movs	r3, #0
 8002f48:	60bb      	str	r3, [r7, #8]
 8002f4a:	4b0d      	ldr	r3, [pc, #52]	; (8002f80 <HAL_TIM_Base_MspInit+0x84>)
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	4a0c      	ldr	r2, [pc, #48]	; (8002f80 <HAL_TIM_Base_MspInit+0x84>)
 8002f50:	f043 0304 	orr.w	r3, r3, #4
 8002f54:	6413      	str	r3, [r2, #64]	; 0x40
 8002f56:	4b0a      	ldr	r3, [pc, #40]	; (8002f80 <HAL_TIM_Base_MspInit+0x84>)
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	f003 0304 	and.w	r3, r3, #4
 8002f5e:	60bb      	str	r3, [r7, #8]
 8002f60:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002f62:	2200      	movs	r2, #0
 8002f64:	2100      	movs	r1, #0
 8002f66:	201e      	movs	r0, #30
 8002f68:	f000 ffc7 	bl	8003efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002f6c:	201e      	movs	r0, #30
 8002f6e:	f000 ffe0 	bl	8003f32 <HAL_NVIC_EnableIRQ>
}
 8002f72:	bf00      	nop
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	40000400 	.word	0x40000400
 8002f80:	40023800 	.word	0x40023800
 8002f84:	40000800 	.word	0x40000800

08002f88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b088      	sub	sp, #32
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f90:	f107 030c 	add.w	r3, r7, #12
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	605a      	str	r2, [r3, #4]
 8002f9a:	609a      	str	r2, [r3, #8]
 8002f9c:	60da      	str	r2, [r3, #12]
 8002f9e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a12      	ldr	r2, [pc, #72]	; (8002ff0 <HAL_TIM_MspPostInit+0x68>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d11e      	bne.n	8002fe8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002faa:	2300      	movs	r3, #0
 8002fac:	60bb      	str	r3, [r7, #8]
 8002fae:	4b11      	ldr	r3, [pc, #68]	; (8002ff4 <HAL_TIM_MspPostInit+0x6c>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	4a10      	ldr	r2, [pc, #64]	; (8002ff4 <HAL_TIM_MspPostInit+0x6c>)
 8002fb4:	f043 0304 	orr.w	r3, r3, #4
 8002fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fba:	4b0e      	ldr	r3, [pc, #56]	; (8002ff4 <HAL_TIM_MspPostInit+0x6c>)
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbe:	f003 0304 	and.w	r3, r3, #4
 8002fc2:	60bb      	str	r3, [r7, #8]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002fc6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002fca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fcc:	2302      	movs	r3, #2
 8002fce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002fd8:	2302      	movs	r3, #2
 8002fda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fdc:	f107 030c 	add.w	r3, r7, #12
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	4805      	ldr	r0, [pc, #20]	; (8002ff8 <HAL_TIM_MspPostInit+0x70>)
 8002fe4:	f001 fbc2 	bl	800476c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002fe8:	bf00      	nop
 8002fea:	3720      	adds	r7, #32
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	40000400 	.word	0x40000400
 8002ff4:	40023800 	.word	0x40023800
 8002ff8:	40020800 	.word	0x40020800

08002ffc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b08c      	sub	sp, #48	; 0x30
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003004:	f107 031c 	add.w	r3, r7, #28
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	605a      	str	r2, [r3, #4]
 800300e:	609a      	str	r2, [r3, #8]
 8003010:	60da      	str	r2, [r3, #12]
 8003012:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a36      	ldr	r2, [pc, #216]	; (80030f4 <HAL_UART_MspInit+0xf8>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d135      	bne.n	800308a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800301e:	2300      	movs	r3, #0
 8003020:	61bb      	str	r3, [r7, #24]
 8003022:	4b35      	ldr	r3, [pc, #212]	; (80030f8 <HAL_UART_MspInit+0xfc>)
 8003024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003026:	4a34      	ldr	r2, [pc, #208]	; (80030f8 <HAL_UART_MspInit+0xfc>)
 8003028:	f043 0310 	orr.w	r3, r3, #16
 800302c:	6453      	str	r3, [r2, #68]	; 0x44
 800302e:	4b32      	ldr	r3, [pc, #200]	; (80030f8 <HAL_UART_MspInit+0xfc>)
 8003030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003032:	f003 0310 	and.w	r3, r3, #16
 8003036:	61bb      	str	r3, [r7, #24]
 8003038:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800303a:	2300      	movs	r3, #0
 800303c:	617b      	str	r3, [r7, #20]
 800303e:	4b2e      	ldr	r3, [pc, #184]	; (80030f8 <HAL_UART_MspInit+0xfc>)
 8003040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003042:	4a2d      	ldr	r2, [pc, #180]	; (80030f8 <HAL_UART_MspInit+0xfc>)
 8003044:	f043 0301 	orr.w	r3, r3, #1
 8003048:	6313      	str	r3, [r2, #48]	; 0x30
 800304a:	4b2b      	ldr	r3, [pc, #172]	; (80030f8 <HAL_UART_MspInit+0xfc>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	617b      	str	r3, [r7, #20]
 8003054:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003056:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800305a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305c:	2302      	movs	r3, #2
 800305e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003060:	2300      	movs	r3, #0
 8003062:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003064:	2303      	movs	r3, #3
 8003066:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003068:	2307      	movs	r3, #7
 800306a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800306c:	f107 031c 	add.w	r3, r7, #28
 8003070:	4619      	mov	r1, r3
 8003072:	4822      	ldr	r0, [pc, #136]	; (80030fc <HAL_UART_MspInit+0x100>)
 8003074:	f001 fb7a 	bl	800476c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003078:	2200      	movs	r2, #0
 800307a:	2100      	movs	r1, #0
 800307c:	2025      	movs	r0, #37	; 0x25
 800307e:	f000 ff3c 	bl	8003efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003082:	2025      	movs	r0, #37	; 0x25
 8003084:	f000 ff55 	bl	8003f32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003088:	e030      	b.n	80030ec <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a1c      	ldr	r2, [pc, #112]	; (8003100 <HAL_UART_MspInit+0x104>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d12b      	bne.n	80030ec <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003094:	2300      	movs	r3, #0
 8003096:	613b      	str	r3, [r7, #16]
 8003098:	4b17      	ldr	r3, [pc, #92]	; (80030f8 <HAL_UART_MspInit+0xfc>)
 800309a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309c:	4a16      	ldr	r2, [pc, #88]	; (80030f8 <HAL_UART_MspInit+0xfc>)
 800309e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030a2:	6413      	str	r3, [r2, #64]	; 0x40
 80030a4:	4b14      	ldr	r3, [pc, #80]	; (80030f8 <HAL_UART_MspInit+0xfc>)
 80030a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ac:	613b      	str	r3, [r7, #16]
 80030ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030b0:	2300      	movs	r3, #0
 80030b2:	60fb      	str	r3, [r7, #12]
 80030b4:	4b10      	ldr	r3, [pc, #64]	; (80030f8 <HAL_UART_MspInit+0xfc>)
 80030b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b8:	4a0f      	ldr	r2, [pc, #60]	; (80030f8 <HAL_UART_MspInit+0xfc>)
 80030ba:	f043 0301 	orr.w	r3, r3, #1
 80030be:	6313      	str	r3, [r2, #48]	; 0x30
 80030c0:	4b0d      	ldr	r3, [pc, #52]	; (80030f8 <HAL_UART_MspInit+0xfc>)
 80030c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	60fb      	str	r3, [r7, #12]
 80030ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80030cc:	230c      	movs	r3, #12
 80030ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d0:	2302      	movs	r3, #2
 80030d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d4:	2300      	movs	r3, #0
 80030d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d8:	2300      	movs	r3, #0
 80030da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80030dc:	2307      	movs	r3, #7
 80030de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030e0:	f107 031c 	add.w	r3, r7, #28
 80030e4:	4619      	mov	r1, r3
 80030e6:	4805      	ldr	r0, [pc, #20]	; (80030fc <HAL_UART_MspInit+0x100>)
 80030e8:	f001 fb40 	bl	800476c <HAL_GPIO_Init>
}
 80030ec:	bf00      	nop
 80030ee:	3730      	adds	r7, #48	; 0x30
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	40011000 	.word	0x40011000
 80030f8:	40023800 	.word	0x40023800
 80030fc:	40020000 	.word	0x40020000
 8003100:	40004400 	.word	0x40004400

08003104 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003108:	e7fe      	b.n	8003108 <NMI_Handler+0x4>

0800310a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800310a:	b480      	push	{r7}
 800310c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800310e:	e7fe      	b.n	800310e <HardFault_Handler+0x4>

08003110 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003114:	e7fe      	b.n	8003114 <MemManage_Handler+0x4>

08003116 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003116:	b480      	push	{r7}
 8003118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800311a:	e7fe      	b.n	800311a <BusFault_Handler+0x4>

0800311c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003120:	e7fe      	b.n	8003120 <UsageFault_Handler+0x4>

08003122 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003122:	b480      	push	{r7}
 8003124:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003126:	bf00      	nop
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003134:	bf00      	nop
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr

0800313e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800313e:	b480      	push	{r7}
 8003140:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003142:	bf00      	nop
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003150:	f000 f8c2 	bl	80032d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003154:	bf00      	nop
 8003156:	bd80      	pop	{r7, pc}

08003158 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800315c:	4802      	ldr	r0, [pc, #8]	; (8003168 <ADC_IRQHandler+0x10>)
 800315e:	f000 f91e 	bl	800339e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003162:	bf00      	nop
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	2000002c 	.word	0x2000002c

0800316c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003170:	4802      	ldr	r0, [pc, #8]	; (800317c <TIM3_IRQHandler+0x10>)
 8003172:	f002 fb61 	bl	8005838 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003176:	bf00      	nop
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	200000d4 	.word	0x200000d4

08003180 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003184:	4802      	ldr	r0, [pc, #8]	; (8003190 <TIM4_IRQHandler+0x10>)
 8003186:	f002 fb57 	bl	8005838 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800318a:	bf00      	nop
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	2000011c 	.word	0x2000011c

08003194 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003198:	4802      	ldr	r0, [pc, #8]	; (80031a4 <USART1_IRQHandler+0x10>)
 800319a:	f003 f9d3 	bl	8006544 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800319e:	bf00      	nop
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	20000164 	.word	0x20000164

080031a8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80031ac:	4802      	ldr	r0, [pc, #8]	; (80031b8 <DMA2_Stream0_IRQHandler+0x10>)
 80031ae:	f001 f873 	bl	8004298 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80031b2:	bf00      	nop
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	20000074 	.word	0x20000074

080031bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031c0:	4b06      	ldr	r3, [pc, #24]	; (80031dc <SystemInit+0x20>)
 80031c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c6:	4a05      	ldr	r2, [pc, #20]	; (80031dc <SystemInit+0x20>)
 80031c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031d0:	bf00      	nop
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	e000ed00 	.word	0xe000ed00

080031e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80031e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003218 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031e4:	480d      	ldr	r0, [pc, #52]	; (800321c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80031e6:	490e      	ldr	r1, [pc, #56]	; (8003220 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80031e8:	4a0e      	ldr	r2, [pc, #56]	; (8003224 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80031ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031ec:	e002      	b.n	80031f4 <LoopCopyDataInit>

080031ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031f2:	3304      	adds	r3, #4

080031f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031f8:	d3f9      	bcc.n	80031ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031fa:	4a0b      	ldr	r2, [pc, #44]	; (8003228 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80031fc:	4c0b      	ldr	r4, [pc, #44]	; (800322c <LoopFillZerobss+0x26>)
  movs r3, #0
 80031fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003200:	e001      	b.n	8003206 <LoopFillZerobss>

08003202 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003202:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003204:	3204      	adds	r2, #4

08003206 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003206:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003208:	d3fb      	bcc.n	8003202 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800320a:	f7ff ffd7 	bl	80031bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800320e:	f004 f893 	bl	8007338 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003212:	f7ff f90d 	bl	8002430 <main>
  bx  lr    
 8003216:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003218:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800321c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003220:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8003224:	080075f0 	.word	0x080075f0
  ldr r2, =_sbss
 8003228:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800322c:	20000640 	.word	0x20000640

08003230 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003230:	e7fe      	b.n	8003230 <DMA1_Stream0_IRQHandler>
	...

08003234 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003238:	4b0e      	ldr	r3, [pc, #56]	; (8003274 <HAL_Init+0x40>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a0d      	ldr	r2, [pc, #52]	; (8003274 <HAL_Init+0x40>)
 800323e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003242:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003244:	4b0b      	ldr	r3, [pc, #44]	; (8003274 <HAL_Init+0x40>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a0a      	ldr	r2, [pc, #40]	; (8003274 <HAL_Init+0x40>)
 800324a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800324e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003250:	4b08      	ldr	r3, [pc, #32]	; (8003274 <HAL_Init+0x40>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a07      	ldr	r2, [pc, #28]	; (8003274 <HAL_Init+0x40>)
 8003256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800325a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800325c:	2003      	movs	r0, #3
 800325e:	f000 fe41 	bl	8003ee4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003262:	2000      	movs	r0, #0
 8003264:	f000 f808 	bl	8003278 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003268:	f7ff fd66 	bl	8002d38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	40023c00 	.word	0x40023c00

08003278 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003280:	4b12      	ldr	r3, [pc, #72]	; (80032cc <HAL_InitTick+0x54>)
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	4b12      	ldr	r3, [pc, #72]	; (80032d0 <HAL_InitTick+0x58>)
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	4619      	mov	r1, r3
 800328a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800328e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003292:	fbb2 f3f3 	udiv	r3, r2, r3
 8003296:	4618      	mov	r0, r3
 8003298:	f000 fe59 	bl	8003f4e <HAL_SYSTICK_Config>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e00e      	b.n	80032c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2b0f      	cmp	r3, #15
 80032aa:	d80a      	bhi.n	80032c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032ac:	2200      	movs	r2, #0
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	f04f 30ff 	mov.w	r0, #4294967295
 80032b4:	f000 fe21 	bl	8003efa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032b8:	4a06      	ldr	r2, [pc, #24]	; (80032d4 <HAL_InitTick+0x5c>)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032be:	2300      	movs	r3, #0
 80032c0:	e000      	b.n	80032c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3708      	adds	r7, #8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	20000004 	.word	0x20000004
 80032d0:	2000000c 	.word	0x2000000c
 80032d4:	20000008 	.word	0x20000008

080032d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032dc:	4b06      	ldr	r3, [pc, #24]	; (80032f8 <HAL_IncTick+0x20>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	461a      	mov	r2, r3
 80032e2:	4b06      	ldr	r3, [pc, #24]	; (80032fc <HAL_IncTick+0x24>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4413      	add	r3, r2
 80032e8:	4a04      	ldr	r2, [pc, #16]	; (80032fc <HAL_IncTick+0x24>)
 80032ea:	6013      	str	r3, [r2, #0]
}
 80032ec:	bf00      	nop
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	2000000c 	.word	0x2000000c
 80032fc:	2000063c 	.word	0x2000063c

08003300 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  return uwTick;
 8003304:	4b03      	ldr	r3, [pc, #12]	; (8003314 <HAL_GetTick+0x14>)
 8003306:	681b      	ldr	r3, [r3, #0]
}
 8003308:	4618      	mov	r0, r3
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	2000063c 	.word	0x2000063c

08003318 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003320:	2300      	movs	r3, #0
 8003322:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e033      	b.n	8003396 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	2b00      	cmp	r3, #0
 8003334:	d109      	bne.n	800334a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7ff fd26 	bl	8002d88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	f003 0310 	and.w	r3, r3, #16
 8003352:	2b00      	cmp	r3, #0
 8003354:	d118      	bne.n	8003388 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800335e:	f023 0302 	bic.w	r3, r3, #2
 8003362:	f043 0202 	orr.w	r2, r3, #2
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 fb62 	bl	8003a34 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337a:	f023 0303 	bic.w	r3, r3, #3
 800337e:	f043 0201 	orr.w	r2, r3, #1
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	641a      	str	r2, [r3, #64]	; 0x40
 8003386:	e001      	b.n	800338c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003394:	7bfb      	ldrb	r3, [r7, #15]
}
 8003396:	4618      	mov	r0, r3
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b086      	sub	sp, #24
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80033a6:	2300      	movs	r3, #0
 80033a8:	617b      	str	r3, [r7, #20]
 80033aa:	2300      	movs	r3, #0
 80033ac:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	f003 0320 	and.w	r3, r3, #32
 80033cc:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d049      	beq.n	8003468 <HAL_ADC_IRQHandler+0xca>
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d046      	beq.n	8003468 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	f003 0310 	and.w	r3, r3, #16
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d105      	bne.n	80033f2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d12b      	bne.n	8003458 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003404:	2b00      	cmp	r3, #0
 8003406:	d127      	bne.n	8003458 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003412:	2b00      	cmp	r3, #0
 8003414:	d006      	beq.n	8003424 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003420:	2b00      	cmp	r3, #0
 8003422:	d119      	bne.n	8003458 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f022 0220 	bic.w	r2, r2, #32
 8003432:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003438:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003444:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d105      	bne.n	8003458 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003450:	f043 0201 	orr.w	r2, r3, #1
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 f9a1 	bl	80037a0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f06f 0212 	mvn.w	r2, #18
 8003466:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f003 0304 	and.w	r3, r3, #4
 800346e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003476:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d057      	beq.n	800352e <HAL_ADC_IRQHandler+0x190>
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d054      	beq.n	800352e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003488:	f003 0310 	and.w	r3, r3, #16
 800348c:	2b00      	cmp	r3, #0
 800348e:	d105      	bne.n	800349c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003494:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d139      	bne.n	800351e <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d006      	beq.n	80034c6 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d12b      	bne.n	800351e <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d124      	bne.n	800351e <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d11d      	bne.n	800351e <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d119      	bne.n	800351e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034f8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800350e:	2b00      	cmp	r3, #0
 8003510:	d105      	bne.n	800351e <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	f043 0201 	orr.w	r2, r3, #1
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 fc06 	bl	8003d30 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f06f 020c 	mvn.w	r2, #12
 800352c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800353c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d017      	beq.n	8003574 <HAL_ADC_IRQHandler+0x1d6>
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d014      	beq.n	8003574 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	2b01      	cmp	r3, #1
 8003556:	d10d      	bne.n	8003574 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 f92f 	bl	80037c8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f06f 0201 	mvn.w	r2, #1
 8003572:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f003 0320 	and.w	r3, r3, #32
 800357a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003582:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d015      	beq.n	80035b6 <HAL_ADC_IRQHandler+0x218>
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d012      	beq.n	80035b6 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003594:	f043 0202 	orr.w	r2, r3, #2
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f06f 0220 	mvn.w	r2, #32
 80035a4:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f918 	bl	80037dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f06f 0220 	mvn.w	r2, #32
 80035b4:	601a      	str	r2, [r3, #0]
  }
}
 80035b6:	bf00      	nop
 80035b8:	3718      	adds	r7, #24
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
	...

080035c0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80035cc:	2300      	movs	r3, #0
 80035ce:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d101      	bne.n	80035de <HAL_ADC_Start_DMA+0x1e>
 80035da:	2302      	movs	r3, #2
 80035dc:	e0ce      	b.n	800377c <HAL_ADC_Start_DMA+0x1bc>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d018      	beq.n	8003626 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	689a      	ldr	r2, [r3, #8]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f042 0201 	orr.w	r2, r2, #1
 8003602:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003604:	4b5f      	ldr	r3, [pc, #380]	; (8003784 <HAL_ADC_Start_DMA+0x1c4>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a5f      	ldr	r2, [pc, #380]	; (8003788 <HAL_ADC_Start_DMA+0x1c8>)
 800360a:	fba2 2303 	umull	r2, r3, r2, r3
 800360e:	0c9a      	lsrs	r2, r3, #18
 8003610:	4613      	mov	r3, r2
 8003612:	005b      	lsls	r3, r3, #1
 8003614:	4413      	add	r3, r2
 8003616:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003618:	e002      	b.n	8003620 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	3b01      	subs	r3, #1
 800361e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1f9      	bne.n	800361a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003630:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003634:	d107      	bne.n	8003646 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003644:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f003 0301 	and.w	r3, r3, #1
 8003650:	2b01      	cmp	r3, #1
 8003652:	f040 8086 	bne.w	8003762 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800365e:	f023 0301 	bic.w	r3, r3, #1
 8003662:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003674:	2b00      	cmp	r3, #0
 8003676:	d007      	beq.n	8003688 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003680:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003694:	d106      	bne.n	80036a4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369a:	f023 0206 	bic.w	r2, r3, #6
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	645a      	str	r2, [r3, #68]	; 0x44
 80036a2:	e002      	b.n	80036aa <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036b2:	4b36      	ldr	r3, [pc, #216]	; (800378c <HAL_ADC_Start_DMA+0x1cc>)
 80036b4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ba:	4a35      	ldr	r2, [pc, #212]	; (8003790 <HAL_ADC_Start_DMA+0x1d0>)
 80036bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c2:	4a34      	ldr	r2, [pc, #208]	; (8003794 <HAL_ADC_Start_DMA+0x1d4>)
 80036c4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ca:	4a33      	ldr	r2, [pc, #204]	; (8003798 <HAL_ADC_Start_DMA+0x1d8>)
 80036cc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80036d6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80036e6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689a      	ldr	r2, [r3, #8]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036f6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	334c      	adds	r3, #76	; 0x4c
 8003702:	4619      	mov	r1, r3
 8003704:	68ba      	ldr	r2, [r7, #8]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f000 fcdc 	bl	80040c4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f003 031f 	and.w	r3, r3, #31
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10f      	bne.n	8003738 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d129      	bne.n	800377a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003734:	609a      	str	r2, [r3, #8]
 8003736:	e020      	b.n	800377a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a17      	ldr	r2, [pc, #92]	; (800379c <HAL_ADC_Start_DMA+0x1dc>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d11b      	bne.n	800377a <HAL_ADC_Start_DMA+0x1ba>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d114      	bne.n	800377a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689a      	ldr	r2, [r3, #8]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800375e:	609a      	str	r2, [r3, #8]
 8003760:	e00b      	b.n	800377a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	f043 0210 	orr.w	r2, r3, #16
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003772:	f043 0201 	orr.w	r2, r3, #1
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3718      	adds	r7, #24
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	20000004 	.word	0x20000004
 8003788:	431bde83 	.word	0x431bde83
 800378c:	40012300 	.word	0x40012300
 8003790:	08003c2d 	.word	0x08003c2d
 8003794:	08003ce7 	.word	0x08003ce7
 8003798:	08003d03 	.word	0x08003d03
 800379c:	40012000 	.word	0x40012000

080037a0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003804:	2b01      	cmp	r3, #1
 8003806:	d101      	bne.n	800380c <HAL_ADC_ConfigChannel+0x1c>
 8003808:	2302      	movs	r3, #2
 800380a:	e105      	b.n	8003a18 <HAL_ADC_ConfigChannel+0x228>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2b09      	cmp	r3, #9
 800381a:	d925      	bls.n	8003868 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68d9      	ldr	r1, [r3, #12]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	b29b      	uxth	r3, r3
 8003828:	461a      	mov	r2, r3
 800382a:	4613      	mov	r3, r2
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	4413      	add	r3, r2
 8003830:	3b1e      	subs	r3, #30
 8003832:	2207      	movs	r2, #7
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	43da      	mvns	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	400a      	ands	r2, r1
 8003840:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68d9      	ldr	r1, [r3, #12]
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	b29b      	uxth	r3, r3
 8003852:	4618      	mov	r0, r3
 8003854:	4603      	mov	r3, r0
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	4403      	add	r3, r0
 800385a:	3b1e      	subs	r3, #30
 800385c:	409a      	lsls	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	60da      	str	r2, [r3, #12]
 8003866:	e022      	b.n	80038ae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6919      	ldr	r1, [r3, #16]
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	b29b      	uxth	r3, r3
 8003874:	461a      	mov	r2, r3
 8003876:	4613      	mov	r3, r2
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	4413      	add	r3, r2
 800387c:	2207      	movs	r2, #7
 800387e:	fa02 f303 	lsl.w	r3, r2, r3
 8003882:	43da      	mvns	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	400a      	ands	r2, r1
 800388a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6919      	ldr	r1, [r3, #16]
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	689a      	ldr	r2, [r3, #8]
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	b29b      	uxth	r3, r3
 800389c:	4618      	mov	r0, r3
 800389e:	4603      	mov	r3, r0
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	4403      	add	r3, r0
 80038a4:	409a      	lsls	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	2b06      	cmp	r3, #6
 80038b4:	d824      	bhi.n	8003900 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	4613      	mov	r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	4413      	add	r3, r2
 80038c6:	3b05      	subs	r3, #5
 80038c8:	221f      	movs	r2, #31
 80038ca:	fa02 f303 	lsl.w	r3, r2, r3
 80038ce:	43da      	mvns	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	400a      	ands	r2, r1
 80038d6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	4618      	mov	r0, r3
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685a      	ldr	r2, [r3, #4]
 80038ea:	4613      	mov	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4413      	add	r3, r2
 80038f0:	3b05      	subs	r3, #5
 80038f2:	fa00 f203 	lsl.w	r2, r0, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	635a      	str	r2, [r3, #52]	; 0x34
 80038fe:	e04c      	b.n	800399a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	2b0c      	cmp	r3, #12
 8003906:	d824      	bhi.n	8003952 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	4613      	mov	r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	4413      	add	r3, r2
 8003918:	3b23      	subs	r3, #35	; 0x23
 800391a:	221f      	movs	r2, #31
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	43da      	mvns	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	400a      	ands	r2, r1
 8003928:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	b29b      	uxth	r3, r3
 8003936:	4618      	mov	r0, r3
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	4613      	mov	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4413      	add	r3, r2
 8003942:	3b23      	subs	r3, #35	; 0x23
 8003944:	fa00 f203 	lsl.w	r2, r0, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	430a      	orrs	r2, r1
 800394e:	631a      	str	r2, [r3, #48]	; 0x30
 8003950:	e023      	b.n	800399a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685a      	ldr	r2, [r3, #4]
 800395c:	4613      	mov	r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	4413      	add	r3, r2
 8003962:	3b41      	subs	r3, #65	; 0x41
 8003964:	221f      	movs	r2, #31
 8003966:	fa02 f303 	lsl.w	r3, r2, r3
 800396a:	43da      	mvns	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	400a      	ands	r2, r1
 8003972:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	b29b      	uxth	r3, r3
 8003980:	4618      	mov	r0, r3
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	4613      	mov	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	4413      	add	r3, r2
 800398c:	3b41      	subs	r3, #65	; 0x41
 800398e:	fa00 f203 	lsl.w	r2, r0, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	430a      	orrs	r2, r1
 8003998:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800399a:	4b22      	ldr	r3, [pc, #136]	; (8003a24 <HAL_ADC_ConfigChannel+0x234>)
 800399c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a21      	ldr	r2, [pc, #132]	; (8003a28 <HAL_ADC_ConfigChannel+0x238>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d109      	bne.n	80039bc <HAL_ADC_ConfigChannel+0x1cc>
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2b12      	cmp	r3, #18
 80039ae:	d105      	bne.n	80039bc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a19      	ldr	r2, [pc, #100]	; (8003a28 <HAL_ADC_ConfigChannel+0x238>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d123      	bne.n	8003a0e <HAL_ADC_ConfigChannel+0x21e>
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2b10      	cmp	r3, #16
 80039cc:	d003      	beq.n	80039d6 <HAL_ADC_ConfigChannel+0x1e6>
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2b11      	cmp	r3, #17
 80039d4:	d11b      	bne.n	8003a0e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2b10      	cmp	r3, #16
 80039e8:	d111      	bne.n	8003a0e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80039ea:	4b10      	ldr	r3, [pc, #64]	; (8003a2c <HAL_ADC_ConfigChannel+0x23c>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a10      	ldr	r2, [pc, #64]	; (8003a30 <HAL_ADC_ConfigChannel+0x240>)
 80039f0:	fba2 2303 	umull	r2, r3, r2, r3
 80039f4:	0c9a      	lsrs	r2, r3, #18
 80039f6:	4613      	mov	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4413      	add	r3, r2
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003a00:	e002      	b.n	8003a08 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	3b01      	subs	r3, #1
 8003a06:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1f9      	bne.n	8003a02 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3714      	adds	r7, #20
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr
 8003a24:	40012300 	.word	0x40012300
 8003a28:	40012000 	.word	0x40012000
 8003a2c:	20000004 	.word	0x20000004
 8003a30:	431bde83 	.word	0x431bde83

08003a34 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a3c:	4b79      	ldr	r3, [pc, #484]	; (8003c24 <ADC_Init+0x1f0>)
 8003a3e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	431a      	orrs	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	6859      	ldr	r1, [r3, #4]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	021a      	lsls	r2, r3, #8
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	685a      	ldr	r2, [r3, #4]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003a8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	6859      	ldr	r1, [r3, #4]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689a      	ldr	r2, [r3, #8]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	689a      	ldr	r2, [r3, #8]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003aae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6899      	ldr	r1, [r3, #8]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68da      	ldr	r2, [r3, #12]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac6:	4a58      	ldr	r2, [pc, #352]	; (8003c28 <ADC_Init+0x1f4>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d022      	beq.n	8003b12 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689a      	ldr	r2, [r3, #8]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ada:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6899      	ldr	r1, [r3, #8]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	430a      	orrs	r2, r1
 8003aec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	689a      	ldr	r2, [r3, #8]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003afc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	6899      	ldr	r1, [r3, #8]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	609a      	str	r2, [r3, #8]
 8003b10:	e00f      	b.n	8003b32 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	689a      	ldr	r2, [r3, #8]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	689a      	ldr	r2, [r3, #8]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b30:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	689a      	ldr	r2, [r3, #8]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 0202 	bic.w	r2, r2, #2
 8003b40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6899      	ldr	r1, [r3, #8]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	7e1b      	ldrb	r3, [r3, #24]
 8003b4c:	005a      	lsls	r2, r3, #1
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d01b      	beq.n	8003b98 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685a      	ldr	r2, [r3, #4]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b6e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	685a      	ldr	r2, [r3, #4]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003b7e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	6859      	ldr	r1, [r3, #4]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	035a      	lsls	r2, r3, #13
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	430a      	orrs	r2, r1
 8003b94:	605a      	str	r2, [r3, #4]
 8003b96:	e007      	b.n	8003ba8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ba6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003bb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	051a      	lsls	r2, r3, #20
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	689a      	ldr	r2, [r3, #8]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003bdc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6899      	ldr	r1, [r3, #8]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003bea:	025a      	lsls	r2, r3, #9
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689a      	ldr	r2, [r3, #8]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6899      	ldr	r1, [r3, #8]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	029a      	lsls	r2, r3, #10
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	430a      	orrs	r2, r1
 8003c16:	609a      	str	r2, [r3, #8]
}
 8003c18:	bf00      	nop
 8003c1a:	3714      	adds	r7, #20
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	40012300 	.word	0x40012300
 8003c28:	0f000001 	.word	0x0f000001

08003c2c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c38:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d13c      	bne.n	8003cc0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d12b      	bne.n	8003cb8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d127      	bne.n	8003cb8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d006      	beq.n	8003c84 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d119      	bne.n	8003cb8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 0220 	bic.w	r2, r2, #32
 8003c92:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d105      	bne.n	8003cb8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb0:	f043 0201 	orr.w	r2, r3, #1
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f7ff fd71 	bl	80037a0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003cbe:	e00e      	b.n	8003cde <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc4:	f003 0310 	and.w	r3, r3, #16
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d003      	beq.n	8003cd4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003ccc:	68f8      	ldr	r0, [r7, #12]
 8003cce:	f7ff fd85 	bl	80037dc <HAL_ADC_ErrorCallback>
}
 8003cd2:	e004      	b.n	8003cde <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	4798      	blx	r3
}
 8003cde:	bf00      	nop
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b084      	sub	sp, #16
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003cf4:	68f8      	ldr	r0, [r7, #12]
 8003cf6:	f7ff fd5d 	bl	80037b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003cfa:	bf00      	nop
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b084      	sub	sp, #16
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2240      	movs	r2, #64	; 0x40
 8003d14:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1a:	f043 0204 	orr.w	r2, r3, #4
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	f7ff fd5a 	bl	80037dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d28:	bf00      	nop
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f003 0307 	and.w	r3, r3, #7
 8003d52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d54:	4b0c      	ldr	r3, [pc, #48]	; (8003d88 <__NVIC_SetPriorityGrouping+0x44>)
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d5a:	68ba      	ldr	r2, [r7, #8]
 8003d5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d60:	4013      	ands	r3, r2
 8003d62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d76:	4a04      	ldr	r2, [pc, #16]	; (8003d88 <__NVIC_SetPriorityGrouping+0x44>)
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	60d3      	str	r3, [r2, #12]
}
 8003d7c:	bf00      	nop
 8003d7e:	3714      	adds	r7, #20
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr
 8003d88:	e000ed00 	.word	0xe000ed00

08003d8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d90:	4b04      	ldr	r3, [pc, #16]	; (8003da4 <__NVIC_GetPriorityGrouping+0x18>)
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	0a1b      	lsrs	r3, r3, #8
 8003d96:	f003 0307 	and.w	r3, r3, #7
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr
 8003da4:	e000ed00 	.word	0xe000ed00

08003da8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	4603      	mov	r3, r0
 8003db0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	db0b      	blt.n	8003dd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dba:	79fb      	ldrb	r3, [r7, #7]
 8003dbc:	f003 021f 	and.w	r2, r3, #31
 8003dc0:	4907      	ldr	r1, [pc, #28]	; (8003de0 <__NVIC_EnableIRQ+0x38>)
 8003dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dc6:	095b      	lsrs	r3, r3, #5
 8003dc8:	2001      	movs	r0, #1
 8003dca:	fa00 f202 	lsl.w	r2, r0, r2
 8003dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003dd2:	bf00      	nop
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	e000e100 	.word	0xe000e100

08003de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	4603      	mov	r3, r0
 8003dec:	6039      	str	r1, [r7, #0]
 8003dee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	db0a      	blt.n	8003e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	b2da      	uxtb	r2, r3
 8003dfc:	490c      	ldr	r1, [pc, #48]	; (8003e30 <__NVIC_SetPriority+0x4c>)
 8003dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e02:	0112      	lsls	r2, r2, #4
 8003e04:	b2d2      	uxtb	r2, r2
 8003e06:	440b      	add	r3, r1
 8003e08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e0c:	e00a      	b.n	8003e24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	b2da      	uxtb	r2, r3
 8003e12:	4908      	ldr	r1, [pc, #32]	; (8003e34 <__NVIC_SetPriority+0x50>)
 8003e14:	79fb      	ldrb	r3, [r7, #7]
 8003e16:	f003 030f 	and.w	r3, r3, #15
 8003e1a:	3b04      	subs	r3, #4
 8003e1c:	0112      	lsls	r2, r2, #4
 8003e1e:	b2d2      	uxtb	r2, r2
 8003e20:	440b      	add	r3, r1
 8003e22:	761a      	strb	r2, [r3, #24]
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr
 8003e30:	e000e100 	.word	0xe000e100
 8003e34:	e000ed00 	.word	0xe000ed00

08003e38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b089      	sub	sp, #36	; 0x24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f003 0307 	and.w	r3, r3, #7
 8003e4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	f1c3 0307 	rsb	r3, r3, #7
 8003e52:	2b04      	cmp	r3, #4
 8003e54:	bf28      	it	cs
 8003e56:	2304      	movcs	r3, #4
 8003e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	3304      	adds	r3, #4
 8003e5e:	2b06      	cmp	r3, #6
 8003e60:	d902      	bls.n	8003e68 <NVIC_EncodePriority+0x30>
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	3b03      	subs	r3, #3
 8003e66:	e000      	b.n	8003e6a <NVIC_EncodePriority+0x32>
 8003e68:	2300      	movs	r3, #0
 8003e6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	fa02 f303 	lsl.w	r3, r2, r3
 8003e76:	43da      	mvns	r2, r3
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	401a      	ands	r2, r3
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e80:	f04f 31ff 	mov.w	r1, #4294967295
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	fa01 f303 	lsl.w	r3, r1, r3
 8003e8a:	43d9      	mvns	r1, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e90:	4313      	orrs	r3, r2
         );
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3724      	adds	r7, #36	; 0x24
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
	...

08003ea0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003eb0:	d301      	bcc.n	8003eb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e00f      	b.n	8003ed6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003eb6:	4a0a      	ldr	r2, [pc, #40]	; (8003ee0 <SysTick_Config+0x40>)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ebe:	210f      	movs	r1, #15
 8003ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ec4:	f7ff ff8e 	bl	8003de4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ec8:	4b05      	ldr	r3, [pc, #20]	; (8003ee0 <SysTick_Config+0x40>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ece:	4b04      	ldr	r3, [pc, #16]	; (8003ee0 <SysTick_Config+0x40>)
 8003ed0:	2207      	movs	r2, #7
 8003ed2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3708      	adds	r7, #8
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	e000e010 	.word	0xe000e010

08003ee4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f7ff ff29 	bl	8003d44 <__NVIC_SetPriorityGrouping>
}
 8003ef2:	bf00      	nop
 8003ef4:	3708      	adds	r7, #8
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b086      	sub	sp, #24
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	4603      	mov	r3, r0
 8003f02:	60b9      	str	r1, [r7, #8]
 8003f04:	607a      	str	r2, [r7, #4]
 8003f06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f0c:	f7ff ff3e 	bl	8003d8c <__NVIC_GetPriorityGrouping>
 8003f10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	68b9      	ldr	r1, [r7, #8]
 8003f16:	6978      	ldr	r0, [r7, #20]
 8003f18:	f7ff ff8e 	bl	8003e38 <NVIC_EncodePriority>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f22:	4611      	mov	r1, r2
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7ff ff5d 	bl	8003de4 <__NVIC_SetPriority>
}
 8003f2a:	bf00      	nop
 8003f2c:	3718      	adds	r7, #24
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b082      	sub	sp, #8
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	4603      	mov	r3, r0
 8003f3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7ff ff31 	bl	8003da8 <__NVIC_EnableIRQ>
}
 8003f46:	bf00      	nop
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b082      	sub	sp, #8
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f7ff ffa2 	bl	8003ea0 <SysTick_Config>
 8003f5c:	4603      	mov	r3, r0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
	...

08003f68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b086      	sub	sp, #24
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f70:	2300      	movs	r3, #0
 8003f72:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003f74:	f7ff f9c4 	bl	8003300 <HAL_GetTick>
 8003f78:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d101      	bne.n	8003f84 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e099      	b.n	80040b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2202      	movs	r2, #2
 8003f88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f022 0201 	bic.w	r2, r2, #1
 8003fa2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fa4:	e00f      	b.n	8003fc6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003fa6:	f7ff f9ab 	bl	8003300 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2b05      	cmp	r3, #5
 8003fb2:	d908      	bls.n	8003fc6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2203      	movs	r2, #3
 8003fbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e078      	b.n	80040b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0301 	and.w	r3, r3, #1
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1e8      	bne.n	8003fa6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	4b38      	ldr	r3, [pc, #224]	; (80040c0 <HAL_DMA_Init+0x158>)
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ff2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ffe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800400a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a1b      	ldr	r3, [r3, #32]
 8004010:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	4313      	orrs	r3, r2
 8004016:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401c:	2b04      	cmp	r3, #4
 800401e:	d107      	bne.n	8004030 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004028:	4313      	orrs	r3, r2
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	4313      	orrs	r3, r2
 800402e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	f023 0307 	bic.w	r3, r3, #7
 8004046:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	4313      	orrs	r3, r2
 8004050:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004056:	2b04      	cmp	r3, #4
 8004058:	d117      	bne.n	800408a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405e:	697a      	ldr	r2, [r7, #20]
 8004060:	4313      	orrs	r3, r2
 8004062:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00e      	beq.n	800408a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 fb01 	bl	8004674 <DMA_CheckFifoParam>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d008      	beq.n	800408a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2240      	movs	r2, #64	; 0x40
 800407c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004086:	2301      	movs	r3, #1
 8004088:	e016      	b.n	80040b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 fab8 	bl	8004608 <DMA_CalcBaseAndBitshift>
 8004098:	4603      	mov	r3, r0
 800409a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a0:	223f      	movs	r2, #63	; 0x3f
 80040a2:	409a      	lsls	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3718      	adds	r7, #24
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	f010803f 	.word	0xf010803f

080040c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
 80040d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040d2:	2300      	movs	r3, #0
 80040d4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040da:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d101      	bne.n	80040ea <HAL_DMA_Start_IT+0x26>
 80040e6:	2302      	movs	r3, #2
 80040e8:	e040      	b.n	800416c <HAL_DMA_Start_IT+0xa8>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d12f      	bne.n	800415e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2202      	movs	r2, #2
 8004102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	68b9      	ldr	r1, [r7, #8]
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f000 fa4a 	bl	80045ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800411c:	223f      	movs	r2, #63	; 0x3f
 800411e:	409a      	lsls	r2, r3
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f042 0216 	orr.w	r2, r2, #22
 8004132:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004138:	2b00      	cmp	r3, #0
 800413a:	d007      	beq.n	800414c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f042 0208 	orr.w	r2, r2, #8
 800414a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f042 0201 	orr.w	r2, r2, #1
 800415a:	601a      	str	r2, [r3, #0]
 800415c:	e005      	b.n	800416a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004166:	2302      	movs	r3, #2
 8004168:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800416a:	7dfb      	ldrb	r3, [r7, #23]
}
 800416c:	4618      	mov	r0, r3
 800416e:	3718      	adds	r7, #24
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004180:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004182:	f7ff f8bd 	bl	8003300 <HAL_GetTick>
 8004186:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800418e:	b2db      	uxtb	r3, r3
 8004190:	2b02      	cmp	r3, #2
 8004192:	d008      	beq.n	80041a6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2280      	movs	r2, #128	; 0x80
 8004198:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e052      	b.n	800424c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 0216 	bic.w	r2, r2, #22
 80041b4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	695a      	ldr	r2, [r3, #20]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041c4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d103      	bne.n	80041d6 <HAL_DMA_Abort+0x62>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d007      	beq.n	80041e6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 0208 	bic.w	r2, r2, #8
 80041e4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 0201 	bic.w	r2, r2, #1
 80041f4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041f6:	e013      	b.n	8004220 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80041f8:	f7ff f882 	bl	8003300 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b05      	cmp	r3, #5
 8004204:	d90c      	bls.n	8004220 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2220      	movs	r2, #32
 800420a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2203      	movs	r2, #3
 8004210:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e015      	b.n	800424c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1e4      	bne.n	80041f8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004232:	223f      	movs	r2, #63	; 0x3f
 8004234:	409a      	lsls	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2201      	movs	r2, #1
 800423e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800424a:	2300      	movs	r3, #0
}
 800424c:	4618      	mov	r0, r3
 800424e:	3710      	adds	r7, #16
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004262:	b2db      	uxtb	r3, r3
 8004264:	2b02      	cmp	r3, #2
 8004266:	d004      	beq.n	8004272 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2280      	movs	r2, #128	; 0x80
 800426c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e00c      	b.n	800428c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2205      	movs	r2, #5
 8004276:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f022 0201 	bic.w	r2, r2, #1
 8004288:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b086      	sub	sp, #24
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80042a0:	2300      	movs	r3, #0
 80042a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80042a4:	4b8e      	ldr	r3, [pc, #568]	; (80044e0 <HAL_DMA_IRQHandler+0x248>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a8e      	ldr	r2, [pc, #568]	; (80044e4 <HAL_DMA_IRQHandler+0x24c>)
 80042aa:	fba2 2303 	umull	r2, r3, r2, r3
 80042ae:	0a9b      	lsrs	r3, r3, #10
 80042b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c2:	2208      	movs	r2, #8
 80042c4:	409a      	lsls	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	4013      	ands	r3, r2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d01a      	beq.n	8004304 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0304 	and.w	r3, r3, #4
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d013      	beq.n	8004304 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f022 0204 	bic.w	r2, r2, #4
 80042ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042f0:	2208      	movs	r2, #8
 80042f2:	409a      	lsls	r2, r3
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042fc:	f043 0201 	orr.w	r2, r3, #1
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004308:	2201      	movs	r2, #1
 800430a:	409a      	lsls	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	4013      	ands	r3, r2
 8004310:	2b00      	cmp	r3, #0
 8004312:	d012      	beq.n	800433a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00b      	beq.n	800433a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004326:	2201      	movs	r2, #1
 8004328:	409a      	lsls	r2, r3
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004332:	f043 0202 	orr.w	r2, r3, #2
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800433e:	2204      	movs	r2, #4
 8004340:	409a      	lsls	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	4013      	ands	r3, r2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d012      	beq.n	8004370 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0302 	and.w	r3, r3, #2
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00b      	beq.n	8004370 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800435c:	2204      	movs	r2, #4
 800435e:	409a      	lsls	r2, r3
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004368:	f043 0204 	orr.w	r2, r3, #4
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004374:	2210      	movs	r2, #16
 8004376:	409a      	lsls	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	4013      	ands	r3, r2
 800437c:	2b00      	cmp	r3, #0
 800437e:	d043      	beq.n	8004408 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0308 	and.w	r3, r3, #8
 800438a:	2b00      	cmp	r3, #0
 800438c:	d03c      	beq.n	8004408 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004392:	2210      	movs	r2, #16
 8004394:	409a      	lsls	r2, r3
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d018      	beq.n	80043da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d108      	bne.n	80043c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d024      	beq.n	8004408 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	4798      	blx	r3
 80043c6:	e01f      	b.n	8004408 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d01b      	beq.n	8004408 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	4798      	blx	r3
 80043d8:	e016      	b.n	8004408 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d107      	bne.n	80043f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f022 0208 	bic.w	r2, r2, #8
 80043f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d003      	beq.n	8004408 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800440c:	2220      	movs	r2, #32
 800440e:	409a      	lsls	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	4013      	ands	r3, r2
 8004414:	2b00      	cmp	r3, #0
 8004416:	f000 808f 	beq.w	8004538 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0310 	and.w	r3, r3, #16
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 8087 	beq.w	8004538 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800442e:	2220      	movs	r2, #32
 8004430:	409a      	lsls	r2, r3
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b05      	cmp	r3, #5
 8004440:	d136      	bne.n	80044b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f022 0216 	bic.w	r2, r2, #22
 8004450:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	695a      	ldr	r2, [r3, #20]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004460:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004466:	2b00      	cmp	r3, #0
 8004468:	d103      	bne.n	8004472 <HAL_DMA_IRQHandler+0x1da>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800446e:	2b00      	cmp	r3, #0
 8004470:	d007      	beq.n	8004482 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f022 0208 	bic.w	r2, r2, #8
 8004480:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004486:	223f      	movs	r2, #63	; 0x3f
 8004488:	409a      	lsls	r2, r3
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2201      	movs	r2, #1
 8004492:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d07e      	beq.n	80045a4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	4798      	blx	r3
        }
        return;
 80044ae:	e079      	b.n	80045a4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d01d      	beq.n	80044fa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10d      	bne.n	80044e8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d031      	beq.n	8004538 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	4798      	blx	r3
 80044dc:	e02c      	b.n	8004538 <HAL_DMA_IRQHandler+0x2a0>
 80044de:	bf00      	nop
 80044e0:	20000004 	.word	0x20000004
 80044e4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d023      	beq.n	8004538 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	4798      	blx	r3
 80044f8:	e01e      	b.n	8004538 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004504:	2b00      	cmp	r3, #0
 8004506:	d10f      	bne.n	8004528 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 0210 	bic.w	r2, r2, #16
 8004516:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800452c:	2b00      	cmp	r3, #0
 800452e:	d003      	beq.n	8004538 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800453c:	2b00      	cmp	r3, #0
 800453e:	d032      	beq.n	80045a6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004544:	f003 0301 	and.w	r3, r3, #1
 8004548:	2b00      	cmp	r3, #0
 800454a:	d022      	beq.n	8004592 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2205      	movs	r2, #5
 8004550:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f022 0201 	bic.w	r2, r2, #1
 8004562:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	3301      	adds	r3, #1
 8004568:	60bb      	str	r3, [r7, #8]
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	429a      	cmp	r2, r3
 800456e:	d307      	bcc.n	8004580 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1f2      	bne.n	8004564 <HAL_DMA_IRQHandler+0x2cc>
 800457e:	e000      	b.n	8004582 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004580:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004596:	2b00      	cmp	r3, #0
 8004598:	d005      	beq.n	80045a6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	4798      	blx	r3
 80045a2:	e000      	b.n	80045a6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80045a4:	bf00      	nop
    }
  }
}
 80045a6:	3718      	adds	r7, #24
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
 80045b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80045c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	683a      	ldr	r2, [r7, #0]
 80045d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	2b40      	cmp	r3, #64	; 0x40
 80045d8:	d108      	bne.n	80045ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68ba      	ldr	r2, [r7, #8]
 80045e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80045ea:	e007      	b.n	80045fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68ba      	ldr	r2, [r7, #8]
 80045f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	60da      	str	r2, [r3, #12]
}
 80045fc:	bf00      	nop
 80045fe:	3714      	adds	r7, #20
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	b2db      	uxtb	r3, r3
 8004616:	3b10      	subs	r3, #16
 8004618:	4a14      	ldr	r2, [pc, #80]	; (800466c <DMA_CalcBaseAndBitshift+0x64>)
 800461a:	fba2 2303 	umull	r2, r3, r2, r3
 800461e:	091b      	lsrs	r3, r3, #4
 8004620:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004622:	4a13      	ldr	r2, [pc, #76]	; (8004670 <DMA_CalcBaseAndBitshift+0x68>)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	4413      	add	r3, r2
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	461a      	mov	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2b03      	cmp	r3, #3
 8004634:	d909      	bls.n	800464a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800463e:	f023 0303 	bic.w	r3, r3, #3
 8004642:	1d1a      	adds	r2, r3, #4
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	659a      	str	r2, [r3, #88]	; 0x58
 8004648:	e007      	b.n	800465a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004652:	f023 0303 	bic.w	r3, r3, #3
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800465e:	4618      	mov	r0, r3
 8004660:	3714      	adds	r7, #20
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	aaaaaaab 	.word	0xaaaaaaab
 8004670:	080075d8 	.word	0x080075d8

08004674 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800467c:	2300      	movs	r3, #0
 800467e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004684:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d11f      	bne.n	80046ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	2b03      	cmp	r3, #3
 8004692:	d856      	bhi.n	8004742 <DMA_CheckFifoParam+0xce>
 8004694:	a201      	add	r2, pc, #4	; (adr r2, 800469c <DMA_CheckFifoParam+0x28>)
 8004696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800469a:	bf00      	nop
 800469c:	080046ad 	.word	0x080046ad
 80046a0:	080046bf 	.word	0x080046bf
 80046a4:	080046ad 	.word	0x080046ad
 80046a8:	08004743 	.word	0x08004743
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d046      	beq.n	8004746 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046bc:	e043      	b.n	8004746 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80046c6:	d140      	bne.n	800474a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046cc:	e03d      	b.n	800474a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046d6:	d121      	bne.n	800471c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	2b03      	cmp	r3, #3
 80046dc:	d837      	bhi.n	800474e <DMA_CheckFifoParam+0xda>
 80046de:	a201      	add	r2, pc, #4	; (adr r2, 80046e4 <DMA_CheckFifoParam+0x70>)
 80046e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e4:	080046f5 	.word	0x080046f5
 80046e8:	080046fb 	.word	0x080046fb
 80046ec:	080046f5 	.word	0x080046f5
 80046f0:	0800470d 	.word	0x0800470d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	73fb      	strb	r3, [r7, #15]
      break;
 80046f8:	e030      	b.n	800475c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d025      	beq.n	8004752 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800470a:	e022      	b.n	8004752 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004710:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004714:	d11f      	bne.n	8004756 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800471a:	e01c      	b.n	8004756 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	2b02      	cmp	r3, #2
 8004720:	d903      	bls.n	800472a <DMA_CheckFifoParam+0xb6>
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	2b03      	cmp	r3, #3
 8004726:	d003      	beq.n	8004730 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004728:	e018      	b.n	800475c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	73fb      	strb	r3, [r7, #15]
      break;
 800472e:	e015      	b.n	800475c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004734:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00e      	beq.n	800475a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	73fb      	strb	r3, [r7, #15]
      break;
 8004740:	e00b      	b.n	800475a <DMA_CheckFifoParam+0xe6>
      break;
 8004742:	bf00      	nop
 8004744:	e00a      	b.n	800475c <DMA_CheckFifoParam+0xe8>
      break;
 8004746:	bf00      	nop
 8004748:	e008      	b.n	800475c <DMA_CheckFifoParam+0xe8>
      break;
 800474a:	bf00      	nop
 800474c:	e006      	b.n	800475c <DMA_CheckFifoParam+0xe8>
      break;
 800474e:	bf00      	nop
 8004750:	e004      	b.n	800475c <DMA_CheckFifoParam+0xe8>
      break;
 8004752:	bf00      	nop
 8004754:	e002      	b.n	800475c <DMA_CheckFifoParam+0xe8>
      break;   
 8004756:	bf00      	nop
 8004758:	e000      	b.n	800475c <DMA_CheckFifoParam+0xe8>
      break;
 800475a:	bf00      	nop
    }
  } 
  
  return status; 
 800475c:	7bfb      	ldrb	r3, [r7, #15]
}
 800475e:	4618      	mov	r0, r3
 8004760:	3714      	adds	r7, #20
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop

0800476c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800476c:	b480      	push	{r7}
 800476e:	b089      	sub	sp, #36	; 0x24
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004776:	2300      	movs	r3, #0
 8004778:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800477a:	2300      	movs	r3, #0
 800477c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800477e:	2300      	movs	r3, #0
 8004780:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004782:	2300      	movs	r3, #0
 8004784:	61fb      	str	r3, [r7, #28]
 8004786:	e159      	b.n	8004a3c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004788:	2201      	movs	r2, #1
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	fa02 f303 	lsl.w	r3, r2, r3
 8004790:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	697a      	ldr	r2, [r7, #20]
 8004798:	4013      	ands	r3, r2
 800479a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800479c:	693a      	ldr	r2, [r7, #16]
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	f040 8148 	bne.w	8004a36 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f003 0303 	and.w	r3, r3, #3
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d005      	beq.n	80047be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d130      	bne.n	8004820 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	005b      	lsls	r3, r3, #1
 80047c8:	2203      	movs	r2, #3
 80047ca:	fa02 f303 	lsl.w	r3, r2, r3
 80047ce:	43db      	mvns	r3, r3
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	4013      	ands	r3, r2
 80047d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	68da      	ldr	r2, [r3, #12]
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	fa02 f303 	lsl.w	r3, r2, r3
 80047e2:	69ba      	ldr	r2, [r7, #24]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	69ba      	ldr	r2, [r7, #24]
 80047ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80047f4:	2201      	movs	r2, #1
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	fa02 f303 	lsl.w	r3, r2, r3
 80047fc:	43db      	mvns	r3, r3
 80047fe:	69ba      	ldr	r2, [r7, #24]
 8004800:	4013      	ands	r3, r2
 8004802:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	091b      	lsrs	r3, r3, #4
 800480a:	f003 0201 	and.w	r2, r3, #1
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	fa02 f303 	lsl.w	r3, r2, r3
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	4313      	orrs	r3, r2
 8004818:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f003 0303 	and.w	r3, r3, #3
 8004828:	2b03      	cmp	r3, #3
 800482a:	d017      	beq.n	800485c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	005b      	lsls	r3, r3, #1
 8004836:	2203      	movs	r2, #3
 8004838:	fa02 f303 	lsl.w	r3, r2, r3
 800483c:	43db      	mvns	r3, r3
 800483e:	69ba      	ldr	r2, [r7, #24]
 8004840:	4013      	ands	r3, r2
 8004842:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	689a      	ldr	r2, [r3, #8]
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	005b      	lsls	r3, r3, #1
 800484c:	fa02 f303 	lsl.w	r3, r2, r3
 8004850:	69ba      	ldr	r2, [r7, #24]
 8004852:	4313      	orrs	r3, r2
 8004854:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	69ba      	ldr	r2, [r7, #24]
 800485a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f003 0303 	and.w	r3, r3, #3
 8004864:	2b02      	cmp	r3, #2
 8004866:	d123      	bne.n	80048b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	08da      	lsrs	r2, r3, #3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	3208      	adds	r2, #8
 8004870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004874:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	f003 0307 	and.w	r3, r3, #7
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	220f      	movs	r2, #15
 8004880:	fa02 f303 	lsl.w	r3, r2, r3
 8004884:	43db      	mvns	r3, r3
 8004886:	69ba      	ldr	r2, [r7, #24]
 8004888:	4013      	ands	r3, r2
 800488a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	691a      	ldr	r2, [r3, #16]
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	f003 0307 	and.w	r3, r3, #7
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	fa02 f303 	lsl.w	r3, r2, r3
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	4313      	orrs	r3, r2
 80048a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	08da      	lsrs	r2, r3, #3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	3208      	adds	r2, #8
 80048aa:	69b9      	ldr	r1, [r7, #24]
 80048ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	005b      	lsls	r3, r3, #1
 80048ba:	2203      	movs	r2, #3
 80048bc:	fa02 f303 	lsl.w	r3, r2, r3
 80048c0:	43db      	mvns	r3, r3
 80048c2:	69ba      	ldr	r2, [r7, #24]
 80048c4:	4013      	ands	r3, r2
 80048c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f003 0203 	and.w	r2, r3, #3
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	005b      	lsls	r3, r3, #1
 80048d4:	fa02 f303 	lsl.w	r3, r2, r3
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	4313      	orrs	r3, r2
 80048dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f000 80a2 	beq.w	8004a36 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048f2:	2300      	movs	r3, #0
 80048f4:	60fb      	str	r3, [r7, #12]
 80048f6:	4b57      	ldr	r3, [pc, #348]	; (8004a54 <HAL_GPIO_Init+0x2e8>)
 80048f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048fa:	4a56      	ldr	r2, [pc, #344]	; (8004a54 <HAL_GPIO_Init+0x2e8>)
 80048fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004900:	6453      	str	r3, [r2, #68]	; 0x44
 8004902:	4b54      	ldr	r3, [pc, #336]	; (8004a54 <HAL_GPIO_Init+0x2e8>)
 8004904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800490a:	60fb      	str	r3, [r7, #12]
 800490c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800490e:	4a52      	ldr	r2, [pc, #328]	; (8004a58 <HAL_GPIO_Init+0x2ec>)
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	089b      	lsrs	r3, r3, #2
 8004914:	3302      	adds	r3, #2
 8004916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800491a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	f003 0303 	and.w	r3, r3, #3
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	220f      	movs	r2, #15
 8004926:	fa02 f303 	lsl.w	r3, r2, r3
 800492a:	43db      	mvns	r3, r3
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	4013      	ands	r3, r2
 8004930:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a49      	ldr	r2, [pc, #292]	; (8004a5c <HAL_GPIO_Init+0x2f0>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d019      	beq.n	800496e <HAL_GPIO_Init+0x202>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a48      	ldr	r2, [pc, #288]	; (8004a60 <HAL_GPIO_Init+0x2f4>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d013      	beq.n	800496a <HAL_GPIO_Init+0x1fe>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a47      	ldr	r2, [pc, #284]	; (8004a64 <HAL_GPIO_Init+0x2f8>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d00d      	beq.n	8004966 <HAL_GPIO_Init+0x1fa>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a46      	ldr	r2, [pc, #280]	; (8004a68 <HAL_GPIO_Init+0x2fc>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d007      	beq.n	8004962 <HAL_GPIO_Init+0x1f6>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a45      	ldr	r2, [pc, #276]	; (8004a6c <HAL_GPIO_Init+0x300>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d101      	bne.n	800495e <HAL_GPIO_Init+0x1f2>
 800495a:	2304      	movs	r3, #4
 800495c:	e008      	b.n	8004970 <HAL_GPIO_Init+0x204>
 800495e:	2307      	movs	r3, #7
 8004960:	e006      	b.n	8004970 <HAL_GPIO_Init+0x204>
 8004962:	2303      	movs	r3, #3
 8004964:	e004      	b.n	8004970 <HAL_GPIO_Init+0x204>
 8004966:	2302      	movs	r3, #2
 8004968:	e002      	b.n	8004970 <HAL_GPIO_Init+0x204>
 800496a:	2301      	movs	r3, #1
 800496c:	e000      	b.n	8004970 <HAL_GPIO_Init+0x204>
 800496e:	2300      	movs	r3, #0
 8004970:	69fa      	ldr	r2, [r7, #28]
 8004972:	f002 0203 	and.w	r2, r2, #3
 8004976:	0092      	lsls	r2, r2, #2
 8004978:	4093      	lsls	r3, r2
 800497a:	69ba      	ldr	r2, [r7, #24]
 800497c:	4313      	orrs	r3, r2
 800497e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004980:	4935      	ldr	r1, [pc, #212]	; (8004a58 <HAL_GPIO_Init+0x2ec>)
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	089b      	lsrs	r3, r3, #2
 8004986:	3302      	adds	r3, #2
 8004988:	69ba      	ldr	r2, [r7, #24]
 800498a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800498e:	4b38      	ldr	r3, [pc, #224]	; (8004a70 <HAL_GPIO_Init+0x304>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	43db      	mvns	r3, r3
 8004998:	69ba      	ldr	r2, [r7, #24]
 800499a:	4013      	ands	r3, r2
 800499c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d003      	beq.n	80049b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80049aa:	69ba      	ldr	r2, [r7, #24]
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80049b2:	4a2f      	ldr	r2, [pc, #188]	; (8004a70 <HAL_GPIO_Init+0x304>)
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80049b8:	4b2d      	ldr	r3, [pc, #180]	; (8004a70 <HAL_GPIO_Init+0x304>)
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	43db      	mvns	r3, r3
 80049c2:	69ba      	ldr	r2, [r7, #24]
 80049c4:	4013      	ands	r3, r2
 80049c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d003      	beq.n	80049dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	4313      	orrs	r3, r2
 80049da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80049dc:	4a24      	ldr	r2, [pc, #144]	; (8004a70 <HAL_GPIO_Init+0x304>)
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80049e2:	4b23      	ldr	r3, [pc, #140]	; (8004a70 <HAL_GPIO_Init+0x304>)
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	43db      	mvns	r3, r3
 80049ec:	69ba      	ldr	r2, [r7, #24]
 80049ee:	4013      	ands	r3, r2
 80049f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d003      	beq.n	8004a06 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80049fe:	69ba      	ldr	r2, [r7, #24]
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a06:	4a1a      	ldr	r2, [pc, #104]	; (8004a70 <HAL_GPIO_Init+0x304>)
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a0c:	4b18      	ldr	r3, [pc, #96]	; (8004a70 <HAL_GPIO_Init+0x304>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	43db      	mvns	r3, r3
 8004a16:	69ba      	ldr	r2, [r7, #24]
 8004a18:	4013      	ands	r3, r2
 8004a1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d003      	beq.n	8004a30 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a30:	4a0f      	ldr	r2, [pc, #60]	; (8004a70 <HAL_GPIO_Init+0x304>)
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	3301      	adds	r3, #1
 8004a3a:	61fb      	str	r3, [r7, #28]
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	2b0f      	cmp	r3, #15
 8004a40:	f67f aea2 	bls.w	8004788 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004a44:	bf00      	nop
 8004a46:	bf00      	nop
 8004a48:	3724      	adds	r7, #36	; 0x24
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	40023800 	.word	0x40023800
 8004a58:	40013800 	.word	0x40013800
 8004a5c:	40020000 	.word	0x40020000
 8004a60:	40020400 	.word	0x40020400
 8004a64:	40020800 	.word	0x40020800
 8004a68:	40020c00 	.word	0x40020c00
 8004a6c:	40021000 	.word	0x40021000
 8004a70:	40013c00 	.word	0x40013c00

08004a74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	807b      	strh	r3, [r7, #2]
 8004a80:	4613      	mov	r3, r2
 8004a82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a84:	787b      	ldrb	r3, [r7, #1]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d003      	beq.n	8004a92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a8a:	887a      	ldrh	r2, [r7, #2]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a90:	e003      	b.n	8004a9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a92:	887b      	ldrh	r3, [r7, #2]
 8004a94:	041a      	lsls	r2, r3, #16
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	619a      	str	r2, [r3, #24]
}
 8004a9a:	bf00      	nop
 8004a9c:	370c      	adds	r7, #12
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr

08004aa6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b085      	sub	sp, #20
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
 8004aae:	460b      	mov	r3, r1
 8004ab0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ab8:	887a      	ldrh	r2, [r7, #2]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	4013      	ands	r3, r2
 8004abe:	041a      	lsls	r2, r3, #16
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	43d9      	mvns	r1, r3
 8004ac4:	887b      	ldrh	r3, [r7, #2]
 8004ac6:	400b      	ands	r3, r1
 8004ac8:	431a      	orrs	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	619a      	str	r2, [r3, #24]
}
 8004ace:	bf00      	nop
 8004ad0:	3714      	adds	r7, #20
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
	...

08004adc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b086      	sub	sp, #24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d101      	bne.n	8004aee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e267      	b.n	8004fbe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0301 	and.w	r3, r3, #1
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d075      	beq.n	8004be6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004afa:	4b88      	ldr	r3, [pc, #544]	; (8004d1c <HAL_RCC_OscConfig+0x240>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f003 030c 	and.w	r3, r3, #12
 8004b02:	2b04      	cmp	r3, #4
 8004b04:	d00c      	beq.n	8004b20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b06:	4b85      	ldr	r3, [pc, #532]	; (8004d1c <HAL_RCC_OscConfig+0x240>)
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b0e:	2b08      	cmp	r3, #8
 8004b10:	d112      	bne.n	8004b38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b12:	4b82      	ldr	r3, [pc, #520]	; (8004d1c <HAL_RCC_OscConfig+0x240>)
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b1e:	d10b      	bne.n	8004b38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b20:	4b7e      	ldr	r3, [pc, #504]	; (8004d1c <HAL_RCC_OscConfig+0x240>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d05b      	beq.n	8004be4 <HAL_RCC_OscConfig+0x108>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d157      	bne.n	8004be4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e242      	b.n	8004fbe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b40:	d106      	bne.n	8004b50 <HAL_RCC_OscConfig+0x74>
 8004b42:	4b76      	ldr	r3, [pc, #472]	; (8004d1c <HAL_RCC_OscConfig+0x240>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a75      	ldr	r2, [pc, #468]	; (8004d1c <HAL_RCC_OscConfig+0x240>)
 8004b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b4c:	6013      	str	r3, [r2, #0]
 8004b4e:	e01d      	b.n	8004b8c <HAL_RCC_OscConfig+0xb0>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b58:	d10c      	bne.n	8004b74 <HAL_RCC_OscConfig+0x98>
 8004b5a:	4b70      	ldr	r3, [pc, #448]	; (8004d1c <HAL_RCC_OscConfig+0x240>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a6f      	ldr	r2, [pc, #444]	; (8004d1c <HAL_RCC_OscConfig+0x240>)
 8004b60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b64:	6013      	str	r3, [r2, #0]
 8004b66:	4b6d      	ldr	r3, [pc, #436]	; (8004d1c <HAL_RCC_OscConfig+0x240>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a6c      	ldr	r2, [pc, #432]	; (8004d1c <HAL_RCC_OscConfig+0x240>)
 8004b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b70:	6013      	str	r3, [r2, #0]
 8004b72:	e00b      	b.n	8004b8c <HAL_RCC_OscConfig+0xb0>
 8004b74:	4b69      	ldr	r3, [pc, #420]	; (8004d1c <HAL_RCC_OscConfig+0x240>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a68      	ldr	r2, [pc, #416]	; (8004d1c <HAL_RCC_OscConfig+0x240>)
 8004b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b7e:	6013      	str	r3, [r2, #0]
 8004b80:	4b66      	ldr	r3, [pc, #408]	; (8004d1c <HAL_RCC_OscConfig+0x240>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a65      	ldr	r2, [pc, #404]	; (8004d1c <HAL_RCC_OscConfig+0x240>)
 8004b86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d013      	beq.n	8004bbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b94:	f7fe fbb4 	bl	8003300 <HAL_GetTick>
 8004b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b9a:	e008      	b.n	8004bae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b9c:	f7fe fbb0 	bl	8003300 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b64      	cmp	r3, #100	; 0x64
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e207      	b.n	8004fbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bae:	4b5b      	ldr	r3, [pc, #364]	; (8004d1c <HAL_RCC_OscConfig+0x240>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d0f0      	beq.n	8004b9c <HAL_RCC_OscConfig+0xc0>
 8004bba:	e014      	b.n	8004be6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bbc:	f7fe fba0 	bl	8003300 <HAL_GetTick>
 8004bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bc2:	e008      	b.n	8004bd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bc4:	f7fe fb9c 	bl	8003300 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	2b64      	cmp	r3, #100	; 0x64
 8004bd0:	d901      	bls.n	8004bd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e1f3      	b.n	8004fbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bd6:	4b51      	ldr	r3, [pc, #324]	; (8004d1c <HAL_RCC_OscConfig+0x240>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1f0      	bne.n	8004bc4 <HAL_RCC_OscConfig+0xe8>
 8004be2:	e000      	b.n	8004be6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004be4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d063      	beq.n	8004cba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bf2:	4b4a      	ldr	r3, [pc, #296]	; (8004d1c <HAL_RCC_OscConfig+0x240>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f003 030c 	and.w	r3, r3, #12
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00b      	beq.n	8004c16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bfe:	4b47      	ldr	r3, [pc, #284]	; (8004d1c <HAL_RCC_OscConfig+0x240>)
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c06:	2b08      	cmp	r3, #8
 8004c08:	d11c      	bne.n	8004c44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c0a:	4b44      	ldr	r3, [pc, #272]	; (8004d1c <HAL_RCC_OscConfig+0x240>)
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d116      	bne.n	8004c44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c16:	4b41      	ldr	r3, [pc, #260]	; (8004d1c <HAL_RCC_OscConfig+0x240>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d005      	beq.n	8004c2e <HAL_RCC_OscConfig+0x152>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d001      	beq.n	8004c2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e1c7      	b.n	8004fbe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c2e:	4b3b      	ldr	r3, [pc, #236]	; (8004d1c <HAL_RCC_OscConfig+0x240>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	00db      	lsls	r3, r3, #3
 8004c3c:	4937      	ldr	r1, [pc, #220]	; (8004d1c <HAL_RCC_OscConfig+0x240>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c42:	e03a      	b.n	8004cba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d020      	beq.n	8004c8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c4c:	4b34      	ldr	r3, [pc, #208]	; (8004d20 <HAL_RCC_OscConfig+0x244>)
 8004c4e:	2201      	movs	r2, #1
 8004c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c52:	f7fe fb55 	bl	8003300 <HAL_GetTick>
 8004c56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c58:	e008      	b.n	8004c6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c5a:	f7fe fb51 	bl	8003300 <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d901      	bls.n	8004c6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e1a8      	b.n	8004fbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c6c:	4b2b      	ldr	r3, [pc, #172]	; (8004d1c <HAL_RCC_OscConfig+0x240>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0302 	and.w	r3, r3, #2
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d0f0      	beq.n	8004c5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c78:	4b28      	ldr	r3, [pc, #160]	; (8004d1c <HAL_RCC_OscConfig+0x240>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	00db      	lsls	r3, r3, #3
 8004c86:	4925      	ldr	r1, [pc, #148]	; (8004d1c <HAL_RCC_OscConfig+0x240>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	600b      	str	r3, [r1, #0]
 8004c8c:	e015      	b.n	8004cba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c8e:	4b24      	ldr	r3, [pc, #144]	; (8004d20 <HAL_RCC_OscConfig+0x244>)
 8004c90:	2200      	movs	r2, #0
 8004c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c94:	f7fe fb34 	bl	8003300 <HAL_GetTick>
 8004c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c9a:	e008      	b.n	8004cae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c9c:	f7fe fb30 	bl	8003300 <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d901      	bls.n	8004cae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e187      	b.n	8004fbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cae:	4b1b      	ldr	r3, [pc, #108]	; (8004d1c <HAL_RCC_OscConfig+0x240>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d1f0      	bne.n	8004c9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0308 	and.w	r3, r3, #8
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d036      	beq.n	8004d34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d016      	beq.n	8004cfc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cce:	4b15      	ldr	r3, [pc, #84]	; (8004d24 <HAL_RCC_OscConfig+0x248>)
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd4:	f7fe fb14 	bl	8003300 <HAL_GetTick>
 8004cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cda:	e008      	b.n	8004cee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cdc:	f7fe fb10 	bl	8003300 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d901      	bls.n	8004cee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e167      	b.n	8004fbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cee:	4b0b      	ldr	r3, [pc, #44]	; (8004d1c <HAL_RCC_OscConfig+0x240>)
 8004cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cf2:	f003 0302 	and.w	r3, r3, #2
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d0f0      	beq.n	8004cdc <HAL_RCC_OscConfig+0x200>
 8004cfa:	e01b      	b.n	8004d34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cfc:	4b09      	ldr	r3, [pc, #36]	; (8004d24 <HAL_RCC_OscConfig+0x248>)
 8004cfe:	2200      	movs	r2, #0
 8004d00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d02:	f7fe fafd 	bl	8003300 <HAL_GetTick>
 8004d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d08:	e00e      	b.n	8004d28 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d0a:	f7fe faf9 	bl	8003300 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d907      	bls.n	8004d28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e150      	b.n	8004fbe <HAL_RCC_OscConfig+0x4e2>
 8004d1c:	40023800 	.word	0x40023800
 8004d20:	42470000 	.word	0x42470000
 8004d24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d28:	4b88      	ldr	r3, [pc, #544]	; (8004f4c <HAL_RCC_OscConfig+0x470>)
 8004d2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d2c:	f003 0302 	and.w	r3, r3, #2
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d1ea      	bne.n	8004d0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0304 	and.w	r3, r3, #4
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f000 8097 	beq.w	8004e70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d42:	2300      	movs	r3, #0
 8004d44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d46:	4b81      	ldr	r3, [pc, #516]	; (8004f4c <HAL_RCC_OscConfig+0x470>)
 8004d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d10f      	bne.n	8004d72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d52:	2300      	movs	r3, #0
 8004d54:	60bb      	str	r3, [r7, #8]
 8004d56:	4b7d      	ldr	r3, [pc, #500]	; (8004f4c <HAL_RCC_OscConfig+0x470>)
 8004d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5a:	4a7c      	ldr	r2, [pc, #496]	; (8004f4c <HAL_RCC_OscConfig+0x470>)
 8004d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d60:	6413      	str	r3, [r2, #64]	; 0x40
 8004d62:	4b7a      	ldr	r3, [pc, #488]	; (8004f4c <HAL_RCC_OscConfig+0x470>)
 8004d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d6a:	60bb      	str	r3, [r7, #8]
 8004d6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d72:	4b77      	ldr	r3, [pc, #476]	; (8004f50 <HAL_RCC_OscConfig+0x474>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d118      	bne.n	8004db0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d7e:	4b74      	ldr	r3, [pc, #464]	; (8004f50 <HAL_RCC_OscConfig+0x474>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a73      	ldr	r2, [pc, #460]	; (8004f50 <HAL_RCC_OscConfig+0x474>)
 8004d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d8a:	f7fe fab9 	bl	8003300 <HAL_GetTick>
 8004d8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d90:	e008      	b.n	8004da4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d92:	f7fe fab5 	bl	8003300 <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d901      	bls.n	8004da4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e10c      	b.n	8004fbe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004da4:	4b6a      	ldr	r3, [pc, #424]	; (8004f50 <HAL_RCC_OscConfig+0x474>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d0f0      	beq.n	8004d92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d106      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x2ea>
 8004db8:	4b64      	ldr	r3, [pc, #400]	; (8004f4c <HAL_RCC_OscConfig+0x470>)
 8004dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dbc:	4a63      	ldr	r2, [pc, #396]	; (8004f4c <HAL_RCC_OscConfig+0x470>)
 8004dbe:	f043 0301 	orr.w	r3, r3, #1
 8004dc2:	6713      	str	r3, [r2, #112]	; 0x70
 8004dc4:	e01c      	b.n	8004e00 <HAL_RCC_OscConfig+0x324>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	2b05      	cmp	r3, #5
 8004dcc:	d10c      	bne.n	8004de8 <HAL_RCC_OscConfig+0x30c>
 8004dce:	4b5f      	ldr	r3, [pc, #380]	; (8004f4c <HAL_RCC_OscConfig+0x470>)
 8004dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd2:	4a5e      	ldr	r2, [pc, #376]	; (8004f4c <HAL_RCC_OscConfig+0x470>)
 8004dd4:	f043 0304 	orr.w	r3, r3, #4
 8004dd8:	6713      	str	r3, [r2, #112]	; 0x70
 8004dda:	4b5c      	ldr	r3, [pc, #368]	; (8004f4c <HAL_RCC_OscConfig+0x470>)
 8004ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dde:	4a5b      	ldr	r2, [pc, #364]	; (8004f4c <HAL_RCC_OscConfig+0x470>)
 8004de0:	f043 0301 	orr.w	r3, r3, #1
 8004de4:	6713      	str	r3, [r2, #112]	; 0x70
 8004de6:	e00b      	b.n	8004e00 <HAL_RCC_OscConfig+0x324>
 8004de8:	4b58      	ldr	r3, [pc, #352]	; (8004f4c <HAL_RCC_OscConfig+0x470>)
 8004dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dec:	4a57      	ldr	r2, [pc, #348]	; (8004f4c <HAL_RCC_OscConfig+0x470>)
 8004dee:	f023 0301 	bic.w	r3, r3, #1
 8004df2:	6713      	str	r3, [r2, #112]	; 0x70
 8004df4:	4b55      	ldr	r3, [pc, #340]	; (8004f4c <HAL_RCC_OscConfig+0x470>)
 8004df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df8:	4a54      	ldr	r2, [pc, #336]	; (8004f4c <HAL_RCC_OscConfig+0x470>)
 8004dfa:	f023 0304 	bic.w	r3, r3, #4
 8004dfe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d015      	beq.n	8004e34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e08:	f7fe fa7a 	bl	8003300 <HAL_GetTick>
 8004e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e0e:	e00a      	b.n	8004e26 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e10:	f7fe fa76 	bl	8003300 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e0cb      	b.n	8004fbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e26:	4b49      	ldr	r3, [pc, #292]	; (8004f4c <HAL_RCC_OscConfig+0x470>)
 8004e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e2a:	f003 0302 	and.w	r3, r3, #2
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d0ee      	beq.n	8004e10 <HAL_RCC_OscConfig+0x334>
 8004e32:	e014      	b.n	8004e5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e34:	f7fe fa64 	bl	8003300 <HAL_GetTick>
 8004e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e3a:	e00a      	b.n	8004e52 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e3c:	f7fe fa60 	bl	8003300 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d901      	bls.n	8004e52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e0b5      	b.n	8004fbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e52:	4b3e      	ldr	r3, [pc, #248]	; (8004f4c <HAL_RCC_OscConfig+0x470>)
 8004e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d1ee      	bne.n	8004e3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e5e:	7dfb      	ldrb	r3, [r7, #23]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d105      	bne.n	8004e70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e64:	4b39      	ldr	r3, [pc, #228]	; (8004f4c <HAL_RCC_OscConfig+0x470>)
 8004e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e68:	4a38      	ldr	r2, [pc, #224]	; (8004f4c <HAL_RCC_OscConfig+0x470>)
 8004e6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	699b      	ldr	r3, [r3, #24]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f000 80a1 	beq.w	8004fbc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e7a:	4b34      	ldr	r3, [pc, #208]	; (8004f4c <HAL_RCC_OscConfig+0x470>)
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f003 030c 	and.w	r3, r3, #12
 8004e82:	2b08      	cmp	r3, #8
 8004e84:	d05c      	beq.n	8004f40 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d141      	bne.n	8004f12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e8e:	4b31      	ldr	r3, [pc, #196]	; (8004f54 <HAL_RCC_OscConfig+0x478>)
 8004e90:	2200      	movs	r2, #0
 8004e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e94:	f7fe fa34 	bl	8003300 <HAL_GetTick>
 8004e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e9a:	e008      	b.n	8004eae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e9c:	f7fe fa30 	bl	8003300 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e087      	b.n	8004fbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eae:	4b27      	ldr	r3, [pc, #156]	; (8004f4c <HAL_RCC_OscConfig+0x470>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1f0      	bne.n	8004e9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	69da      	ldr	r2, [r3, #28]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec8:	019b      	lsls	r3, r3, #6
 8004eca:	431a      	orrs	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed0:	085b      	lsrs	r3, r3, #1
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	041b      	lsls	r3, r3, #16
 8004ed6:	431a      	orrs	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004edc:	061b      	lsls	r3, r3, #24
 8004ede:	491b      	ldr	r1, [pc, #108]	; (8004f4c <HAL_RCC_OscConfig+0x470>)
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ee4:	4b1b      	ldr	r3, [pc, #108]	; (8004f54 <HAL_RCC_OscConfig+0x478>)
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eea:	f7fe fa09 	bl	8003300 <HAL_GetTick>
 8004eee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ef0:	e008      	b.n	8004f04 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ef2:	f7fe fa05 	bl	8003300 <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d901      	bls.n	8004f04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	e05c      	b.n	8004fbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f04:	4b11      	ldr	r3, [pc, #68]	; (8004f4c <HAL_RCC_OscConfig+0x470>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d0f0      	beq.n	8004ef2 <HAL_RCC_OscConfig+0x416>
 8004f10:	e054      	b.n	8004fbc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f12:	4b10      	ldr	r3, [pc, #64]	; (8004f54 <HAL_RCC_OscConfig+0x478>)
 8004f14:	2200      	movs	r2, #0
 8004f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f18:	f7fe f9f2 	bl	8003300 <HAL_GetTick>
 8004f1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f1e:	e008      	b.n	8004f32 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f20:	f7fe f9ee 	bl	8003300 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e045      	b.n	8004fbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f32:	4b06      	ldr	r3, [pc, #24]	; (8004f4c <HAL_RCC_OscConfig+0x470>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1f0      	bne.n	8004f20 <HAL_RCC_OscConfig+0x444>
 8004f3e:	e03d      	b.n	8004fbc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d107      	bne.n	8004f58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e038      	b.n	8004fbe <HAL_RCC_OscConfig+0x4e2>
 8004f4c:	40023800 	.word	0x40023800
 8004f50:	40007000 	.word	0x40007000
 8004f54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f58:	4b1b      	ldr	r3, [pc, #108]	; (8004fc8 <HAL_RCC_OscConfig+0x4ec>)
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d028      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d121      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d11a      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f88:	4013      	ands	r3, r2
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d111      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9e:	085b      	lsrs	r3, r3, #1
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d107      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d001      	beq.n	8004fbc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e000      	b.n	8004fbe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3718      	adds	r7, #24
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	40023800 	.word	0x40023800

08004fcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d101      	bne.n	8004fe0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e0cc      	b.n	800517a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fe0:	4b68      	ldr	r3, [pc, #416]	; (8005184 <HAL_RCC_ClockConfig+0x1b8>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0307 	and.w	r3, r3, #7
 8004fe8:	683a      	ldr	r2, [r7, #0]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d90c      	bls.n	8005008 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fee:	4b65      	ldr	r3, [pc, #404]	; (8005184 <HAL_RCC_ClockConfig+0x1b8>)
 8004ff0:	683a      	ldr	r2, [r7, #0]
 8004ff2:	b2d2      	uxtb	r2, r2
 8004ff4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ff6:	4b63      	ldr	r3, [pc, #396]	; (8005184 <HAL_RCC_ClockConfig+0x1b8>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0307 	and.w	r3, r3, #7
 8004ffe:	683a      	ldr	r2, [r7, #0]
 8005000:	429a      	cmp	r2, r3
 8005002:	d001      	beq.n	8005008 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e0b8      	b.n	800517a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0302 	and.w	r3, r3, #2
 8005010:	2b00      	cmp	r3, #0
 8005012:	d020      	beq.n	8005056 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0304 	and.w	r3, r3, #4
 800501c:	2b00      	cmp	r3, #0
 800501e:	d005      	beq.n	800502c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005020:	4b59      	ldr	r3, [pc, #356]	; (8005188 <HAL_RCC_ClockConfig+0x1bc>)
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	4a58      	ldr	r2, [pc, #352]	; (8005188 <HAL_RCC_ClockConfig+0x1bc>)
 8005026:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800502a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0308 	and.w	r3, r3, #8
 8005034:	2b00      	cmp	r3, #0
 8005036:	d005      	beq.n	8005044 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005038:	4b53      	ldr	r3, [pc, #332]	; (8005188 <HAL_RCC_ClockConfig+0x1bc>)
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	4a52      	ldr	r2, [pc, #328]	; (8005188 <HAL_RCC_ClockConfig+0x1bc>)
 800503e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005042:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005044:	4b50      	ldr	r3, [pc, #320]	; (8005188 <HAL_RCC_ClockConfig+0x1bc>)
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	494d      	ldr	r1, [pc, #308]	; (8005188 <HAL_RCC_ClockConfig+0x1bc>)
 8005052:	4313      	orrs	r3, r2
 8005054:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0301 	and.w	r3, r3, #1
 800505e:	2b00      	cmp	r3, #0
 8005060:	d044      	beq.n	80050ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d107      	bne.n	800507a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800506a:	4b47      	ldr	r3, [pc, #284]	; (8005188 <HAL_RCC_ClockConfig+0x1bc>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d119      	bne.n	80050aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e07f      	b.n	800517a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	2b02      	cmp	r3, #2
 8005080:	d003      	beq.n	800508a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005086:	2b03      	cmp	r3, #3
 8005088:	d107      	bne.n	800509a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800508a:	4b3f      	ldr	r3, [pc, #252]	; (8005188 <HAL_RCC_ClockConfig+0x1bc>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d109      	bne.n	80050aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e06f      	b.n	800517a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800509a:	4b3b      	ldr	r3, [pc, #236]	; (8005188 <HAL_RCC_ClockConfig+0x1bc>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d101      	bne.n	80050aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e067      	b.n	800517a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050aa:	4b37      	ldr	r3, [pc, #220]	; (8005188 <HAL_RCC_ClockConfig+0x1bc>)
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f023 0203 	bic.w	r2, r3, #3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	4934      	ldr	r1, [pc, #208]	; (8005188 <HAL_RCC_ClockConfig+0x1bc>)
 80050b8:	4313      	orrs	r3, r2
 80050ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050bc:	f7fe f920 	bl	8003300 <HAL_GetTick>
 80050c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050c2:	e00a      	b.n	80050da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050c4:	f7fe f91c 	bl	8003300 <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d901      	bls.n	80050da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e04f      	b.n	800517a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050da:	4b2b      	ldr	r3, [pc, #172]	; (8005188 <HAL_RCC_ClockConfig+0x1bc>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f003 020c 	and.w	r2, r3, #12
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d1eb      	bne.n	80050c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050ec:	4b25      	ldr	r3, [pc, #148]	; (8005184 <HAL_RCC_ClockConfig+0x1b8>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0307 	and.w	r3, r3, #7
 80050f4:	683a      	ldr	r2, [r7, #0]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d20c      	bcs.n	8005114 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050fa:	4b22      	ldr	r3, [pc, #136]	; (8005184 <HAL_RCC_ClockConfig+0x1b8>)
 80050fc:	683a      	ldr	r2, [r7, #0]
 80050fe:	b2d2      	uxtb	r2, r2
 8005100:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005102:	4b20      	ldr	r3, [pc, #128]	; (8005184 <HAL_RCC_ClockConfig+0x1b8>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0307 	and.w	r3, r3, #7
 800510a:	683a      	ldr	r2, [r7, #0]
 800510c:	429a      	cmp	r2, r3
 800510e:	d001      	beq.n	8005114 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e032      	b.n	800517a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0304 	and.w	r3, r3, #4
 800511c:	2b00      	cmp	r3, #0
 800511e:	d008      	beq.n	8005132 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005120:	4b19      	ldr	r3, [pc, #100]	; (8005188 <HAL_RCC_ClockConfig+0x1bc>)
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	4916      	ldr	r1, [pc, #88]	; (8005188 <HAL_RCC_ClockConfig+0x1bc>)
 800512e:	4313      	orrs	r3, r2
 8005130:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0308 	and.w	r3, r3, #8
 800513a:	2b00      	cmp	r3, #0
 800513c:	d009      	beq.n	8005152 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800513e:	4b12      	ldr	r3, [pc, #72]	; (8005188 <HAL_RCC_ClockConfig+0x1bc>)
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	00db      	lsls	r3, r3, #3
 800514c:	490e      	ldr	r1, [pc, #56]	; (8005188 <HAL_RCC_ClockConfig+0x1bc>)
 800514e:	4313      	orrs	r3, r2
 8005150:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005152:	f000 f821 	bl	8005198 <HAL_RCC_GetSysClockFreq>
 8005156:	4602      	mov	r2, r0
 8005158:	4b0b      	ldr	r3, [pc, #44]	; (8005188 <HAL_RCC_ClockConfig+0x1bc>)
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	091b      	lsrs	r3, r3, #4
 800515e:	f003 030f 	and.w	r3, r3, #15
 8005162:	490a      	ldr	r1, [pc, #40]	; (800518c <HAL_RCC_ClockConfig+0x1c0>)
 8005164:	5ccb      	ldrb	r3, [r1, r3]
 8005166:	fa22 f303 	lsr.w	r3, r2, r3
 800516a:	4a09      	ldr	r2, [pc, #36]	; (8005190 <HAL_RCC_ClockConfig+0x1c4>)
 800516c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800516e:	4b09      	ldr	r3, [pc, #36]	; (8005194 <HAL_RCC_ClockConfig+0x1c8>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4618      	mov	r0, r3
 8005174:	f7fe f880 	bl	8003278 <HAL_InitTick>

  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3710      	adds	r7, #16
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	40023c00 	.word	0x40023c00
 8005188:	40023800 	.word	0x40023800
 800518c:	080075c0 	.word	0x080075c0
 8005190:	20000004 	.word	0x20000004
 8005194:	20000008 	.word	0x20000008

08005198 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005198:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800519c:	b094      	sub	sp, #80	; 0x50
 800519e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80051a0:	2300      	movs	r3, #0
 80051a2:	647b      	str	r3, [r7, #68]	; 0x44
 80051a4:	2300      	movs	r3, #0
 80051a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051a8:	2300      	movs	r3, #0
 80051aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80051ac:	2300      	movs	r3, #0
 80051ae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051b0:	4b79      	ldr	r3, [pc, #484]	; (8005398 <HAL_RCC_GetSysClockFreq+0x200>)
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	f003 030c 	and.w	r3, r3, #12
 80051b8:	2b08      	cmp	r3, #8
 80051ba:	d00d      	beq.n	80051d8 <HAL_RCC_GetSysClockFreq+0x40>
 80051bc:	2b08      	cmp	r3, #8
 80051be:	f200 80e1 	bhi.w	8005384 <HAL_RCC_GetSysClockFreq+0x1ec>
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d002      	beq.n	80051cc <HAL_RCC_GetSysClockFreq+0x34>
 80051c6:	2b04      	cmp	r3, #4
 80051c8:	d003      	beq.n	80051d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80051ca:	e0db      	b.n	8005384 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051cc:	4b73      	ldr	r3, [pc, #460]	; (800539c <HAL_RCC_GetSysClockFreq+0x204>)
 80051ce:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80051d0:	e0db      	b.n	800538a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051d2:	4b73      	ldr	r3, [pc, #460]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x208>)
 80051d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051d6:	e0d8      	b.n	800538a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051d8:	4b6f      	ldr	r3, [pc, #444]	; (8005398 <HAL_RCC_GetSysClockFreq+0x200>)
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051e0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051e2:	4b6d      	ldr	r3, [pc, #436]	; (8005398 <HAL_RCC_GetSysClockFreq+0x200>)
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d063      	beq.n	80052b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051ee:	4b6a      	ldr	r3, [pc, #424]	; (8005398 <HAL_RCC_GetSysClockFreq+0x200>)
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	099b      	lsrs	r3, r3, #6
 80051f4:	2200      	movs	r2, #0
 80051f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80051f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80051fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005200:	633b      	str	r3, [r7, #48]	; 0x30
 8005202:	2300      	movs	r3, #0
 8005204:	637b      	str	r3, [r7, #52]	; 0x34
 8005206:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800520a:	4622      	mov	r2, r4
 800520c:	462b      	mov	r3, r5
 800520e:	f04f 0000 	mov.w	r0, #0
 8005212:	f04f 0100 	mov.w	r1, #0
 8005216:	0159      	lsls	r1, r3, #5
 8005218:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800521c:	0150      	lsls	r0, r2, #5
 800521e:	4602      	mov	r2, r0
 8005220:	460b      	mov	r3, r1
 8005222:	4621      	mov	r1, r4
 8005224:	1a51      	subs	r1, r2, r1
 8005226:	6139      	str	r1, [r7, #16]
 8005228:	4629      	mov	r1, r5
 800522a:	eb63 0301 	sbc.w	r3, r3, r1
 800522e:	617b      	str	r3, [r7, #20]
 8005230:	f04f 0200 	mov.w	r2, #0
 8005234:	f04f 0300 	mov.w	r3, #0
 8005238:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800523c:	4659      	mov	r1, fp
 800523e:	018b      	lsls	r3, r1, #6
 8005240:	4651      	mov	r1, sl
 8005242:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005246:	4651      	mov	r1, sl
 8005248:	018a      	lsls	r2, r1, #6
 800524a:	4651      	mov	r1, sl
 800524c:	ebb2 0801 	subs.w	r8, r2, r1
 8005250:	4659      	mov	r1, fp
 8005252:	eb63 0901 	sbc.w	r9, r3, r1
 8005256:	f04f 0200 	mov.w	r2, #0
 800525a:	f04f 0300 	mov.w	r3, #0
 800525e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005262:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005266:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800526a:	4690      	mov	r8, r2
 800526c:	4699      	mov	r9, r3
 800526e:	4623      	mov	r3, r4
 8005270:	eb18 0303 	adds.w	r3, r8, r3
 8005274:	60bb      	str	r3, [r7, #8]
 8005276:	462b      	mov	r3, r5
 8005278:	eb49 0303 	adc.w	r3, r9, r3
 800527c:	60fb      	str	r3, [r7, #12]
 800527e:	f04f 0200 	mov.w	r2, #0
 8005282:	f04f 0300 	mov.w	r3, #0
 8005286:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800528a:	4629      	mov	r1, r5
 800528c:	024b      	lsls	r3, r1, #9
 800528e:	4621      	mov	r1, r4
 8005290:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005294:	4621      	mov	r1, r4
 8005296:	024a      	lsls	r2, r1, #9
 8005298:	4610      	mov	r0, r2
 800529a:	4619      	mov	r1, r3
 800529c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800529e:	2200      	movs	r2, #0
 80052a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80052a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052a8:	f7fb f9da 	bl	8000660 <__aeabi_uldivmod>
 80052ac:	4602      	mov	r2, r0
 80052ae:	460b      	mov	r3, r1
 80052b0:	4613      	mov	r3, r2
 80052b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052b4:	e058      	b.n	8005368 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052b6:	4b38      	ldr	r3, [pc, #224]	; (8005398 <HAL_RCC_GetSysClockFreq+0x200>)
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	099b      	lsrs	r3, r3, #6
 80052bc:	2200      	movs	r2, #0
 80052be:	4618      	mov	r0, r3
 80052c0:	4611      	mov	r1, r2
 80052c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80052c6:	623b      	str	r3, [r7, #32]
 80052c8:	2300      	movs	r3, #0
 80052ca:	627b      	str	r3, [r7, #36]	; 0x24
 80052cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80052d0:	4642      	mov	r2, r8
 80052d2:	464b      	mov	r3, r9
 80052d4:	f04f 0000 	mov.w	r0, #0
 80052d8:	f04f 0100 	mov.w	r1, #0
 80052dc:	0159      	lsls	r1, r3, #5
 80052de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052e2:	0150      	lsls	r0, r2, #5
 80052e4:	4602      	mov	r2, r0
 80052e6:	460b      	mov	r3, r1
 80052e8:	4641      	mov	r1, r8
 80052ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80052ee:	4649      	mov	r1, r9
 80052f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80052f4:	f04f 0200 	mov.w	r2, #0
 80052f8:	f04f 0300 	mov.w	r3, #0
 80052fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005300:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005304:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005308:	ebb2 040a 	subs.w	r4, r2, sl
 800530c:	eb63 050b 	sbc.w	r5, r3, fp
 8005310:	f04f 0200 	mov.w	r2, #0
 8005314:	f04f 0300 	mov.w	r3, #0
 8005318:	00eb      	lsls	r3, r5, #3
 800531a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800531e:	00e2      	lsls	r2, r4, #3
 8005320:	4614      	mov	r4, r2
 8005322:	461d      	mov	r5, r3
 8005324:	4643      	mov	r3, r8
 8005326:	18e3      	adds	r3, r4, r3
 8005328:	603b      	str	r3, [r7, #0]
 800532a:	464b      	mov	r3, r9
 800532c:	eb45 0303 	adc.w	r3, r5, r3
 8005330:	607b      	str	r3, [r7, #4]
 8005332:	f04f 0200 	mov.w	r2, #0
 8005336:	f04f 0300 	mov.w	r3, #0
 800533a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800533e:	4629      	mov	r1, r5
 8005340:	028b      	lsls	r3, r1, #10
 8005342:	4621      	mov	r1, r4
 8005344:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005348:	4621      	mov	r1, r4
 800534a:	028a      	lsls	r2, r1, #10
 800534c:	4610      	mov	r0, r2
 800534e:	4619      	mov	r1, r3
 8005350:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005352:	2200      	movs	r2, #0
 8005354:	61bb      	str	r3, [r7, #24]
 8005356:	61fa      	str	r2, [r7, #28]
 8005358:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800535c:	f7fb f980 	bl	8000660 <__aeabi_uldivmod>
 8005360:	4602      	mov	r2, r0
 8005362:	460b      	mov	r3, r1
 8005364:	4613      	mov	r3, r2
 8005366:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005368:	4b0b      	ldr	r3, [pc, #44]	; (8005398 <HAL_RCC_GetSysClockFreq+0x200>)
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	0c1b      	lsrs	r3, r3, #16
 800536e:	f003 0303 	and.w	r3, r3, #3
 8005372:	3301      	adds	r3, #1
 8005374:	005b      	lsls	r3, r3, #1
 8005376:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005378:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800537a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800537c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005380:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005382:	e002      	b.n	800538a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005384:	4b05      	ldr	r3, [pc, #20]	; (800539c <HAL_RCC_GetSysClockFreq+0x204>)
 8005386:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005388:	bf00      	nop
    }
  }
  return sysclockfreq;
 800538a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800538c:	4618      	mov	r0, r3
 800538e:	3750      	adds	r7, #80	; 0x50
 8005390:	46bd      	mov	sp, r7
 8005392:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005396:	bf00      	nop
 8005398:	40023800 	.word	0x40023800
 800539c:	00f42400 	.word	0x00f42400
 80053a0:	007a1200 	.word	0x007a1200

080053a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053a4:	b480      	push	{r7}
 80053a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053a8:	4b03      	ldr	r3, [pc, #12]	; (80053b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80053aa:	681b      	ldr	r3, [r3, #0]
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	20000004 	.word	0x20000004

080053bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80053c0:	f7ff fff0 	bl	80053a4 <HAL_RCC_GetHCLKFreq>
 80053c4:	4602      	mov	r2, r0
 80053c6:	4b05      	ldr	r3, [pc, #20]	; (80053dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	0a9b      	lsrs	r3, r3, #10
 80053cc:	f003 0307 	and.w	r3, r3, #7
 80053d0:	4903      	ldr	r1, [pc, #12]	; (80053e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053d2:	5ccb      	ldrb	r3, [r1, r3]
 80053d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053d8:	4618      	mov	r0, r3
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	40023800 	.word	0x40023800
 80053e0:	080075d0 	.word	0x080075d0

080053e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80053e8:	f7ff ffdc 	bl	80053a4 <HAL_RCC_GetHCLKFreq>
 80053ec:	4602      	mov	r2, r0
 80053ee:	4b05      	ldr	r3, [pc, #20]	; (8005404 <HAL_RCC_GetPCLK2Freq+0x20>)
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	0b5b      	lsrs	r3, r3, #13
 80053f4:	f003 0307 	and.w	r3, r3, #7
 80053f8:	4903      	ldr	r1, [pc, #12]	; (8005408 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053fa:	5ccb      	ldrb	r3, [r1, r3]
 80053fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005400:	4618      	mov	r0, r3
 8005402:	bd80      	pop	{r7, pc}
 8005404:	40023800 	.word	0x40023800
 8005408:	080075d0 	.word	0x080075d0

0800540c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d101      	bne.n	800541e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e041      	b.n	80054a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2b00      	cmp	r3, #0
 8005428:	d106      	bne.n	8005438 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f7fd fd62 	bl	8002efc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2202      	movs	r2, #2
 800543c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	3304      	adds	r3, #4
 8005448:	4619      	mov	r1, r3
 800544a:	4610      	mov	r0, r2
 800544c:	f000 fcae 	bl	8005dac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3708      	adds	r7, #8
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
	...

080054ac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d001      	beq.n	80054c4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e03c      	b.n	800553e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2202      	movs	r2, #2
 80054c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a1e      	ldr	r2, [pc, #120]	; (800554c <HAL_TIM_Base_Start+0xa0>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d018      	beq.n	8005508 <HAL_TIM_Base_Start+0x5c>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054de:	d013      	beq.n	8005508 <HAL_TIM_Base_Start+0x5c>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a1a      	ldr	r2, [pc, #104]	; (8005550 <HAL_TIM_Base_Start+0xa4>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d00e      	beq.n	8005508 <HAL_TIM_Base_Start+0x5c>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a19      	ldr	r2, [pc, #100]	; (8005554 <HAL_TIM_Base_Start+0xa8>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d009      	beq.n	8005508 <HAL_TIM_Base_Start+0x5c>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a17      	ldr	r2, [pc, #92]	; (8005558 <HAL_TIM_Base_Start+0xac>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d004      	beq.n	8005508 <HAL_TIM_Base_Start+0x5c>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a16      	ldr	r2, [pc, #88]	; (800555c <HAL_TIM_Base_Start+0xb0>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d111      	bne.n	800552c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f003 0307 	and.w	r3, r3, #7
 8005512:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2b06      	cmp	r3, #6
 8005518:	d010      	beq.n	800553c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f042 0201 	orr.w	r2, r2, #1
 8005528:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800552a:	e007      	b.n	800553c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f042 0201 	orr.w	r2, r2, #1
 800553a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3714      	adds	r7, #20
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	40010000 	.word	0x40010000
 8005550:	40000400 	.word	0x40000400
 8005554:	40000800 	.word	0x40000800
 8005558:	40000c00 	.word	0x40000c00
 800555c:	40014000 	.word	0x40014000

08005560 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005560:	b480      	push	{r7}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800556e:	b2db      	uxtb	r3, r3
 8005570:	2b01      	cmp	r3, #1
 8005572:	d001      	beq.n	8005578 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e044      	b.n	8005602 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2202      	movs	r2, #2
 800557c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68da      	ldr	r2, [r3, #12]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f042 0201 	orr.w	r2, r2, #1
 800558e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a1e      	ldr	r2, [pc, #120]	; (8005610 <HAL_TIM_Base_Start_IT+0xb0>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d018      	beq.n	80055cc <HAL_TIM_Base_Start_IT+0x6c>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055a2:	d013      	beq.n	80055cc <HAL_TIM_Base_Start_IT+0x6c>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a1a      	ldr	r2, [pc, #104]	; (8005614 <HAL_TIM_Base_Start_IT+0xb4>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d00e      	beq.n	80055cc <HAL_TIM_Base_Start_IT+0x6c>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a19      	ldr	r2, [pc, #100]	; (8005618 <HAL_TIM_Base_Start_IT+0xb8>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d009      	beq.n	80055cc <HAL_TIM_Base_Start_IT+0x6c>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a17      	ldr	r2, [pc, #92]	; (800561c <HAL_TIM_Base_Start_IT+0xbc>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d004      	beq.n	80055cc <HAL_TIM_Base_Start_IT+0x6c>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a16      	ldr	r2, [pc, #88]	; (8005620 <HAL_TIM_Base_Start_IT+0xc0>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d111      	bne.n	80055f0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f003 0307 	and.w	r3, r3, #7
 80055d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2b06      	cmp	r3, #6
 80055dc:	d010      	beq.n	8005600 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f042 0201 	orr.w	r2, r2, #1
 80055ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ee:	e007      	b.n	8005600 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f042 0201 	orr.w	r2, r2, #1
 80055fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3714      	adds	r7, #20
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	40010000 	.word	0x40010000
 8005614:	40000400 	.word	0x40000400
 8005618:	40000800 	.word	0x40000800
 800561c:	40000c00 	.word	0x40000c00
 8005620:	40014000 	.word	0x40014000

08005624 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d101      	bne.n	8005636 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e041      	b.n	80056ba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800563c:	b2db      	uxtb	r3, r3
 800563e:	2b00      	cmp	r3, #0
 8005640:	d106      	bne.n	8005650 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f839 	bl	80056c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2202      	movs	r2, #2
 8005654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	3304      	adds	r3, #4
 8005660:	4619      	mov	r1, r3
 8005662:	4610      	mov	r0, r2
 8005664:	f000 fba2 	bl	8005dac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3708      	adds	r7, #8
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80056c2:	b480      	push	{r7}
 80056c4:	b083      	sub	sp, #12
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80056ca:	bf00      	nop
 80056cc:	370c      	adds	r7, #12
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
	...

080056d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d109      	bne.n	80056fc <HAL_TIM_PWM_Start+0x24>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	bf14      	ite	ne
 80056f4:	2301      	movne	r3, #1
 80056f6:	2300      	moveq	r3, #0
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	e022      	b.n	8005742 <HAL_TIM_PWM_Start+0x6a>
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	2b04      	cmp	r3, #4
 8005700:	d109      	bne.n	8005716 <HAL_TIM_PWM_Start+0x3e>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b01      	cmp	r3, #1
 800570c:	bf14      	ite	ne
 800570e:	2301      	movne	r3, #1
 8005710:	2300      	moveq	r3, #0
 8005712:	b2db      	uxtb	r3, r3
 8005714:	e015      	b.n	8005742 <HAL_TIM_PWM_Start+0x6a>
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	2b08      	cmp	r3, #8
 800571a:	d109      	bne.n	8005730 <HAL_TIM_PWM_Start+0x58>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005722:	b2db      	uxtb	r3, r3
 8005724:	2b01      	cmp	r3, #1
 8005726:	bf14      	ite	ne
 8005728:	2301      	movne	r3, #1
 800572a:	2300      	moveq	r3, #0
 800572c:	b2db      	uxtb	r3, r3
 800572e:	e008      	b.n	8005742 <HAL_TIM_PWM_Start+0x6a>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005736:	b2db      	uxtb	r3, r3
 8005738:	2b01      	cmp	r3, #1
 800573a:	bf14      	ite	ne
 800573c:	2301      	movne	r3, #1
 800573e:	2300      	moveq	r3, #0
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	d001      	beq.n	800574a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e068      	b.n	800581c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d104      	bne.n	800575a <HAL_TIM_PWM_Start+0x82>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2202      	movs	r2, #2
 8005754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005758:	e013      	b.n	8005782 <HAL_TIM_PWM_Start+0xaa>
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	2b04      	cmp	r3, #4
 800575e:	d104      	bne.n	800576a <HAL_TIM_PWM_Start+0x92>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2202      	movs	r2, #2
 8005764:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005768:	e00b      	b.n	8005782 <HAL_TIM_PWM_Start+0xaa>
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	2b08      	cmp	r3, #8
 800576e:	d104      	bne.n	800577a <HAL_TIM_PWM_Start+0xa2>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2202      	movs	r2, #2
 8005774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005778:	e003      	b.n	8005782 <HAL_TIM_PWM_Start+0xaa>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2202      	movs	r2, #2
 800577e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2201      	movs	r2, #1
 8005788:	6839      	ldr	r1, [r7, #0]
 800578a:	4618      	mov	r0, r3
 800578c:	f000 fdb4 	bl	80062f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a23      	ldr	r2, [pc, #140]	; (8005824 <HAL_TIM_PWM_Start+0x14c>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d107      	bne.n	80057aa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a1d      	ldr	r2, [pc, #116]	; (8005824 <HAL_TIM_PWM_Start+0x14c>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d018      	beq.n	80057e6 <HAL_TIM_PWM_Start+0x10e>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057bc:	d013      	beq.n	80057e6 <HAL_TIM_PWM_Start+0x10e>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a19      	ldr	r2, [pc, #100]	; (8005828 <HAL_TIM_PWM_Start+0x150>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d00e      	beq.n	80057e6 <HAL_TIM_PWM_Start+0x10e>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a17      	ldr	r2, [pc, #92]	; (800582c <HAL_TIM_PWM_Start+0x154>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d009      	beq.n	80057e6 <HAL_TIM_PWM_Start+0x10e>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a16      	ldr	r2, [pc, #88]	; (8005830 <HAL_TIM_PWM_Start+0x158>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d004      	beq.n	80057e6 <HAL_TIM_PWM_Start+0x10e>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a14      	ldr	r2, [pc, #80]	; (8005834 <HAL_TIM_PWM_Start+0x15c>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d111      	bne.n	800580a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	f003 0307 	and.w	r3, r3, #7
 80057f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2b06      	cmp	r3, #6
 80057f6:	d010      	beq.n	800581a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f042 0201 	orr.w	r2, r2, #1
 8005806:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005808:	e007      	b.n	800581a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f042 0201 	orr.w	r2, r2, #1
 8005818:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3710      	adds	r7, #16
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}
 8005824:	40010000 	.word	0x40010000
 8005828:	40000400 	.word	0x40000400
 800582c:	40000800 	.word	0x40000800
 8005830:	40000c00 	.word	0x40000c00
 8005834:	40014000 	.word	0x40014000

08005838 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	f003 0302 	and.w	r3, r3, #2
 800584a:	2b02      	cmp	r3, #2
 800584c:	d122      	bne.n	8005894 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	f003 0302 	and.w	r3, r3, #2
 8005858:	2b02      	cmp	r3, #2
 800585a:	d11b      	bne.n	8005894 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f06f 0202 	mvn.w	r2, #2
 8005864:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2201      	movs	r2, #1
 800586a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	f003 0303 	and.w	r3, r3, #3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d003      	beq.n	8005882 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 fa77 	bl	8005d6e <HAL_TIM_IC_CaptureCallback>
 8005880:	e005      	b.n	800588e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 fa69 	bl	8005d5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 fa7a 	bl	8005d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	f003 0304 	and.w	r3, r3, #4
 800589e:	2b04      	cmp	r3, #4
 80058a0:	d122      	bne.n	80058e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	f003 0304 	and.w	r3, r3, #4
 80058ac:	2b04      	cmp	r3, #4
 80058ae:	d11b      	bne.n	80058e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f06f 0204 	mvn.w	r2, #4
 80058b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2202      	movs	r2, #2
 80058be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d003      	beq.n	80058d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 fa4d 	bl	8005d6e <HAL_TIM_IC_CaptureCallback>
 80058d4:	e005      	b.n	80058e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 fa3f 	bl	8005d5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 fa50 	bl	8005d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	f003 0308 	and.w	r3, r3, #8
 80058f2:	2b08      	cmp	r3, #8
 80058f4:	d122      	bne.n	800593c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	f003 0308 	and.w	r3, r3, #8
 8005900:	2b08      	cmp	r3, #8
 8005902:	d11b      	bne.n	800593c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f06f 0208 	mvn.w	r2, #8
 800590c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2204      	movs	r2, #4
 8005912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	69db      	ldr	r3, [r3, #28]
 800591a:	f003 0303 	and.w	r3, r3, #3
 800591e:	2b00      	cmp	r3, #0
 8005920:	d003      	beq.n	800592a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 fa23 	bl	8005d6e <HAL_TIM_IC_CaptureCallback>
 8005928:	e005      	b.n	8005936 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 fa15 	bl	8005d5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 fa26 	bl	8005d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	f003 0310 	and.w	r3, r3, #16
 8005946:	2b10      	cmp	r3, #16
 8005948:	d122      	bne.n	8005990 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	f003 0310 	and.w	r3, r3, #16
 8005954:	2b10      	cmp	r3, #16
 8005956:	d11b      	bne.n	8005990 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f06f 0210 	mvn.w	r2, #16
 8005960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2208      	movs	r2, #8
 8005966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	69db      	ldr	r3, [r3, #28]
 800596e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005972:	2b00      	cmp	r3, #0
 8005974:	d003      	beq.n	800597e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 f9f9 	bl	8005d6e <HAL_TIM_IC_CaptureCallback>
 800597c:	e005      	b.n	800598a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 f9eb 	bl	8005d5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 f9fc 	bl	8005d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	f003 0301 	and.w	r3, r3, #1
 800599a:	2b01      	cmp	r3, #1
 800599c:	d10e      	bne.n	80059bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	f003 0301 	and.w	r3, r3, #1
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d107      	bne.n	80059bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f06f 0201 	mvn.w	r2, #1
 80059b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f7fa fff4 	bl	80009a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059c6:	2b80      	cmp	r3, #128	; 0x80
 80059c8:	d10e      	bne.n	80059e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059d4:	2b80      	cmp	r3, #128	; 0x80
 80059d6:	d107      	bne.n	80059e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80059e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 fd26 	bl	8006434 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f2:	2b40      	cmp	r3, #64	; 0x40
 80059f4:	d10e      	bne.n	8005a14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a00:	2b40      	cmp	r3, #64	; 0x40
 8005a02:	d107      	bne.n	8005a14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 f9c1 	bl	8005d96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	f003 0320 	and.w	r3, r3, #32
 8005a1e:	2b20      	cmp	r3, #32
 8005a20:	d10e      	bne.n	8005a40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	f003 0320 	and.w	r3, r3, #32
 8005a2c:	2b20      	cmp	r3, #32
 8005a2e:	d107      	bne.n	8005a40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f06f 0220 	mvn.w	r2, #32
 8005a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 fcf0 	bl	8006420 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a40:	bf00      	nop
 8005a42:	3708      	adds	r7, #8
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b086      	sub	sp, #24
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a54:	2300      	movs	r3, #0
 8005a56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d101      	bne.n	8005a66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a62:	2302      	movs	r3, #2
 8005a64:	e0ae      	b.n	8005bc4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2b0c      	cmp	r3, #12
 8005a72:	f200 809f 	bhi.w	8005bb4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005a76:	a201      	add	r2, pc, #4	; (adr r2, 8005a7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a7c:	08005ab1 	.word	0x08005ab1
 8005a80:	08005bb5 	.word	0x08005bb5
 8005a84:	08005bb5 	.word	0x08005bb5
 8005a88:	08005bb5 	.word	0x08005bb5
 8005a8c:	08005af1 	.word	0x08005af1
 8005a90:	08005bb5 	.word	0x08005bb5
 8005a94:	08005bb5 	.word	0x08005bb5
 8005a98:	08005bb5 	.word	0x08005bb5
 8005a9c:	08005b33 	.word	0x08005b33
 8005aa0:	08005bb5 	.word	0x08005bb5
 8005aa4:	08005bb5 	.word	0x08005bb5
 8005aa8:	08005bb5 	.word	0x08005bb5
 8005aac:	08005b73 	.word	0x08005b73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68b9      	ldr	r1, [r7, #8]
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f000 f9f8 	bl	8005eac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	699a      	ldr	r2, [r3, #24]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f042 0208 	orr.w	r2, r2, #8
 8005aca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	699a      	ldr	r2, [r3, #24]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f022 0204 	bic.w	r2, r2, #4
 8005ada:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	6999      	ldr	r1, [r3, #24]
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	691a      	ldr	r2, [r3, #16]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	430a      	orrs	r2, r1
 8005aec:	619a      	str	r2, [r3, #24]
      break;
 8005aee:	e064      	b.n	8005bba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68b9      	ldr	r1, [r7, #8]
 8005af6:	4618      	mov	r0, r3
 8005af8:	f000 fa3e 	bl	8005f78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	699a      	ldr	r2, [r3, #24]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	699a      	ldr	r2, [r3, #24]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6999      	ldr	r1, [r3, #24]
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	021a      	lsls	r2, r3, #8
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	619a      	str	r2, [r3, #24]
      break;
 8005b30:	e043      	b.n	8005bba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68b9      	ldr	r1, [r7, #8]
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f000 fa89 	bl	8006050 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	69da      	ldr	r2, [r3, #28]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f042 0208 	orr.w	r2, r2, #8
 8005b4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	69da      	ldr	r2, [r3, #28]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f022 0204 	bic.w	r2, r2, #4
 8005b5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	69d9      	ldr	r1, [r3, #28]
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	691a      	ldr	r2, [r3, #16]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	430a      	orrs	r2, r1
 8005b6e:	61da      	str	r2, [r3, #28]
      break;
 8005b70:	e023      	b.n	8005bba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68b9      	ldr	r1, [r7, #8]
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f000 fad3 	bl	8006124 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	69da      	ldr	r2, [r3, #28]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	69da      	ldr	r2, [r3, #28]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	69d9      	ldr	r1, [r3, #28]
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	021a      	lsls	r2, r3, #8
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	430a      	orrs	r2, r1
 8005bb0:	61da      	str	r2, [r3, #28]
      break;
 8005bb2:	e002      	b.n	8005bba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	75fb      	strb	r3, [r7, #23]
      break;
 8005bb8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3718      	adds	r7, #24
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d101      	bne.n	8005be8 <HAL_TIM_ConfigClockSource+0x1c>
 8005be4:	2302      	movs	r3, #2
 8005be6:	e0b4      	b.n	8005d52 <HAL_TIM_ConfigClockSource+0x186>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2202      	movs	r2, #2
 8005bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68ba      	ldr	r2, [r7, #8]
 8005c16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c20:	d03e      	beq.n	8005ca0 <HAL_TIM_ConfigClockSource+0xd4>
 8005c22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c26:	f200 8087 	bhi.w	8005d38 <HAL_TIM_ConfigClockSource+0x16c>
 8005c2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c2e:	f000 8086 	beq.w	8005d3e <HAL_TIM_ConfigClockSource+0x172>
 8005c32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c36:	d87f      	bhi.n	8005d38 <HAL_TIM_ConfigClockSource+0x16c>
 8005c38:	2b70      	cmp	r3, #112	; 0x70
 8005c3a:	d01a      	beq.n	8005c72 <HAL_TIM_ConfigClockSource+0xa6>
 8005c3c:	2b70      	cmp	r3, #112	; 0x70
 8005c3e:	d87b      	bhi.n	8005d38 <HAL_TIM_ConfigClockSource+0x16c>
 8005c40:	2b60      	cmp	r3, #96	; 0x60
 8005c42:	d050      	beq.n	8005ce6 <HAL_TIM_ConfigClockSource+0x11a>
 8005c44:	2b60      	cmp	r3, #96	; 0x60
 8005c46:	d877      	bhi.n	8005d38 <HAL_TIM_ConfigClockSource+0x16c>
 8005c48:	2b50      	cmp	r3, #80	; 0x50
 8005c4a:	d03c      	beq.n	8005cc6 <HAL_TIM_ConfigClockSource+0xfa>
 8005c4c:	2b50      	cmp	r3, #80	; 0x50
 8005c4e:	d873      	bhi.n	8005d38 <HAL_TIM_ConfigClockSource+0x16c>
 8005c50:	2b40      	cmp	r3, #64	; 0x40
 8005c52:	d058      	beq.n	8005d06 <HAL_TIM_ConfigClockSource+0x13a>
 8005c54:	2b40      	cmp	r3, #64	; 0x40
 8005c56:	d86f      	bhi.n	8005d38 <HAL_TIM_ConfigClockSource+0x16c>
 8005c58:	2b30      	cmp	r3, #48	; 0x30
 8005c5a:	d064      	beq.n	8005d26 <HAL_TIM_ConfigClockSource+0x15a>
 8005c5c:	2b30      	cmp	r3, #48	; 0x30
 8005c5e:	d86b      	bhi.n	8005d38 <HAL_TIM_ConfigClockSource+0x16c>
 8005c60:	2b20      	cmp	r3, #32
 8005c62:	d060      	beq.n	8005d26 <HAL_TIM_ConfigClockSource+0x15a>
 8005c64:	2b20      	cmp	r3, #32
 8005c66:	d867      	bhi.n	8005d38 <HAL_TIM_ConfigClockSource+0x16c>
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d05c      	beq.n	8005d26 <HAL_TIM_ConfigClockSource+0x15a>
 8005c6c:	2b10      	cmp	r3, #16
 8005c6e:	d05a      	beq.n	8005d26 <HAL_TIM_ConfigClockSource+0x15a>
 8005c70:	e062      	b.n	8005d38 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6818      	ldr	r0, [r3, #0]
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	6899      	ldr	r1, [r3, #8]
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	685a      	ldr	r2, [r3, #4]
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	f000 fb19 	bl	80062b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68ba      	ldr	r2, [r7, #8]
 8005c9c:	609a      	str	r2, [r3, #8]
      break;
 8005c9e:	e04f      	b.n	8005d40 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6818      	ldr	r0, [r3, #0]
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	6899      	ldr	r1, [r3, #8]
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	685a      	ldr	r2, [r3, #4]
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	f000 fb02 	bl	80062b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	689a      	ldr	r2, [r3, #8]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cc2:	609a      	str	r2, [r3, #8]
      break;
 8005cc4:	e03c      	b.n	8005d40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6818      	ldr	r0, [r3, #0]
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	6859      	ldr	r1, [r3, #4]
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	f000 fa76 	bl	80061c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2150      	movs	r1, #80	; 0x50
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f000 facf 	bl	8006282 <TIM_ITRx_SetConfig>
      break;
 8005ce4:	e02c      	b.n	8005d40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6818      	ldr	r0, [r3, #0]
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	6859      	ldr	r1, [r3, #4]
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	f000 fa95 	bl	8006222 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2160      	movs	r1, #96	; 0x60
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f000 fabf 	bl	8006282 <TIM_ITRx_SetConfig>
      break;
 8005d04:	e01c      	b.n	8005d40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6818      	ldr	r0, [r3, #0]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	6859      	ldr	r1, [r3, #4]
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	461a      	mov	r2, r3
 8005d14:	f000 fa56 	bl	80061c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2140      	movs	r1, #64	; 0x40
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f000 faaf 	bl	8006282 <TIM_ITRx_SetConfig>
      break;
 8005d24:	e00c      	b.n	8005d40 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4619      	mov	r1, r3
 8005d30:	4610      	mov	r0, r2
 8005d32:	f000 faa6 	bl	8006282 <TIM_ITRx_SetConfig>
      break;
 8005d36:	e003      	b.n	8005d40 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8005d3c:	e000      	b.n	8005d40 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b083      	sub	sp, #12
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d62:	bf00      	nop
 8005d64:	370c      	adds	r7, #12
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr

08005d6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d6e:	b480      	push	{r7}
 8005d70:	b083      	sub	sp, #12
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d76:	bf00      	nop
 8005d78:	370c      	adds	r7, #12
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr

08005d82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d82:	b480      	push	{r7}
 8005d84:	b083      	sub	sp, #12
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d8a:	bf00      	nop
 8005d8c:	370c      	adds	r7, #12
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr

08005d96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d96:	b480      	push	{r7}
 8005d98:	b083      	sub	sp, #12
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d9e:	bf00      	nop
 8005da0:	370c      	adds	r7, #12
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
	...

08005dac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b085      	sub	sp, #20
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a34      	ldr	r2, [pc, #208]	; (8005e90 <TIM_Base_SetConfig+0xe4>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d00f      	beq.n	8005de4 <TIM_Base_SetConfig+0x38>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dca:	d00b      	beq.n	8005de4 <TIM_Base_SetConfig+0x38>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a31      	ldr	r2, [pc, #196]	; (8005e94 <TIM_Base_SetConfig+0xe8>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d007      	beq.n	8005de4 <TIM_Base_SetConfig+0x38>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a30      	ldr	r2, [pc, #192]	; (8005e98 <TIM_Base_SetConfig+0xec>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d003      	beq.n	8005de4 <TIM_Base_SetConfig+0x38>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a2f      	ldr	r2, [pc, #188]	; (8005e9c <TIM_Base_SetConfig+0xf0>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d108      	bne.n	8005df6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a25      	ldr	r2, [pc, #148]	; (8005e90 <TIM_Base_SetConfig+0xe4>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d01b      	beq.n	8005e36 <TIM_Base_SetConfig+0x8a>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e04:	d017      	beq.n	8005e36 <TIM_Base_SetConfig+0x8a>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a22      	ldr	r2, [pc, #136]	; (8005e94 <TIM_Base_SetConfig+0xe8>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d013      	beq.n	8005e36 <TIM_Base_SetConfig+0x8a>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a21      	ldr	r2, [pc, #132]	; (8005e98 <TIM_Base_SetConfig+0xec>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d00f      	beq.n	8005e36 <TIM_Base_SetConfig+0x8a>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a20      	ldr	r2, [pc, #128]	; (8005e9c <TIM_Base_SetConfig+0xf0>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d00b      	beq.n	8005e36 <TIM_Base_SetConfig+0x8a>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a1f      	ldr	r2, [pc, #124]	; (8005ea0 <TIM_Base_SetConfig+0xf4>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d007      	beq.n	8005e36 <TIM_Base_SetConfig+0x8a>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a1e      	ldr	r2, [pc, #120]	; (8005ea4 <TIM_Base_SetConfig+0xf8>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d003      	beq.n	8005e36 <TIM_Base_SetConfig+0x8a>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a1d      	ldr	r2, [pc, #116]	; (8005ea8 <TIM_Base_SetConfig+0xfc>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d108      	bne.n	8005e48 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	689a      	ldr	r2, [r3, #8]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a08      	ldr	r2, [pc, #32]	; (8005e90 <TIM_Base_SetConfig+0xe4>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d103      	bne.n	8005e7c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	691a      	ldr	r2, [r3, #16]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	615a      	str	r2, [r3, #20]
}
 8005e82:	bf00      	nop
 8005e84:	3714      	adds	r7, #20
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	40010000 	.word	0x40010000
 8005e94:	40000400 	.word	0x40000400
 8005e98:	40000800 	.word	0x40000800
 8005e9c:	40000c00 	.word	0x40000c00
 8005ea0:	40014000 	.word	0x40014000
 8005ea4:	40014400 	.word	0x40014400
 8005ea8:	40014800 	.word	0x40014800

08005eac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b087      	sub	sp, #28
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a1b      	ldr	r3, [r3, #32]
 8005eba:	f023 0201 	bic.w	r2, r3, #1
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a1b      	ldr	r3, [r3, #32]
 8005ec6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	699b      	ldr	r3, [r3, #24]
 8005ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f023 0303 	bic.w	r3, r3, #3
 8005ee2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	f023 0302 	bic.w	r3, r3, #2
 8005ef4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	697a      	ldr	r2, [r7, #20]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a1c      	ldr	r2, [pc, #112]	; (8005f74 <TIM_OC1_SetConfig+0xc8>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d10c      	bne.n	8005f22 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	f023 0308 	bic.w	r3, r3, #8
 8005f0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	697a      	ldr	r2, [r7, #20]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	f023 0304 	bic.w	r3, r3, #4
 8005f20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a13      	ldr	r2, [pc, #76]	; (8005f74 <TIM_OC1_SetConfig+0xc8>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d111      	bne.n	8005f4e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	693a      	ldr	r2, [r7, #16]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	699b      	ldr	r3, [r3, #24]
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	693a      	ldr	r2, [r7, #16]
 8005f52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	685a      	ldr	r2, [r3, #4]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	697a      	ldr	r2, [r7, #20]
 8005f66:	621a      	str	r2, [r3, #32]
}
 8005f68:	bf00      	nop
 8005f6a:	371c      	adds	r7, #28
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr
 8005f74:	40010000 	.word	0x40010000

08005f78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b087      	sub	sp, #28
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a1b      	ldr	r3, [r3, #32]
 8005f86:	f023 0210 	bic.w	r2, r3, #16
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a1b      	ldr	r3, [r3, #32]
 8005f92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	021b      	lsls	r3, r3, #8
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	f023 0320 	bic.w	r3, r3, #32
 8005fc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	011b      	lsls	r3, r3, #4
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a1e      	ldr	r2, [pc, #120]	; (800604c <TIM_OC2_SetConfig+0xd4>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d10d      	bne.n	8005ff4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	011b      	lsls	r3, r3, #4
 8005fe6:	697a      	ldr	r2, [r7, #20]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ff2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4a15      	ldr	r2, [pc, #84]	; (800604c <TIM_OC2_SetConfig+0xd4>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d113      	bne.n	8006024 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006002:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800600a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	695b      	ldr	r3, [r3, #20]
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	693a      	ldr	r2, [r7, #16]
 8006014:	4313      	orrs	r3, r2
 8006016:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	699b      	ldr	r3, [r3, #24]
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	693a      	ldr	r2, [r7, #16]
 8006020:	4313      	orrs	r3, r2
 8006022:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	693a      	ldr	r2, [r7, #16]
 8006028:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	685a      	ldr	r2, [r3, #4]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	697a      	ldr	r2, [r7, #20]
 800603c:	621a      	str	r2, [r3, #32]
}
 800603e:	bf00      	nop
 8006040:	371c      	adds	r7, #28
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	40010000 	.word	0x40010000

08006050 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006050:	b480      	push	{r7}
 8006052:	b087      	sub	sp, #28
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a1b      	ldr	r3, [r3, #32]
 800606a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	69db      	ldr	r3, [r3, #28]
 8006076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800607e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f023 0303 	bic.w	r3, r3, #3
 8006086:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	4313      	orrs	r3, r2
 8006090:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006098:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	021b      	lsls	r3, r3, #8
 80060a0:	697a      	ldr	r2, [r7, #20]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a1d      	ldr	r2, [pc, #116]	; (8006120 <TIM_OC3_SetConfig+0xd0>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d10d      	bne.n	80060ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	021b      	lsls	r3, r3, #8
 80060bc:	697a      	ldr	r2, [r7, #20]
 80060be:	4313      	orrs	r3, r2
 80060c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a14      	ldr	r2, [pc, #80]	; (8006120 <TIM_OC3_SetConfig+0xd0>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d113      	bne.n	80060fa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	695b      	ldr	r3, [r3, #20]
 80060e6:	011b      	lsls	r3, r3, #4
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	699b      	ldr	r3, [r3, #24]
 80060f2:	011b      	lsls	r3, r3, #4
 80060f4:	693a      	ldr	r2, [r7, #16]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	693a      	ldr	r2, [r7, #16]
 80060fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	685a      	ldr	r2, [r3, #4]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	697a      	ldr	r2, [r7, #20]
 8006112:	621a      	str	r2, [r3, #32]
}
 8006114:	bf00      	nop
 8006116:	371c      	adds	r7, #28
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr
 8006120:	40010000 	.word	0x40010000

08006124 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006124:	b480      	push	{r7}
 8006126:	b087      	sub	sp, #28
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a1b      	ldr	r3, [r3, #32]
 8006132:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a1b      	ldr	r3, [r3, #32]
 800613e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	69db      	ldr	r3, [r3, #28]
 800614a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800615a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	021b      	lsls	r3, r3, #8
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	4313      	orrs	r3, r2
 8006166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800616e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	031b      	lsls	r3, r3, #12
 8006176:	693a      	ldr	r2, [r7, #16]
 8006178:	4313      	orrs	r3, r2
 800617a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a10      	ldr	r2, [pc, #64]	; (80061c0 <TIM_OC4_SetConfig+0x9c>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d109      	bne.n	8006198 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800618a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	695b      	ldr	r3, [r3, #20]
 8006190:	019b      	lsls	r3, r3, #6
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	4313      	orrs	r3, r2
 8006196:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	685a      	ldr	r2, [r3, #4]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	693a      	ldr	r2, [r7, #16]
 80061b0:	621a      	str	r2, [r3, #32]
}
 80061b2:	bf00      	nop
 80061b4:	371c      	adds	r7, #28
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop
 80061c0:	40010000 	.word	0x40010000

080061c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b087      	sub	sp, #28
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6a1b      	ldr	r3, [r3, #32]
 80061d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6a1b      	ldr	r3, [r3, #32]
 80061da:	f023 0201 	bic.w	r2, r3, #1
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	011b      	lsls	r3, r3, #4
 80061f4:	693a      	ldr	r2, [r7, #16]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	f023 030a 	bic.w	r3, r3, #10
 8006200:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006202:	697a      	ldr	r2, [r7, #20]
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	4313      	orrs	r3, r2
 8006208:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	693a      	ldr	r2, [r7, #16]
 800620e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	697a      	ldr	r2, [r7, #20]
 8006214:	621a      	str	r2, [r3, #32]
}
 8006216:	bf00      	nop
 8006218:	371c      	adds	r7, #28
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr

08006222 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006222:	b480      	push	{r7}
 8006224:	b087      	sub	sp, #28
 8006226:	af00      	add	r7, sp, #0
 8006228:	60f8      	str	r0, [r7, #12]
 800622a:	60b9      	str	r1, [r7, #8]
 800622c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6a1b      	ldr	r3, [r3, #32]
 8006232:	f023 0210 	bic.w	r2, r3, #16
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6a1b      	ldr	r3, [r3, #32]
 8006244:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800624c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	031b      	lsls	r3, r3, #12
 8006252:	697a      	ldr	r2, [r7, #20]
 8006254:	4313      	orrs	r3, r2
 8006256:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800625e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	011b      	lsls	r3, r3, #4
 8006264:	693a      	ldr	r2, [r7, #16]
 8006266:	4313      	orrs	r3, r2
 8006268:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	697a      	ldr	r2, [r7, #20]
 800626e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	693a      	ldr	r2, [r7, #16]
 8006274:	621a      	str	r2, [r3, #32]
}
 8006276:	bf00      	nop
 8006278:	371c      	adds	r7, #28
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr

08006282 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006282:	b480      	push	{r7}
 8006284:	b085      	sub	sp, #20
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
 800628a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006298:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800629a:	683a      	ldr	r2, [r7, #0]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	4313      	orrs	r3, r2
 80062a0:	f043 0307 	orr.w	r3, r3, #7
 80062a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	609a      	str	r2, [r3, #8]
}
 80062ac:	bf00      	nop
 80062ae:	3714      	adds	r7, #20
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b087      	sub	sp, #28
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	607a      	str	r2, [r7, #4]
 80062c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	021a      	lsls	r2, r3, #8
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	431a      	orrs	r2, r3
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	4313      	orrs	r3, r2
 80062e0:	697a      	ldr	r2, [r7, #20]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	697a      	ldr	r2, [r7, #20]
 80062ea:	609a      	str	r2, [r3, #8]
}
 80062ec:	bf00      	nop
 80062ee:	371c      	adds	r7, #28
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b087      	sub	sp, #28
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	f003 031f 	and.w	r3, r3, #31
 800630a:	2201      	movs	r2, #1
 800630c:	fa02 f303 	lsl.w	r3, r2, r3
 8006310:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6a1a      	ldr	r2, [r3, #32]
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	43db      	mvns	r3, r3
 800631a:	401a      	ands	r2, r3
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6a1a      	ldr	r2, [r3, #32]
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	f003 031f 	and.w	r3, r3, #31
 800632a:	6879      	ldr	r1, [r7, #4]
 800632c:	fa01 f303 	lsl.w	r3, r1, r3
 8006330:	431a      	orrs	r2, r3
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	621a      	str	r2, [r3, #32]
}
 8006336:	bf00      	nop
 8006338:	371c      	adds	r7, #28
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
	...

08006344 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006344:	b480      	push	{r7}
 8006346:	b085      	sub	sp, #20
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006354:	2b01      	cmp	r3, #1
 8006356:	d101      	bne.n	800635c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006358:	2302      	movs	r3, #2
 800635a:	e050      	b.n	80063fe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2202      	movs	r2, #2
 8006368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006382:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	4313      	orrs	r3, r2
 800638c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a1c      	ldr	r2, [pc, #112]	; (800640c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d018      	beq.n	80063d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063a8:	d013      	beq.n	80063d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a18      	ldr	r2, [pc, #96]	; (8006410 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d00e      	beq.n	80063d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a16      	ldr	r2, [pc, #88]	; (8006414 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d009      	beq.n	80063d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a15      	ldr	r2, [pc, #84]	; (8006418 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d004      	beq.n	80063d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a13      	ldr	r2, [pc, #76]	; (800641c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d10c      	bne.n	80063ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	68ba      	ldr	r2, [r7, #8]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	68ba      	ldr	r2, [r7, #8]
 80063ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3714      	adds	r7, #20
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr
 800640a:	bf00      	nop
 800640c:	40010000 	.word	0x40010000
 8006410:	40000400 	.word	0x40000400
 8006414:	40000800 	.word	0x40000800
 8006418:	40000c00 	.word	0x40000c00
 800641c:	40014000 	.word	0x40014000

08006420 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006428:	bf00      	nop
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800643c:	bf00      	nop
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d101      	bne.n	800645a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e03f      	b.n	80064da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006460:	b2db      	uxtb	r3, r3
 8006462:	2b00      	cmp	r3, #0
 8006464:	d106      	bne.n	8006474 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f7fc fdc4 	bl	8002ffc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2224      	movs	r2, #36	; 0x24
 8006478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68da      	ldr	r2, [r3, #12]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800648a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 fcdf 	bl	8006e50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	691a      	ldr	r2, [r3, #16]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	695a      	ldr	r2, [r3, #20]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68da      	ldr	r2, [r3, #12]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2220      	movs	r2, #32
 80064cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2220      	movs	r2, #32
 80064d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3708      	adds	r7, #8
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}

080064e2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064e2:	b580      	push	{r7, lr}
 80064e4:	b084      	sub	sp, #16
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	60f8      	str	r0, [r7, #12]
 80064ea:	60b9      	str	r1, [r7, #8]
 80064ec:	4613      	mov	r3, r2
 80064ee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	2b20      	cmp	r3, #32
 80064fa:	d11d      	bne.n	8006538 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d002      	beq.n	8006508 <HAL_UART_Receive_IT+0x26>
 8006502:	88fb      	ldrh	r3, [r7, #6]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d101      	bne.n	800650c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e016      	b.n	800653a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006512:	2b01      	cmp	r3, #1
 8006514:	d101      	bne.n	800651a <HAL_UART_Receive_IT+0x38>
 8006516:	2302      	movs	r3, #2
 8006518:	e00f      	b.n	800653a <HAL_UART_Receive_IT+0x58>
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2201      	movs	r2, #1
 800651e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2200      	movs	r2, #0
 8006526:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006528:	88fb      	ldrh	r3, [r7, #6]
 800652a:	461a      	mov	r2, r3
 800652c:	68b9      	ldr	r1, [r7, #8]
 800652e:	68f8      	ldr	r0, [r7, #12]
 8006530:	f000 fab6 	bl	8006aa0 <UART_Start_Receive_IT>
 8006534:	4603      	mov	r3, r0
 8006536:	e000      	b.n	800653a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006538:	2302      	movs	r3, #2
  }
}
 800653a:	4618      	mov	r0, r3
 800653c:	3710      	adds	r7, #16
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
	...

08006544 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b0ba      	sub	sp, #232	; 0xe8
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	695b      	ldr	r3, [r3, #20]
 8006566:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800656a:	2300      	movs	r3, #0
 800656c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006570:	2300      	movs	r3, #0
 8006572:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800657a:	f003 030f 	and.w	r3, r3, #15
 800657e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006582:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006586:	2b00      	cmp	r3, #0
 8006588:	d10f      	bne.n	80065aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800658a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800658e:	f003 0320 	and.w	r3, r3, #32
 8006592:	2b00      	cmp	r3, #0
 8006594:	d009      	beq.n	80065aa <HAL_UART_IRQHandler+0x66>
 8006596:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800659a:	f003 0320 	and.w	r3, r3, #32
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d003      	beq.n	80065aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 fb99 	bl	8006cda <UART_Receive_IT>
      return;
 80065a8:	e256      	b.n	8006a58 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80065aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	f000 80de 	beq.w	8006770 <HAL_UART_IRQHandler+0x22c>
 80065b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065b8:	f003 0301 	and.w	r3, r3, #1
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d106      	bne.n	80065ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80065c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065c4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	f000 80d1 	beq.w	8006770 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80065ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065d2:	f003 0301 	and.w	r3, r3, #1
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00b      	beq.n	80065f2 <HAL_UART_IRQHandler+0xae>
 80065da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d005      	beq.n	80065f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ea:	f043 0201 	orr.w	r2, r3, #1
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065f6:	f003 0304 	and.w	r3, r3, #4
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00b      	beq.n	8006616 <HAL_UART_IRQHandler+0xd2>
 80065fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006602:	f003 0301 	and.w	r3, r3, #1
 8006606:	2b00      	cmp	r3, #0
 8006608:	d005      	beq.n	8006616 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660e:	f043 0202 	orr.w	r2, r3, #2
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800661a:	f003 0302 	and.w	r3, r3, #2
 800661e:	2b00      	cmp	r3, #0
 8006620:	d00b      	beq.n	800663a <HAL_UART_IRQHandler+0xf6>
 8006622:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006626:	f003 0301 	and.w	r3, r3, #1
 800662a:	2b00      	cmp	r3, #0
 800662c:	d005      	beq.n	800663a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006632:	f043 0204 	orr.w	r2, r3, #4
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800663a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800663e:	f003 0308 	and.w	r3, r3, #8
 8006642:	2b00      	cmp	r3, #0
 8006644:	d011      	beq.n	800666a <HAL_UART_IRQHandler+0x126>
 8006646:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800664a:	f003 0320 	and.w	r3, r3, #32
 800664e:	2b00      	cmp	r3, #0
 8006650:	d105      	bne.n	800665e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006652:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006656:	f003 0301 	and.w	r3, r3, #1
 800665a:	2b00      	cmp	r3, #0
 800665c:	d005      	beq.n	800666a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006662:	f043 0208 	orr.w	r2, r3, #8
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666e:	2b00      	cmp	r3, #0
 8006670:	f000 81ed 	beq.w	8006a4e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006678:	f003 0320 	and.w	r3, r3, #32
 800667c:	2b00      	cmp	r3, #0
 800667e:	d008      	beq.n	8006692 <HAL_UART_IRQHandler+0x14e>
 8006680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006684:	f003 0320 	and.w	r3, r3, #32
 8006688:	2b00      	cmp	r3, #0
 800668a:	d002      	beq.n	8006692 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 fb24 	bl	8006cda <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	695b      	ldr	r3, [r3, #20]
 8006698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800669c:	2b40      	cmp	r3, #64	; 0x40
 800669e:	bf0c      	ite	eq
 80066a0:	2301      	moveq	r3, #1
 80066a2:	2300      	movne	r3, #0
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ae:	f003 0308 	and.w	r3, r3, #8
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d103      	bne.n	80066be <HAL_UART_IRQHandler+0x17a>
 80066b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d04f      	beq.n	800675e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 fa2c 	bl	8006b1c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	695b      	ldr	r3, [r3, #20]
 80066ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ce:	2b40      	cmp	r3, #64	; 0x40
 80066d0:	d141      	bne.n	8006756 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	3314      	adds	r3, #20
 80066d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80066e0:	e853 3f00 	ldrex	r3, [r3]
 80066e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80066e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80066ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	3314      	adds	r3, #20
 80066fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80066fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006702:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006706:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800670a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800670e:	e841 2300 	strex	r3, r2, [r1]
 8006712:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006716:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d1d9      	bne.n	80066d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006722:	2b00      	cmp	r3, #0
 8006724:	d013      	beq.n	800674e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800672a:	4a7d      	ldr	r2, [pc, #500]	; (8006920 <HAL_UART_IRQHandler+0x3dc>)
 800672c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006732:	4618      	mov	r0, r3
 8006734:	f7fd fd8e 	bl	8004254 <HAL_DMA_Abort_IT>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d016      	beq.n	800676c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006748:	4610      	mov	r0, r2
 800674a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800674c:	e00e      	b.n	800676c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 f990 	bl	8006a74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006754:	e00a      	b.n	800676c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 f98c 	bl	8006a74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800675c:	e006      	b.n	800676c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 f988 	bl	8006a74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800676a:	e170      	b.n	8006a4e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800676c:	bf00      	nop
    return;
 800676e:	e16e      	b.n	8006a4e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006774:	2b01      	cmp	r3, #1
 8006776:	f040 814a 	bne.w	8006a0e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800677a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800677e:	f003 0310 	and.w	r3, r3, #16
 8006782:	2b00      	cmp	r3, #0
 8006784:	f000 8143 	beq.w	8006a0e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800678c:	f003 0310 	and.w	r3, r3, #16
 8006790:	2b00      	cmp	r3, #0
 8006792:	f000 813c 	beq.w	8006a0e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006796:	2300      	movs	r3, #0
 8006798:	60bb      	str	r3, [r7, #8]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	60bb      	str	r3, [r7, #8]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	60bb      	str	r3, [r7, #8]
 80067aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	695b      	ldr	r3, [r3, #20]
 80067b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067b6:	2b40      	cmp	r3, #64	; 0x40
 80067b8:	f040 80b4 	bne.w	8006924 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80067c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	f000 8140 	beq.w	8006a52 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80067d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80067da:	429a      	cmp	r2, r3
 80067dc:	f080 8139 	bcs.w	8006a52 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80067e6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ec:	69db      	ldr	r3, [r3, #28]
 80067ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067f2:	f000 8088 	beq.w	8006906 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	330c      	adds	r3, #12
 80067fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006800:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006804:	e853 3f00 	ldrex	r3, [r3]
 8006808:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800680c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006810:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006814:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	330c      	adds	r3, #12
 800681e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006822:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006826:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800682e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006832:	e841 2300 	strex	r3, r2, [r1]
 8006836:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800683a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800683e:	2b00      	cmp	r3, #0
 8006840:	d1d9      	bne.n	80067f6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	3314      	adds	r3, #20
 8006848:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800684c:	e853 3f00 	ldrex	r3, [r3]
 8006850:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006852:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006854:	f023 0301 	bic.w	r3, r3, #1
 8006858:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	3314      	adds	r3, #20
 8006862:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006866:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800686a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800686c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800686e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006872:	e841 2300 	strex	r3, r2, [r1]
 8006876:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006878:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800687a:	2b00      	cmp	r3, #0
 800687c:	d1e1      	bne.n	8006842 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	3314      	adds	r3, #20
 8006884:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006886:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006888:	e853 3f00 	ldrex	r3, [r3]
 800688c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800688e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006890:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006894:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	3314      	adds	r3, #20
 800689e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80068a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80068a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80068a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80068aa:	e841 2300 	strex	r3, r2, [r1]
 80068ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80068b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d1e3      	bne.n	800687e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2220      	movs	r2, #32
 80068ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	330c      	adds	r3, #12
 80068ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068ce:	e853 3f00 	ldrex	r3, [r3]
 80068d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80068d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068d6:	f023 0310 	bic.w	r3, r3, #16
 80068da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	330c      	adds	r3, #12
 80068e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80068e8:	65ba      	str	r2, [r7, #88]	; 0x58
 80068ea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80068ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80068f0:	e841 2300 	strex	r3, r2, [r1]
 80068f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80068f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d1e3      	bne.n	80068c4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006900:	4618      	mov	r0, r3
 8006902:	f7fd fc37 	bl	8004174 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800690e:	b29b      	uxth	r3, r3
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	b29b      	uxth	r3, r3
 8006914:	4619      	mov	r1, r3
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 f8b6 	bl	8006a88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800691c:	e099      	b.n	8006a52 <HAL_UART_IRQHandler+0x50e>
 800691e:	bf00      	nop
 8006920:	08006be3 	.word	0x08006be3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800692c:	b29b      	uxth	r3, r3
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006938:	b29b      	uxth	r3, r3
 800693a:	2b00      	cmp	r3, #0
 800693c:	f000 808b 	beq.w	8006a56 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006940:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006944:	2b00      	cmp	r3, #0
 8006946:	f000 8086 	beq.w	8006a56 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	330c      	adds	r3, #12
 8006950:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006954:	e853 3f00 	ldrex	r3, [r3]
 8006958:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800695a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800695c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006960:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	330c      	adds	r3, #12
 800696a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800696e:	647a      	str	r2, [r7, #68]	; 0x44
 8006970:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006972:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006974:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006976:	e841 2300 	strex	r3, r2, [r1]
 800697a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800697c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800697e:	2b00      	cmp	r3, #0
 8006980:	d1e3      	bne.n	800694a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	3314      	adds	r3, #20
 8006988:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698c:	e853 3f00 	ldrex	r3, [r3]
 8006990:	623b      	str	r3, [r7, #32]
   return(result);
 8006992:	6a3b      	ldr	r3, [r7, #32]
 8006994:	f023 0301 	bic.w	r3, r3, #1
 8006998:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	3314      	adds	r3, #20
 80069a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80069a6:	633a      	str	r2, [r7, #48]	; 0x30
 80069a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069ae:	e841 2300 	strex	r3, r2, [r1]
 80069b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80069b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d1e3      	bne.n	8006982 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2220      	movs	r2, #32
 80069be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	330c      	adds	r3, #12
 80069ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	e853 3f00 	ldrex	r3, [r3]
 80069d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f023 0310 	bic.w	r3, r3, #16
 80069de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	330c      	adds	r3, #12
 80069e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80069ec:	61fa      	str	r2, [r7, #28]
 80069ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f0:	69b9      	ldr	r1, [r7, #24]
 80069f2:	69fa      	ldr	r2, [r7, #28]
 80069f4:	e841 2300 	strex	r3, r2, [r1]
 80069f8:	617b      	str	r3, [r7, #20]
   return(result);
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d1e3      	bne.n	80069c8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a04:	4619      	mov	r1, r3
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 f83e 	bl	8006a88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a0c:	e023      	b.n	8006a56 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d009      	beq.n	8006a2e <HAL_UART_IRQHandler+0x4ea>
 8006a1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d003      	beq.n	8006a2e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 f8ef 	bl	8006c0a <UART_Transmit_IT>
    return;
 8006a2c:	e014      	b.n	8006a58 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d00e      	beq.n	8006a58 <HAL_UART_IRQHandler+0x514>
 8006a3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d008      	beq.n	8006a58 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 f92f 	bl	8006caa <UART_EndTransmit_IT>
    return;
 8006a4c:	e004      	b.n	8006a58 <HAL_UART_IRQHandler+0x514>
    return;
 8006a4e:	bf00      	nop
 8006a50:	e002      	b.n	8006a58 <HAL_UART_IRQHandler+0x514>
      return;
 8006a52:	bf00      	nop
 8006a54:	e000      	b.n	8006a58 <HAL_UART_IRQHandler+0x514>
      return;
 8006a56:	bf00      	nop
  }
}
 8006a58:	37e8      	adds	r7, #232	; 0xe8
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	bf00      	nop

08006a60 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006a68:	bf00      	nop
 8006a6a:	370c      	adds	r7, #12
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006a7c:	bf00      	nop
 8006a7e:	370c      	adds	r7, #12
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	460b      	mov	r3, r1
 8006a92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a94:	bf00      	nop
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b085      	sub	sp, #20
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	4613      	mov	r3, r2
 8006aac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	68ba      	ldr	r2, [r7, #8]
 8006ab2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	88fa      	ldrh	r2, [r7, #6]
 8006ab8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	88fa      	ldrh	r2, [r7, #6]
 8006abe:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2222      	movs	r2, #34	; 0x22
 8006aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d007      	beq.n	8006aee <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	68da      	ldr	r2, [r3, #12]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006aec:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	695a      	ldr	r2, [r3, #20]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f042 0201 	orr.w	r2, r2, #1
 8006afc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68da      	ldr	r2, [r3, #12]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f042 0220 	orr.w	r2, r2, #32
 8006b0c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006b0e:	2300      	movs	r3, #0
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3714      	adds	r7, #20
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b095      	sub	sp, #84	; 0x54
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	330c      	adds	r3, #12
 8006b2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b2e:	e853 3f00 	ldrex	r3, [r3]
 8006b32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	330c      	adds	r3, #12
 8006b42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b44:	643a      	str	r2, [r7, #64]	; 0x40
 8006b46:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b4c:	e841 2300 	strex	r3, r2, [r1]
 8006b50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d1e5      	bne.n	8006b24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	3314      	adds	r3, #20
 8006b5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b60:	6a3b      	ldr	r3, [r7, #32]
 8006b62:	e853 3f00 	ldrex	r3, [r3]
 8006b66:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	f023 0301 	bic.w	r3, r3, #1
 8006b6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	3314      	adds	r3, #20
 8006b76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b80:	e841 2300 	strex	r3, r2, [r1]
 8006b84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1e5      	bne.n	8006b58 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d119      	bne.n	8006bc8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	330c      	adds	r3, #12
 8006b9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	e853 3f00 	ldrex	r3, [r3]
 8006ba2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	f023 0310 	bic.w	r3, r3, #16
 8006baa:	647b      	str	r3, [r7, #68]	; 0x44
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	330c      	adds	r3, #12
 8006bb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bb4:	61ba      	str	r2, [r7, #24]
 8006bb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb8:	6979      	ldr	r1, [r7, #20]
 8006bba:	69ba      	ldr	r2, [r7, #24]
 8006bbc:	e841 2300 	strex	r3, r2, [r1]
 8006bc0:	613b      	str	r3, [r7, #16]
   return(result);
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d1e5      	bne.n	8006b94 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2220      	movs	r2, #32
 8006bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006bd6:	bf00      	nop
 8006bd8:	3754      	adds	r7, #84	; 0x54
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr

08006be2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b084      	sub	sp, #16
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006bfc:	68f8      	ldr	r0, [r7, #12]
 8006bfe:	f7ff ff39 	bl	8006a74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c02:	bf00      	nop
 8006c04:	3710      	adds	r7, #16
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006c0a:	b480      	push	{r7}
 8006c0c:	b085      	sub	sp, #20
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	2b21      	cmp	r3, #33	; 0x21
 8006c1c:	d13e      	bne.n	8006c9c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c26:	d114      	bne.n	8006c52 <UART_Transmit_IT+0x48>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	691b      	ldr	r3, [r3, #16]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d110      	bne.n	8006c52 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6a1b      	ldr	r3, [r3, #32]
 8006c34:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	881b      	ldrh	r3, [r3, #0]
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c44:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6a1b      	ldr	r3, [r3, #32]
 8006c4a:	1c9a      	adds	r2, r3, #2
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	621a      	str	r2, [r3, #32]
 8006c50:	e008      	b.n	8006c64 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a1b      	ldr	r3, [r3, #32]
 8006c56:	1c59      	adds	r1, r3, #1
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	6211      	str	r1, [r2, #32]
 8006c5c:	781a      	ldrb	r2, [r3, #0]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	4619      	mov	r1, r3
 8006c72:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d10f      	bne.n	8006c98 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68da      	ldr	r2, [r3, #12]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c86:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	68da      	ldr	r2, [r3, #12]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c96:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	e000      	b.n	8006c9e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006c9c:	2302      	movs	r3, #2
  }
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3714      	adds	r7, #20
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr

08006caa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b082      	sub	sp, #8
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	68da      	ldr	r2, [r3, #12]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cc0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2220      	movs	r2, #32
 8006cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f7ff fec8 	bl	8006a60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006cd0:	2300      	movs	r3, #0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3708      	adds	r7, #8
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}

08006cda <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006cda:	b580      	push	{r7, lr}
 8006cdc:	b08c      	sub	sp, #48	; 0x30
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	2b22      	cmp	r3, #34	; 0x22
 8006cec:	f040 80ab 	bne.w	8006e46 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cf8:	d117      	bne.n	8006d2a <UART_Receive_IT+0x50>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d113      	bne.n	8006d2a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006d02:	2300      	movs	r3, #0
 8006d04:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d0a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d18:	b29a      	uxth	r2, r3
 8006d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d1c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d22:	1c9a      	adds	r2, r3, #2
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	629a      	str	r2, [r3, #40]	; 0x28
 8006d28:	e026      	b.n	8006d78 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006d30:	2300      	movs	r3, #0
 8006d32:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d3c:	d007      	beq.n	8006d4e <UART_Receive_IT+0x74>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d10a      	bne.n	8006d5c <UART_Receive_IT+0x82>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d106      	bne.n	8006d5c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	b2da      	uxtb	r2, r3
 8006d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d58:	701a      	strb	r2, [r3, #0]
 8006d5a:	e008      	b.n	8006d6e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d68:	b2da      	uxtb	r2, r3
 8006d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d6c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d72:	1c5a      	adds	r2, r3, #1
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	3b01      	subs	r3, #1
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	4619      	mov	r1, r3
 8006d86:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d15a      	bne.n	8006e42 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68da      	ldr	r2, [r3, #12]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f022 0220 	bic.w	r2, r2, #32
 8006d9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	68da      	ldr	r2, [r3, #12]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006daa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	695a      	ldr	r2, [r3, #20]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f022 0201 	bic.w	r2, r2, #1
 8006dba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2220      	movs	r2, #32
 8006dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d135      	bne.n	8006e38 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	330c      	adds	r3, #12
 8006dd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	e853 3f00 	ldrex	r3, [r3]
 8006de0:	613b      	str	r3, [r7, #16]
   return(result);
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	f023 0310 	bic.w	r3, r3, #16
 8006de8:	627b      	str	r3, [r7, #36]	; 0x24
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	330c      	adds	r3, #12
 8006df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006df2:	623a      	str	r2, [r7, #32]
 8006df4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df6:	69f9      	ldr	r1, [r7, #28]
 8006df8:	6a3a      	ldr	r2, [r7, #32]
 8006dfa:	e841 2300 	strex	r3, r2, [r1]
 8006dfe:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d1e5      	bne.n	8006dd2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f003 0310 	and.w	r3, r3, #16
 8006e10:	2b10      	cmp	r3, #16
 8006e12:	d10a      	bne.n	8006e2a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e14:	2300      	movs	r3, #0
 8006e16:	60fb      	str	r3, [r7, #12]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	60fb      	str	r3, [r7, #12]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	60fb      	str	r3, [r7, #12]
 8006e28:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006e2e:	4619      	mov	r1, r3
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f7ff fe29 	bl	8006a88 <HAL_UARTEx_RxEventCallback>
 8006e36:	e002      	b.n	8006e3e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f7f9 fd93 	bl	8000964 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	e002      	b.n	8006e48 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006e42:	2300      	movs	r3, #0
 8006e44:	e000      	b.n	8006e48 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006e46:	2302      	movs	r3, #2
  }
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3730      	adds	r7, #48	; 0x30
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e54:	b0c0      	sub	sp, #256	; 0x100
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	691b      	ldr	r3, [r3, #16]
 8006e64:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e6c:	68d9      	ldr	r1, [r3, #12]
 8006e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	ea40 0301 	orr.w	r3, r0, r1
 8006e78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e7e:	689a      	ldr	r2, [r3, #8]
 8006e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	431a      	orrs	r2, r3
 8006e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e8c:	695b      	ldr	r3, [r3, #20]
 8006e8e:	431a      	orrs	r2, r3
 8006e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e94:	69db      	ldr	r3, [r3, #28]
 8006e96:	4313      	orrs	r3, r2
 8006e98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006ea8:	f021 010c 	bic.w	r1, r1, #12
 8006eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006eb6:	430b      	orrs	r3, r1
 8006eb8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	695b      	ldr	r3, [r3, #20]
 8006ec2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eca:	6999      	ldr	r1, [r3, #24]
 8006ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	ea40 0301 	orr.w	r3, r0, r1
 8006ed6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	4b8f      	ldr	r3, [pc, #572]	; (800711c <UART_SetConfig+0x2cc>)
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d005      	beq.n	8006ef0 <UART_SetConfig+0xa0>
 8006ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	4b8d      	ldr	r3, [pc, #564]	; (8007120 <UART_SetConfig+0x2d0>)
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d104      	bne.n	8006efa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006ef0:	f7fe fa78 	bl	80053e4 <HAL_RCC_GetPCLK2Freq>
 8006ef4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006ef8:	e003      	b.n	8006f02 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006efa:	f7fe fa5f 	bl	80053bc <HAL_RCC_GetPCLK1Freq>
 8006efe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f06:	69db      	ldr	r3, [r3, #28]
 8006f08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f0c:	f040 810c 	bne.w	8007128 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f14:	2200      	movs	r2, #0
 8006f16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f1a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006f1e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006f22:	4622      	mov	r2, r4
 8006f24:	462b      	mov	r3, r5
 8006f26:	1891      	adds	r1, r2, r2
 8006f28:	65b9      	str	r1, [r7, #88]	; 0x58
 8006f2a:	415b      	adcs	r3, r3
 8006f2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f2e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006f32:	4621      	mov	r1, r4
 8006f34:	eb12 0801 	adds.w	r8, r2, r1
 8006f38:	4629      	mov	r1, r5
 8006f3a:	eb43 0901 	adc.w	r9, r3, r1
 8006f3e:	f04f 0200 	mov.w	r2, #0
 8006f42:	f04f 0300 	mov.w	r3, #0
 8006f46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f52:	4690      	mov	r8, r2
 8006f54:	4699      	mov	r9, r3
 8006f56:	4623      	mov	r3, r4
 8006f58:	eb18 0303 	adds.w	r3, r8, r3
 8006f5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006f60:	462b      	mov	r3, r5
 8006f62:	eb49 0303 	adc.w	r3, r9, r3
 8006f66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006f76:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006f7a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006f7e:	460b      	mov	r3, r1
 8006f80:	18db      	adds	r3, r3, r3
 8006f82:	653b      	str	r3, [r7, #80]	; 0x50
 8006f84:	4613      	mov	r3, r2
 8006f86:	eb42 0303 	adc.w	r3, r2, r3
 8006f8a:	657b      	str	r3, [r7, #84]	; 0x54
 8006f8c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006f90:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006f94:	f7f9 fb64 	bl	8000660 <__aeabi_uldivmod>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	460b      	mov	r3, r1
 8006f9c:	4b61      	ldr	r3, [pc, #388]	; (8007124 <UART_SetConfig+0x2d4>)
 8006f9e:	fba3 2302 	umull	r2, r3, r3, r2
 8006fa2:	095b      	lsrs	r3, r3, #5
 8006fa4:	011c      	lsls	r4, r3, #4
 8006fa6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006faa:	2200      	movs	r2, #0
 8006fac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006fb0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006fb4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006fb8:	4642      	mov	r2, r8
 8006fba:	464b      	mov	r3, r9
 8006fbc:	1891      	adds	r1, r2, r2
 8006fbe:	64b9      	str	r1, [r7, #72]	; 0x48
 8006fc0:	415b      	adcs	r3, r3
 8006fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fc4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006fc8:	4641      	mov	r1, r8
 8006fca:	eb12 0a01 	adds.w	sl, r2, r1
 8006fce:	4649      	mov	r1, r9
 8006fd0:	eb43 0b01 	adc.w	fp, r3, r1
 8006fd4:	f04f 0200 	mov.w	r2, #0
 8006fd8:	f04f 0300 	mov.w	r3, #0
 8006fdc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006fe0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006fe4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006fe8:	4692      	mov	sl, r2
 8006fea:	469b      	mov	fp, r3
 8006fec:	4643      	mov	r3, r8
 8006fee:	eb1a 0303 	adds.w	r3, sl, r3
 8006ff2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ff6:	464b      	mov	r3, r9
 8006ff8:	eb4b 0303 	adc.w	r3, fp, r3
 8006ffc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800700c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007010:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007014:	460b      	mov	r3, r1
 8007016:	18db      	adds	r3, r3, r3
 8007018:	643b      	str	r3, [r7, #64]	; 0x40
 800701a:	4613      	mov	r3, r2
 800701c:	eb42 0303 	adc.w	r3, r2, r3
 8007020:	647b      	str	r3, [r7, #68]	; 0x44
 8007022:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007026:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800702a:	f7f9 fb19 	bl	8000660 <__aeabi_uldivmod>
 800702e:	4602      	mov	r2, r0
 8007030:	460b      	mov	r3, r1
 8007032:	4611      	mov	r1, r2
 8007034:	4b3b      	ldr	r3, [pc, #236]	; (8007124 <UART_SetConfig+0x2d4>)
 8007036:	fba3 2301 	umull	r2, r3, r3, r1
 800703a:	095b      	lsrs	r3, r3, #5
 800703c:	2264      	movs	r2, #100	; 0x64
 800703e:	fb02 f303 	mul.w	r3, r2, r3
 8007042:	1acb      	subs	r3, r1, r3
 8007044:	00db      	lsls	r3, r3, #3
 8007046:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800704a:	4b36      	ldr	r3, [pc, #216]	; (8007124 <UART_SetConfig+0x2d4>)
 800704c:	fba3 2302 	umull	r2, r3, r3, r2
 8007050:	095b      	lsrs	r3, r3, #5
 8007052:	005b      	lsls	r3, r3, #1
 8007054:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007058:	441c      	add	r4, r3
 800705a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800705e:	2200      	movs	r2, #0
 8007060:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007064:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007068:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800706c:	4642      	mov	r2, r8
 800706e:	464b      	mov	r3, r9
 8007070:	1891      	adds	r1, r2, r2
 8007072:	63b9      	str	r1, [r7, #56]	; 0x38
 8007074:	415b      	adcs	r3, r3
 8007076:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007078:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800707c:	4641      	mov	r1, r8
 800707e:	1851      	adds	r1, r2, r1
 8007080:	6339      	str	r1, [r7, #48]	; 0x30
 8007082:	4649      	mov	r1, r9
 8007084:	414b      	adcs	r3, r1
 8007086:	637b      	str	r3, [r7, #52]	; 0x34
 8007088:	f04f 0200 	mov.w	r2, #0
 800708c:	f04f 0300 	mov.w	r3, #0
 8007090:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007094:	4659      	mov	r1, fp
 8007096:	00cb      	lsls	r3, r1, #3
 8007098:	4651      	mov	r1, sl
 800709a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800709e:	4651      	mov	r1, sl
 80070a0:	00ca      	lsls	r2, r1, #3
 80070a2:	4610      	mov	r0, r2
 80070a4:	4619      	mov	r1, r3
 80070a6:	4603      	mov	r3, r0
 80070a8:	4642      	mov	r2, r8
 80070aa:	189b      	adds	r3, r3, r2
 80070ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80070b0:	464b      	mov	r3, r9
 80070b2:	460a      	mov	r2, r1
 80070b4:	eb42 0303 	adc.w	r3, r2, r3
 80070b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80070bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80070c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80070cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80070d0:	460b      	mov	r3, r1
 80070d2:	18db      	adds	r3, r3, r3
 80070d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80070d6:	4613      	mov	r3, r2
 80070d8:	eb42 0303 	adc.w	r3, r2, r3
 80070dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80070e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80070e6:	f7f9 fabb 	bl	8000660 <__aeabi_uldivmod>
 80070ea:	4602      	mov	r2, r0
 80070ec:	460b      	mov	r3, r1
 80070ee:	4b0d      	ldr	r3, [pc, #52]	; (8007124 <UART_SetConfig+0x2d4>)
 80070f0:	fba3 1302 	umull	r1, r3, r3, r2
 80070f4:	095b      	lsrs	r3, r3, #5
 80070f6:	2164      	movs	r1, #100	; 0x64
 80070f8:	fb01 f303 	mul.w	r3, r1, r3
 80070fc:	1ad3      	subs	r3, r2, r3
 80070fe:	00db      	lsls	r3, r3, #3
 8007100:	3332      	adds	r3, #50	; 0x32
 8007102:	4a08      	ldr	r2, [pc, #32]	; (8007124 <UART_SetConfig+0x2d4>)
 8007104:	fba2 2303 	umull	r2, r3, r2, r3
 8007108:	095b      	lsrs	r3, r3, #5
 800710a:	f003 0207 	and.w	r2, r3, #7
 800710e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4422      	add	r2, r4
 8007116:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007118:	e105      	b.n	8007326 <UART_SetConfig+0x4d6>
 800711a:	bf00      	nop
 800711c:	40011000 	.word	0x40011000
 8007120:	40011400 	.word	0x40011400
 8007124:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007128:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800712c:	2200      	movs	r2, #0
 800712e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007132:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007136:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800713a:	4642      	mov	r2, r8
 800713c:	464b      	mov	r3, r9
 800713e:	1891      	adds	r1, r2, r2
 8007140:	6239      	str	r1, [r7, #32]
 8007142:	415b      	adcs	r3, r3
 8007144:	627b      	str	r3, [r7, #36]	; 0x24
 8007146:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800714a:	4641      	mov	r1, r8
 800714c:	1854      	adds	r4, r2, r1
 800714e:	4649      	mov	r1, r9
 8007150:	eb43 0501 	adc.w	r5, r3, r1
 8007154:	f04f 0200 	mov.w	r2, #0
 8007158:	f04f 0300 	mov.w	r3, #0
 800715c:	00eb      	lsls	r3, r5, #3
 800715e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007162:	00e2      	lsls	r2, r4, #3
 8007164:	4614      	mov	r4, r2
 8007166:	461d      	mov	r5, r3
 8007168:	4643      	mov	r3, r8
 800716a:	18e3      	adds	r3, r4, r3
 800716c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007170:	464b      	mov	r3, r9
 8007172:	eb45 0303 	adc.w	r3, r5, r3
 8007176:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800717a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007186:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800718a:	f04f 0200 	mov.w	r2, #0
 800718e:	f04f 0300 	mov.w	r3, #0
 8007192:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007196:	4629      	mov	r1, r5
 8007198:	008b      	lsls	r3, r1, #2
 800719a:	4621      	mov	r1, r4
 800719c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071a0:	4621      	mov	r1, r4
 80071a2:	008a      	lsls	r2, r1, #2
 80071a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80071a8:	f7f9 fa5a 	bl	8000660 <__aeabi_uldivmod>
 80071ac:	4602      	mov	r2, r0
 80071ae:	460b      	mov	r3, r1
 80071b0:	4b60      	ldr	r3, [pc, #384]	; (8007334 <UART_SetConfig+0x4e4>)
 80071b2:	fba3 2302 	umull	r2, r3, r3, r2
 80071b6:	095b      	lsrs	r3, r3, #5
 80071b8:	011c      	lsls	r4, r3, #4
 80071ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071be:	2200      	movs	r2, #0
 80071c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80071c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80071c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80071cc:	4642      	mov	r2, r8
 80071ce:	464b      	mov	r3, r9
 80071d0:	1891      	adds	r1, r2, r2
 80071d2:	61b9      	str	r1, [r7, #24]
 80071d4:	415b      	adcs	r3, r3
 80071d6:	61fb      	str	r3, [r7, #28]
 80071d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80071dc:	4641      	mov	r1, r8
 80071de:	1851      	adds	r1, r2, r1
 80071e0:	6139      	str	r1, [r7, #16]
 80071e2:	4649      	mov	r1, r9
 80071e4:	414b      	adcs	r3, r1
 80071e6:	617b      	str	r3, [r7, #20]
 80071e8:	f04f 0200 	mov.w	r2, #0
 80071ec:	f04f 0300 	mov.w	r3, #0
 80071f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80071f4:	4659      	mov	r1, fp
 80071f6:	00cb      	lsls	r3, r1, #3
 80071f8:	4651      	mov	r1, sl
 80071fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071fe:	4651      	mov	r1, sl
 8007200:	00ca      	lsls	r2, r1, #3
 8007202:	4610      	mov	r0, r2
 8007204:	4619      	mov	r1, r3
 8007206:	4603      	mov	r3, r0
 8007208:	4642      	mov	r2, r8
 800720a:	189b      	adds	r3, r3, r2
 800720c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007210:	464b      	mov	r3, r9
 8007212:	460a      	mov	r2, r1
 8007214:	eb42 0303 	adc.w	r3, r2, r3
 8007218:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800721c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	67bb      	str	r3, [r7, #120]	; 0x78
 8007226:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007228:	f04f 0200 	mov.w	r2, #0
 800722c:	f04f 0300 	mov.w	r3, #0
 8007230:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007234:	4649      	mov	r1, r9
 8007236:	008b      	lsls	r3, r1, #2
 8007238:	4641      	mov	r1, r8
 800723a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800723e:	4641      	mov	r1, r8
 8007240:	008a      	lsls	r2, r1, #2
 8007242:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007246:	f7f9 fa0b 	bl	8000660 <__aeabi_uldivmod>
 800724a:	4602      	mov	r2, r0
 800724c:	460b      	mov	r3, r1
 800724e:	4b39      	ldr	r3, [pc, #228]	; (8007334 <UART_SetConfig+0x4e4>)
 8007250:	fba3 1302 	umull	r1, r3, r3, r2
 8007254:	095b      	lsrs	r3, r3, #5
 8007256:	2164      	movs	r1, #100	; 0x64
 8007258:	fb01 f303 	mul.w	r3, r1, r3
 800725c:	1ad3      	subs	r3, r2, r3
 800725e:	011b      	lsls	r3, r3, #4
 8007260:	3332      	adds	r3, #50	; 0x32
 8007262:	4a34      	ldr	r2, [pc, #208]	; (8007334 <UART_SetConfig+0x4e4>)
 8007264:	fba2 2303 	umull	r2, r3, r2, r3
 8007268:	095b      	lsrs	r3, r3, #5
 800726a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800726e:	441c      	add	r4, r3
 8007270:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007274:	2200      	movs	r2, #0
 8007276:	673b      	str	r3, [r7, #112]	; 0x70
 8007278:	677a      	str	r2, [r7, #116]	; 0x74
 800727a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800727e:	4642      	mov	r2, r8
 8007280:	464b      	mov	r3, r9
 8007282:	1891      	adds	r1, r2, r2
 8007284:	60b9      	str	r1, [r7, #8]
 8007286:	415b      	adcs	r3, r3
 8007288:	60fb      	str	r3, [r7, #12]
 800728a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800728e:	4641      	mov	r1, r8
 8007290:	1851      	adds	r1, r2, r1
 8007292:	6039      	str	r1, [r7, #0]
 8007294:	4649      	mov	r1, r9
 8007296:	414b      	adcs	r3, r1
 8007298:	607b      	str	r3, [r7, #4]
 800729a:	f04f 0200 	mov.w	r2, #0
 800729e:	f04f 0300 	mov.w	r3, #0
 80072a2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80072a6:	4659      	mov	r1, fp
 80072a8:	00cb      	lsls	r3, r1, #3
 80072aa:	4651      	mov	r1, sl
 80072ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80072b0:	4651      	mov	r1, sl
 80072b2:	00ca      	lsls	r2, r1, #3
 80072b4:	4610      	mov	r0, r2
 80072b6:	4619      	mov	r1, r3
 80072b8:	4603      	mov	r3, r0
 80072ba:	4642      	mov	r2, r8
 80072bc:	189b      	adds	r3, r3, r2
 80072be:	66bb      	str	r3, [r7, #104]	; 0x68
 80072c0:	464b      	mov	r3, r9
 80072c2:	460a      	mov	r2, r1
 80072c4:	eb42 0303 	adc.w	r3, r2, r3
 80072c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80072ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	663b      	str	r3, [r7, #96]	; 0x60
 80072d4:	667a      	str	r2, [r7, #100]	; 0x64
 80072d6:	f04f 0200 	mov.w	r2, #0
 80072da:	f04f 0300 	mov.w	r3, #0
 80072de:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80072e2:	4649      	mov	r1, r9
 80072e4:	008b      	lsls	r3, r1, #2
 80072e6:	4641      	mov	r1, r8
 80072e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072ec:	4641      	mov	r1, r8
 80072ee:	008a      	lsls	r2, r1, #2
 80072f0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80072f4:	f7f9 f9b4 	bl	8000660 <__aeabi_uldivmod>
 80072f8:	4602      	mov	r2, r0
 80072fa:	460b      	mov	r3, r1
 80072fc:	4b0d      	ldr	r3, [pc, #52]	; (8007334 <UART_SetConfig+0x4e4>)
 80072fe:	fba3 1302 	umull	r1, r3, r3, r2
 8007302:	095b      	lsrs	r3, r3, #5
 8007304:	2164      	movs	r1, #100	; 0x64
 8007306:	fb01 f303 	mul.w	r3, r1, r3
 800730a:	1ad3      	subs	r3, r2, r3
 800730c:	011b      	lsls	r3, r3, #4
 800730e:	3332      	adds	r3, #50	; 0x32
 8007310:	4a08      	ldr	r2, [pc, #32]	; (8007334 <UART_SetConfig+0x4e4>)
 8007312:	fba2 2303 	umull	r2, r3, r2, r3
 8007316:	095b      	lsrs	r3, r3, #5
 8007318:	f003 020f 	and.w	r2, r3, #15
 800731c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4422      	add	r2, r4
 8007324:	609a      	str	r2, [r3, #8]
}
 8007326:	bf00      	nop
 8007328:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800732c:	46bd      	mov	sp, r7
 800732e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007332:	bf00      	nop
 8007334:	51eb851f 	.word	0x51eb851f

08007338 <__libc_init_array>:
 8007338:	b570      	push	{r4, r5, r6, lr}
 800733a:	4d0d      	ldr	r5, [pc, #52]	; (8007370 <__libc_init_array+0x38>)
 800733c:	4c0d      	ldr	r4, [pc, #52]	; (8007374 <__libc_init_array+0x3c>)
 800733e:	1b64      	subs	r4, r4, r5
 8007340:	10a4      	asrs	r4, r4, #2
 8007342:	2600      	movs	r6, #0
 8007344:	42a6      	cmp	r6, r4
 8007346:	d109      	bne.n	800735c <__libc_init_array+0x24>
 8007348:	4d0b      	ldr	r5, [pc, #44]	; (8007378 <__libc_init_array+0x40>)
 800734a:	4c0c      	ldr	r4, [pc, #48]	; (800737c <__libc_init_array+0x44>)
 800734c:	f000 f82e 	bl	80073ac <_init>
 8007350:	1b64      	subs	r4, r4, r5
 8007352:	10a4      	asrs	r4, r4, #2
 8007354:	2600      	movs	r6, #0
 8007356:	42a6      	cmp	r6, r4
 8007358:	d105      	bne.n	8007366 <__libc_init_array+0x2e>
 800735a:	bd70      	pop	{r4, r5, r6, pc}
 800735c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007360:	4798      	blx	r3
 8007362:	3601      	adds	r6, #1
 8007364:	e7ee      	b.n	8007344 <__libc_init_array+0xc>
 8007366:	f855 3b04 	ldr.w	r3, [r5], #4
 800736a:	4798      	blx	r3
 800736c:	3601      	adds	r6, #1
 800736e:	e7f2      	b.n	8007356 <__libc_init_array+0x1e>
 8007370:	080075e8 	.word	0x080075e8
 8007374:	080075e8 	.word	0x080075e8
 8007378:	080075e8 	.word	0x080075e8
 800737c:	080075ec 	.word	0x080075ec

08007380 <memcpy>:
 8007380:	440a      	add	r2, r1
 8007382:	4291      	cmp	r1, r2
 8007384:	f100 33ff 	add.w	r3, r0, #4294967295
 8007388:	d100      	bne.n	800738c <memcpy+0xc>
 800738a:	4770      	bx	lr
 800738c:	b510      	push	{r4, lr}
 800738e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007392:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007396:	4291      	cmp	r1, r2
 8007398:	d1f9      	bne.n	800738e <memcpy+0xe>
 800739a:	bd10      	pop	{r4, pc}

0800739c <memset>:
 800739c:	4402      	add	r2, r0
 800739e:	4603      	mov	r3, r0
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d100      	bne.n	80073a6 <memset+0xa>
 80073a4:	4770      	bx	lr
 80073a6:	f803 1b01 	strb.w	r1, [r3], #1
 80073aa:	e7f9      	b.n	80073a0 <memset+0x4>

080073ac <_init>:
 80073ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ae:	bf00      	nop
 80073b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073b2:	bc08      	pop	{r3}
 80073b4:	469e      	mov	lr, r3
 80073b6:	4770      	bx	lr

080073b8 <_fini>:
 80073b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ba:	bf00      	nop
 80073bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073be:	bc08      	pop	{r3}
 80073c0:	469e      	mov	lr, r3
 80073c2:	4770      	bx	lr
